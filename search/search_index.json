{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem Vindo ao Bootcamp Next Gen 2025","text":""},{"location":"#desafio-tecnico-a-partir-de-uma-necessidade-real","title":"Desafio t\u00e9cnico a partir de uma necessidade real","text":"<p>Nesse bootcamp ser\u00e3o introduzidos na CI&amp;T atrav\u00e9s de um desafio baseado em uma necessidade real de neg\u00f3cio, trata-se de um sistema de coleta de feedback dos colaboradores internos diretamente dos clientes externos</p>"},{"location":"#vivencia-com-uma-arquitetura-moderna","title":"Viv\u00eancia com uma arquitetura moderna","text":"<p>Ir\u00e3o trabalhar com uma arquitetura moderna baseada em micro servi\u00e7os para que possam j\u00e1 ter uma viv\u00eancia com esse estilo arquitetural, a id\u00e9ia n\u00e3o \u00e9 que se tornem especialistas dessa arquitetura mas que j\u00e1 tenham um primeiro contato com a mesma. Com isso ser\u00e1 poss\u00edvel exercitar diversas linguagens como Java, Javascript e Python</p> <pre>900fe4bd7b35b0fe840e87d33b5839dd1024dadadf89636127f4ac4bf961fdb759f86c495d56549a572a35f321e68c4765a37e31835c8c3c4a549e08daeb4185</pre>"},{"location":"#vivencia-com-as-melhores-praticas-de-mercado","title":"Viv\u00eancia com as melhores pr\u00e1ticas de mercado","text":"<ul> <li>Test Driven Development</li> <li>Codigo Limpo</li> <li>Restful API\u2019s</li> <li>eXtreme Programming</li> <li>Microservice Patterns</li> <li>Open Api Spec</li> <li>Princ\u00edpios S.O.L.I.D</li> <li>Domain Driven Design</li> </ul> <p>Todos passados como base para que possam entender com maior clareza os c\u00f3digos gerados pela IA</p>"},{"location":"#introducao-a-metodologia-de-trabalho-da-cit","title":"Introdu\u00e7\u00e3o a metodologia de trabalho da CI&amp;T","text":"<ul> <li>Ir\u00e3o ter viv\u00eancia em um pequeno projeto em um formato real do dia-a-dia com sprints, dailies, plannings, retros, etc</li> <li>Ir\u00e3o ser acompanhados por tutores SM (Scrum Master) para terem maior compreens\u00e3o desse way of work da CI&amp;T</li> </ul>"},{"location":"#estrategia-ai-first","title":"Estrat\u00e9gia AI First","text":"<ul> <li>Usar o flow durante o planejamento e refinamento das historias com todo o time</li> <li>Usar o flow para criar os testes end-to-end das funcionalidades</li> <li>No desenvolvimento individual das hist\u00f3rias usar o ciclo, Gerar com flow -&gt; Revisar -&gt; Integrar</li> </ul> <p>A ideia \u00e9 usar o flow para levantar as pedras mais pesadas e usar a expertise humana para revisar</p>"},{"location":"#o-que-e-ser-um-desenvolvedor-ai-first","title":"O que \u00e9 ser um desenvolvedor AI First","text":""},{"location":"#fundacao-solida","title":"FUNDA\u00c7\u00c2O S\u00d3LIDA","text":"<p>Voc\u00ea sabe como usar a IA, mas para uma boa aplicabilidade e sucesso, a pessoa precisa ter uma base t\u00e9cnica s\u00f3lida. Dessa forma, voc\u00ea pode organizar suas ideias e tentar as melhores entradas, no melhor modelo, na melhor ferramenta para obter o melhor resultado.</p>"},{"location":"#responsabilidade","title":"RESPONSABILIDADE","text":"<p>Devido a uma base s\u00f3lida, existe a responsabilidade de n\u00e3o confiar completamente na IA sem uma revis\u00e3o pr\u00e9via. \u00c9 importante contar com o apoio de pessoas mais experientes para apoiar esse aspecto.</p>"},{"location":"#exploradores-desafiadores","title":"EXPLORADORES / DESAFIADORES","text":"<p>N\u00e3o estar excessivamente vinculado a uma tecnologia espec\u00edfica torna-o flex\u00edvel na adapta\u00e7\u00e3o a diferentes contextos e aberto a mudan\u00e7as.</p>"},{"location":"#pensamento-critico","title":"PENSAMENTO CR\u00cdTICO","text":"<p>A capacidade cr\u00edtica \u00e9 fundamental para reduzir riscos e erros. Isso permite entender os contextos e aplicar solu\u00e7\u00f5es no n\u00edvel que a situa\u00e7\u00e3o pode manejar ou \u00e9 capaz de suportar.</p>"},{"location":"estrutura_bootcamp/","title":"Estrutura do Bootcamp","text":"<p>Vamos trabalhar o desenvolvimento de um sistema que de fato faz parte do backlog de neg\u00f3cios da CI&amp;T. Trata-se de um sistema de gest\u00e3o de feedback de clientes externos aos colaboradores internos da CI&amp;T</p>"},{"location":"estrutura_bootcamp/#tempo-planejado-para-o-projeto","title":"Tempo planejado para o projeto","text":"<p>O projeto foi planejado para durar 4 sprints, aonde que em cada sprint ser\u00e1 trabalhado um \u00fanico m\u00f3dulo e um \u00fanico objetivo de neg\u00f3cio. Os seguintes m\u00f3dulos ser\u00e3o trabalhados</p> <ul> <li>Gest\u00e3o de colaboradores e PDMs</li> <li>Login de colaboradores e PDMs</li> <li>Solicita\u00e7\u00e3o e aprova\u00e7\u00e3o de Feedback</li> <li>Reposta de Feedbacks</li> <li>Visualiza\u00e7\u00e3o de Feedbacks</li> </ul> <pre><code>timeline\n    title Features ao longo das sprints\n    Sprint 1 \n        : Gest\u00e3o de colaboradores\n        : Login de colaboradores\n    Sprint 2 \n        : Solicita\u00e7\u00e3o de Feedback\n        : Aprova\u00e7\u00e3o de Feedback\n    Sprint 3 \n        : Resposta de Feedbacks\n    Sprint 4 \n        : Api Gateway com NodeJS\n        : Visualiza\u00e7\u00e3o de Feedbcks (Python)\n</code></pre>"},{"location":"estrutura_bootcamp/#conhecimentos-a-serem-trabalhados-ao-longo-do-bootcamp","title":"Conhecimentos a serem trabalhados ao longo do bootcamp","text":"<ul> <li>AI First</li> <li>TDD</li> <li>DDD</li> <li>Bounded Context</li> <li>SOLID</li> <li>SMTP</li> <li>JAVA</li> <li>NextJS</li> <li>D\u00e9bitos T\u00e9cnicos</li> <li>Logs e observabilidade</li> <li>NODEJS - Express</li> <li>PYTHON</li> </ul> <pre><code>timeline\n    title Conhecimentos ao longo das sprints\n    Sprint 1\n        : AI First \n        : DDD\n        : JAVA B\u00e1sico\n        : NextJS\n    Sprint 2 \n        : TDD\n        : SMTP\n        : JAVA Intermedi\u00e1rio\n        : SOLID\n        : Bounded Context\n    Sprint 3 \n        : D\u00e9bitos T\u00e9cnicos\n        : Logs e observabilidade\n    Sprint 4 \n        : NodeJS - Express\n        : Python - FastAPI\n</code></pre>"},{"location":"features/","title":"Detalhamento das Features","text":""},{"location":"features/#cadastro-de-colaboradores-e-pdms","title":"Cadastro de Colaboradores e PDMs","text":"<p>COMO um administrador de usu\u00e1rios</p> <p>EU QUERO cadastrar colaboradores e PDMs na plataforma, incluindo nome, email, cargo, se \u00e9 um PDM e associar diretos</p> <p>PARA QUE eu possa gerenciar e organizar os usu\u00e1rios da empresa.</p>"},{"location":"features/#narrativa-do-negocio","title":"Narrativa do Neg\u00f3cio","text":"<p>Um administrador precisa de uma funcionalidade que permita cadastrar, editar e desativar colaboradores e PDMs, registrando informa\u00e7\u00f5es como nome, email, cargo e se \u00e9 um PDM, al\u00e9m de associar esses usu\u00e1rios aos seus diretos.</p>"},{"location":"features/#fluxo-de-tela","title":"Fluxo de Tela","text":"<ol> <li> <p>O administrador acessa a p\u00e1gina de cadastro de usu\u00e1rio.</p> </li> <li> <p>O sistema exibe um formul\u00e1rio de cadastro com campos para nome, email, cargo e um checkbox para indicar se \u00e9 um PDM.</p> </li> <li> <p>O administrador preenche os campos obrigat\u00f3rios (nome, email, cargo).</p> </li> <li> <p>O administrador marca o checkbox se o usu\u00e1rio for um PDM.</p> </li> <li> <p>O administrador seleciona os diretos do PDM em uma lista de usu\u00e1rios dispon\u00edveis.</p> </li> <li> <p>O administrador clica no bot\u00e3o \"Cadastrar\".</p> </li> <li> <p>O sistema salva as informa\u00e7\u00f5es do usu\u00e1rio e registra a data de cria\u00e7\u00e3o.</p> </li> <li> <p>O sistema exibe uma mensagem de confirma\u00e7\u00e3o de cadastro.</p> </li> <li> <p>Para editar um usu\u00e1rio, o administrador acessa a lista de usu\u00e1rios cadastrados e seleciona o usu\u00e1rio desejado.</p> </li> <li> <p>O sistema exibe o formul\u00e1rio preenchido com as informa\u00e7\u00f5es atuais do usu\u00e1rio.</p> </li> <li> <p>O administrador altera as informa\u00e7\u00f5es desejadas e clica no bot\u00e3o \"Salvar\".</p> </li> <li> <p>O sistema salva as altera\u00e7\u00f5es e registra a data de edi\u00e7\u00e3o.</p> </li> <li> <p>Para desativar um usu\u00e1rio, o administrador acessa a lista de usu\u00e1rios cadastrados e seleciona o usu\u00e1rio desejado.</p> </li> <li> <p>O sistema exibe os detalhes do usu\u00e1rio e um bot\u00e3o \"Desativar\".</p> </li> <li> <p>O administrador clica no bot\u00e3o \"Desativar\".</p> </li> <li> <p>O sistema desativa o usu\u00e1rio e registra a data de desativa\u00e7\u00e3o.</p> </li> </ol>"},{"location":"features/#criterios-de-aceitacao","title":"Crit\u00e9rios de Aceita\u00e7\u00e3o","text":"<ol> <li> <p>O sistema deve permitir o cadastro de colaboradores e PDMs.</p> </li> <li> <p>O sistema deve permitir a edi\u00e7\u00e3o de informa\u00e7\u00f5es de usu\u00e1rios.</p> </li> <li> <p>O sistema deve permitir a desativa\u00e7\u00e3o de usu\u00e1rios.</p> </li> <li> <p>O sistema deve registrar as datas de cria\u00e7\u00e3o, edi\u00e7\u00e3o e desativa\u00e7\u00e3o.</p> </li> <li> <p>O sistema deve exibir uma mensagem de confirma\u00e7\u00e3o ap\u00f3s o cadastro, edi\u00e7\u00e3o ou desativa\u00e7\u00e3o de um usu\u00e1rio.</p> </li> <li> <p>O sistema deve tratar poss\u00edveis erros e exibir uma mensagem informando o usu\u00e1rio.</p> </li> </ol>"},{"location":"features/#login-na-plataforma-para-colaboradores-e-pdms","title":"Login na Plataforma para Colaboradores e PDMs","text":"<p>COMO um colaborador ou PDM</p> <p>EU QUERO fazer login na plataforma</p> <p>PARA QUE eu possa acessar meus dados e funcionalidades associadas ao meu perfil</p>"},{"location":"features/#business-narrative","title":"Business Narrative","text":"<p>Permitir que colaboradores e PDMs fa\u00e7am login na plataforma e, caso seja a primeira vez, definir uma senha. Ap\u00f3s o login, gerar um token JWT com os dados do usu\u00e1rio nas claims, incluindo as informa\u00e7\u00f5es do PDM.</p>"},{"location":"features/#screen-flow","title":"Screen Flow","text":"<ol> <li>O usu\u00e1rio acessa a p\u00e1gina de login.</li> <li>O sistema exibe campos para inser\u00e7\u00e3o de e-mail.</li> <li>O usu\u00e1rio insere seu e-mail.</li> <li>O usu\u00e1rio clica no bot\u00e3o \"Continuar\".</li> <li>Se for a primeira vez que o usu\u00e1rio est\u00e1 fazendo login:    a. O sistema exibe uma tela para defini\u00e7\u00e3o de nova senha.    b. O usu\u00e1rio insere a nova senha e confirma a senha.    c. O usu\u00e1rio clica no bot\u00e3o \"Salvar\".    d. O sistema exibe uma mensagem de confirma\u00e7\u00e3o de senha definida com sucesso.</li> <li>O sistema apresenta uma tela para digitar a senha</li> <li>O sistema valida as credenciais:    a. Se houver erro, exibe mensagem de erro e permite nova tentativa.    b. Se bem-sucedido, gera um token JWT contendo os dados do usu\u00e1rio nas claims, incluindo os dados do PDM.</li> <li>O sistema redireciona o usu\u00e1rio para a p\u00e1gina inicial da plataforma.</li> </ol>"},{"location":"features/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>O sistema deve permitir que colaboradores e PDMs fa\u00e7am login.</li> <li>O sistema deve exibir uma tela para defini\u00e7\u00e3o de senha se for o primeiro login do usu\u00e1rio.</li> <li>O sistema deve gerar um token JWT com os dados do usu\u00e1rio nas claims, incluindo informa\u00e7\u00f5es do PDM.</li> <li>O sistema deve ter um desempenho satisfat\u00f3rio, com tempo de resposta m\u00e1ximo de 2 segundos.</li> <li>O admin tbm deve se logar ao sistema, por\u00e9m o mesmo s\u00f3 \u00e9 cadastrado atrav\u00e9s de uma linha de comando</li> </ul>"},{"location":"features/#criacao-de-solicitacao-de-feedback","title":"Cria\u00e7\u00e3o de Solicita\u00e7\u00e3o de Feedback","text":"<p>COMO um colaborador</p> <p>QUERO criar uma solicita\u00e7\u00e3o de feedback</p> <p>PARA receber feedback personalizado de avaliadores espec\u00edficos</p>"},{"location":"features/#business-narrative_1","title":"Business Narrative","text":"<p>Os colaboradores precisam de uma maneira de solicitar feedback personalizado dos avaliadores escolhidos, garantindo que o processo seja aprovado pelo PDM para manter a qualidade e relev\u00e2ncia das avalia\u00e7\u00f5es.</p>"},{"location":"features/#screen-flow_1","title":"Screen Flow","text":"<ol> <li>O colaborador acessa a tela de listagem de solicita\u00e7\u00f5es de feedback.</li> <li>O colaborador clica no bot\u00e3o \"Nova Solicita\u00e7\u00e3o\".</li> <li>O sistema exibe um formul\u00e1rio para criar a solicita\u00e7\u00e3o de feedback.</li> <li>O colaborador preenche no m\u00ednimo tr\u00eas perguntas personalizadas abertas.</li> <li> <p>O colaborador adiciona os poss\u00edveis avaliadores, inserindo nome e e-mail em uma lista din\u00e2mica.</p> </li> <li> <p>Se e-mail do avaliador for CI&amp;T o sistema n\u00e3o deve permitir adicionar, pois apenas avaliadores externos podem faz\u00ea-lo</p> </li> <li> <p>O colaborador clica no bot\u00e3o \"Salvar Solicita\u00e7\u00e3o\".</p> </li> <li>O sistema envia um email de notifica\u00e7\u00e3o ao PDM.</li> <li>O PDM acessa o sistema e visualiza a tela de listagem de feedbacks a aprovar.</li> <li>O PDM aprova ou rejeita a solicita\u00e7\u00e3o:</li> <li>Se aprovado, a solicita\u00e7\u00e3o n\u00e3o pode ser editada e um email \u00e9 enviado aos avaliadores.</li> <li>Se rejeitado, o PDM preenche um campo de texto com coment\u00e1rios e o colaborador pode editar as perguntas e enviar novamente para aprova\u00e7\u00e3o.</li> <li>Adicionar uma data de aprova\u00e7\u00e3o e a partir dessa data a solicita\u00e7\u00e3o tem 3 meses de validade para ser respondida</li> </ol>"},{"location":"features/#acceptance-criteria_1","title":"Acceptance Criteria","text":"<ul> <li>O sistema deve permitir a cria\u00e7\u00e3o de uma solicita\u00e7\u00e3o de feedback com no m\u00ednimo tr\u00eas perguntas personalizadas abertas.</li> <li>O sistema deve permitir a adi\u00e7\u00e3o din\u00e2mica de nome e email dos avaliadores.</li> <li>O sistema deve enviar um email de notifica\u00e7\u00e3o ao PDM ao salvar a solicita\u00e7\u00e3o.</li> <li>O sistema deve permitir que o PDM aprove ou rejeite solicita\u00e7\u00f5es de feedback.</li> <li>O sistema deve enviar um email aos avaliadores quando uma solicita\u00e7\u00e3o for aprovada.</li> <li>O sistema deve permitir que o colaborador edite a solicita\u00e7\u00e3o se a mesma for rejeitada pelo PDM.</li> <li>A interface do sistema deve ser acess\u00edvel para pessoas com defici\u00eancias visuais.</li> <li>O sistema deve ter um desempenho satisfat\u00f3rio, com tempo de resposta m\u00e1ximo de 2 segundos.</li> </ul>"},{"location":"features/#resposta-do-feedback-solicitado-aos-avaliadores-externos","title":"Resposta do Feedback solicitado aos avaliadores externos","text":"<p>COMO um colaborador que quer feedback</p> <p>EU QUERO solicitar respostas sobre minha performance</p> <p>PARA QUE eu possa melhorar e evoluir no trabalho</p>"},{"location":"features/#business-narrative_2","title":"Business Narrative","text":"<p>A funcionalidade deve permitir que colaboradores solicitem feedback anonimamente de clientes externos, garantindo que colaboradores internos n\u00e3o possam dar feedback.</p>"},{"location":"features/#screen-flow_2","title":"Screen Flow","text":"<ol> <li>A pessoa acessa o link fornecido para a pesquisa de feedback.</li> <li>O sistema apresenta uma tela pedindo nome e e-mail do avaliador</li> <li>O sistema verifica se o e-mail est\u00e1 entre os avaliadores escolhidos pelo colaborador, caso n\u00e3o esteja envia para uma tela de n\u00e3o permitido</li> <li>O sistema apresenta um formul\u00e1rio contendo todas as perguntas cadastradas pelo colaborador</li> <li>O usu\u00e1rio clica no bot\u00e3o \"Enviar\".</li> <li>O sistema exibe uma mensagem de confirma\u00e7\u00e3o: \"Obrigado pelo seu feedback!\"</li> </ol>"},{"location":"features/#acceptance-criteria_2","title":"Acceptance Criteria","text":"<ul> <li>O sistema deve permitir que apenas clientes externos indicados pelo colaborador forne\u00e7am feedback.</li> <li>O sistema deve armazenar o feedback associado ao colaborador que solicitou.</li> <li>O sistema deve exibir uma mensagem de confirma\u00e7\u00e3o ap\u00f3s o envio do feedback.</li> <li>Antes de ser respondido o question\u00e1rio o sistema deve validar se o mesmo se encontra dentro do per\u00edodo de validade de 3 meses a partir da data de aprova\u00e7\u00e3o do PDM</li> </ul>"},{"location":"features/#visualizacao-de-feedback","title":"Visualiza\u00e7\u00e3o de Feedback","text":"<p>COMO colaborador</p> <p>QUERO acessar uma tela dedicada no aplicativo para visualizar os feedbacks recebidos</p> <p>PARA QUE eu possa interpret\u00e1-los de forma organizada e f\u00e1cil.</p>"},{"location":"features/#business-narrative_3","title":"Business Narrative","text":"<p>Os colaboradores precisam de uma forma pr\u00e1tica e organizada para visualizar os feedbacks recebidos, facilitando a interpreta\u00e7\u00e3o e o uso dessas informa\u00e7\u00f5es para seu desenvolvimento.</p>"},{"location":"features/#screen-flow_3","title":"Screen Flow","text":"<ol> <li>O colaborador logado acessa o menu principal do aplicativo.</li> <li>Seleciona a op\u00e7\u00e3o \"Feedbacks Recebidos\".</li> <li>O sistema exibe uma tela com uma lista de feedbacks.</li> <li>O colaborador seleciona um feedback espec\u00edfico para visualizar os detalhes.</li> <li>O sistema exibe o feedback selecionado, com respostas apresentadas de forma an\u00f4nima.</li> <li>Se o usu\u00e1rio logado for um PDM, ele pode acessar uma se\u00e7\u00e3o adicional para visualizar os feedbacks recebidos por seus diretos.</li> <li>O PDM seleciona um feedback de um direto e o sistema exibe as respostas com a identifica\u00e7\u00e3o de quem respondeu.</li> </ol>"},{"location":"features/#acceptance-criteria_3","title":"Acceptance Criteria","text":"<ul> <li>O sistema deve permitir que o colaborador visualize feedbacks recebidos.</li> <li>Feedbacks para o colaborador logado devem ser exibidos de forma an\u00f4nima.</li> <li>Feedbacks dos diretos de um PDM devem exibir a identifica\u00e7\u00e3o de quem respondeu.</li> <li>O sistema deve exibir uma mensagem de erro em caso de falha na recupera\u00e7\u00e3o dos feedbacks.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/SOLID/","title":"Princ\u00edpios SOLID","text":"<p>Os princ\u00edpios SOLID s\u00e3o um conjunto de cinco diretrizes fundamentais que visam melhorar a qualidade e a manuten\u00e7\u00e3o do software, promovendo um design mais claro e compreens\u00edvel. A ado\u00e7\u00e3o desses princ\u00edpios ajuda os desenvolvedores a criar sistemas que s\u00e3o mais f\u00e1ceis de entender, alterar e expandir ao longo do tempo. Os princ\u00edpios incluem:</p> <ol> <li> <p>S - Princ\u00edpio da Responsabilidade \u00danica (SRP): Uma classe deve ter apenas uma raz\u00e3o para mudar. Isso significa que cada classe deve ser respons\u00e1vel por uma \u00fanica parte da funcionalidade do software. Ao seguir esse princ\u00edpio, voc\u00ea garante que as altera\u00e7\u00f5es em um aspecto espec\u00edfico do sistema n\u00e3o afetem outras partes, facilitando a manuten\u00e7\u00e3o e a evolu\u00e7\u00e3o do c\u00f3digo.</p> </li> <li> <p>O - Princ\u00edpio Aberto/Fechado (OCP): Entidades de software, como classes e m\u00f3dulos, devem ser abertas para extens\u00e3o, mas fechadas para modifica\u00e7\u00e3o. Isso implica que voc\u00ea deve ser capaz de adicionar novos comportamentos ao sistema sem alterar o c\u00f3digo existente. Isso pode ser alcan\u00e7ado por meio de estrat\u00e9gias como o uso de interfaces e heran\u00e7a, permitindo que novas funcionalidades sejam acrescentadas de forma segura e organizada.</p> </li> <li> <p>L - Princ\u00edpio da Substitui\u00e7\u00e3o de Liskov (LSP): Objetos de uma classe derivada devem poder substituir objetos da classe base sem alterar o comportamento esperado do sistema. Isso significa que, ao usar uma classe derivada, o sistema deve continuar a operar corretamente como se estivesse usando a classe base. Para respeitar esse princ\u00edpio, \u00e9 importante projetar hierarquias de classes de maneira que as subclasses mantenham a funcionalidade e os contratos definidos pela classe base.</p> </li> <li> <p>I - Princ\u00edpio da Segrega\u00e7\u00e3o de Interface (ISP): Uma classe n\u00e3o deve ser for\u00e7ada a implementar interfaces que n\u00e3o utiliza. Isso sugere que \u00e9 melhor ter v\u00e1rias interfaces espec\u00edficas, ao inv\u00e9s de uma \u00fanica interface abrangente. Com isso, as classes podem implementar apenas as interfaces que realmente necessitam, evitando a implementa\u00e7\u00e3o de m\u00e9todos desnecess\u00e1rios e promovendo um design mais coeso e menos acoplado.</p> </li> <li> <p>D - Princ\u00edpio da Invers\u00e3o de Depend\u00eancia (DIP): Este princ\u00edpio estabelece que as classes devem depender de abstra\u00e7\u00f5es, e n\u00e3o de classes concretas. Isso promove a flexibilidade e a testabilidade do c\u00f3digo, pois as implementa\u00e7\u00f5es espec\u00edficas podem ser alteradas ou substitu\u00eddas sem afetar o restante do sistema. A inje\u00e7\u00e3o de depend\u00eancia \u00e9 uma t\u00e9cnica comum para facilitar a aplica\u00e7\u00e3o desse princ\u00edpio, permitindo que componentes de software sejam desacoplados e gerenciados de maneira mais eficaz.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/SOLID/#aplicacao-dos-principios-solid-no-spring-boot","title":"Aplica\u00e7\u00e3o dos Princ\u00edpios SOLID no Spring Boot","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/SOLID/#1-single-responsibility-principle-srp","title":"1. Single Responsibility Principle (SRP)","text":"<p>Defini\u00e7\u00e3o: Uma classe deve ter apenas uma raz\u00e3o para mudar. Isso significa que uma classe deve ter uma \u00fanica responsabilidade ou fun\u00e7\u00e3o.</p> <p>Exemplo:</p> <pre><code>// Classe de Servi\u00e7o de Pedido - Respons\u00e1vel apenas por l\u00f3gica de pedidos\n@Service\npublic class OrderService {\n    @Autowired\n    private OrderRepository orderRepository;\n\n    public void placeOrder(Order order) {\n        // l\u00f3gica de neg\u00f3cio para realizar um pedido\n        orderRepository.save(order);\n    }\n}\n\n// Classe de Servi\u00e7o de Notifica\u00e7\u00e3o - Respons\u00e1vel apenas por l\u00f3gica de notifica\u00e7\u00e3o\n@Service\npublic class NotificationService {\n    public void sendOrderConfirmation(Order order) {\n        // l\u00f3gica para enviar confirma\u00e7\u00e3o de pedido\n        System.out.println(\"Confirma\u00e7\u00e3o de pedido enviada para: \" + order.getCustomer().getEmail());\n    }\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/SOLID/#2-openclosed-principle-ocp","title":"2. Open/Closed Principle (OCP)","text":"<p>Defini\u00e7\u00e3o: Entidades de software devem ser abertas para extens\u00e3o, mas fechadas para modifica\u00e7\u00e3o. Isso pode ser alcan\u00e7ado por meio de interfaces e heran\u00e7a.</p> <p>Exemplo:</p> <pre><code>// Interface de Pagamento\npublic interface PaymentMethod {\n    void pay(double amount);\n}\n\n// Implementa\u00e7\u00e3o de Pagamento por Cart\u00e3o\n@Component\npublic class CreditCardPayment implements PaymentMethod {\n    @Override\n    public void pay(double amount) {\n        System.out.println(\"Pagando \" + amount + \" com cart\u00e3o de cr\u00e9dito.\");\n    }\n}\n\n// Implementa\u00e7\u00e3o de Pagamento por PayPal\n@Component\npublic class PayPalPayment implements PaymentMethod {\n    @Override\n    public void pay(double amount) {\n        System.out.println(\"Pagando \" + amount + \" com PayPal.\");\n    }\n}\n\n// Classe de Servi\u00e7o de Pagamento\n@Service\npublic class PaymentService {\n    @Autowired\n    private List&lt;PaymentMethod&gt; paymentMethods; // Inje\u00e7\u00e3o de todas as implementa\u00e7\u00f5es\n\n    public void processPayment(PaymentMethod paymentMethod, double amount) {\n        paymentMethod.pay(amount); // Chama o m\u00e9todo apropriado\n    }\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/SOLID/#3-liskov-substitution-principle-lsp","title":"3. Liskov Substitution Principle (LSP)","text":"<p>Defini\u00e7\u00e3o: Objetos de uma classe derivada devem poder substituir objetos da classe base sem alterar o comportamento desejado.</p> <p>Exemplo:</p> <pre><code>// Classe Base de Notifica\u00e7\u00e3o\npublic abstract class Notification {\n    public abstract void notifyUser(Order order);\n}\n\n// Notifica\u00e7\u00e3o por Email\n@Component\npublic class EmailNotification extends Notification {\n    @Override\n    public void notifyUser(Order order) {\n        System.out.println(\"Enviando email para: \" + order.getCustomer().getEmail());\n    }\n}\n\n// Notifica\u00e7\u00e3o por SMS\n@Component\npublic class SMSNotification extends Notification {\n    @Override\n    public void notifyUser(Order order) {\n        System.out.println(\"Enviando SMS para: \" + order.getCustomer().getPhoneNumber());\n    }\n}\n\n// Servi\u00e7o de Notifica\u00e7\u00e3o\n@Service\npublic class NotificationService {\n    @Autowired\n    private List&lt;Notification&gt; notifications;\n\n    public void notifyAll(Order order) {\n        for (Notification notification : notifications) {\n            notification.notifyUser(order);\n        }\n    }\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/SOLID/#4-interface-segregation-principle-isp","title":"4. Interface Segregation Principle (ISP)","text":"<p>Defini\u00e7\u00e3o: Uma classe n\u00e3o deve ser for\u00e7ada a implementar interfaces que n\u00e3o usa. Isso significa que \u00e9 melhor ter v\u00e1rias interfaces espec\u00edficas em vez de uma interface \u00fanica e grande.</p> <p>Exemplo:</p> <pre><code>// Interface de Notifica\u00e7\u00e3o\npublic interface Notifiable {\n    void notifyUser(Order order);\n}\n\n// Interface de Pagamento\npublic interface Payable {\n    void pay(double amount);\n}\n\n// Implementa\u00e7\u00e3o de Notifica\u00e7\u00e3o\n@Component\npublic class EmailNotification implements Notifiable {\n    @Override\n    public void notifyUser(Order order) {\n        System.out.println(\"Enviando email para: \" + order.getCustomer().getEmail());\n    }\n}\n\n// Implementa\u00e7\u00e3o de Pagamento\n@Component\npublic class CreditCardPayment implements Payable {\n    @Override\n    public void pay(double amount) {\n        System.out.println(\"Pagando \" + amount + \" com cart\u00e3o de cr\u00e9dito.\");\n    }\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/SOLID/#5-dependency-inversion-principle-dip","title":"5. Dependency Inversion Principle (DIP)","text":"<p>Defini\u00e7\u00e3o: Dependa de abstra\u00e7\u00f5es, n\u00e3o de classes concretas. Isso significa que as classes de alto n\u00edvel n\u00e3o devem depender de classes de baixo n\u00edvel, mas sim de abstra\u00e7\u00f5es.</p> <p>Exemplo:</p> <pre><code>// Interface de Reposit\u00f3rio\npublic interface OrderRepository {\n    void save(Order order);\n}\n\n// Implementa\u00e7\u00e3o de Reposit\u00f3rio em Mem\u00f3ria\n@Repository\npublic class InMemoryOrderRepository implements OrderRepository {\n    private List&lt;Order&gt; orders = new ArrayList&lt;&gt;();\n\n    @Override\n    public void save(Order order) {\n        orders.add(order);\n        System.out.println(\"Pedido salvo na mem\u00f3ria: \" + order);\n    }\n}\n\n// Implementa\u00e7\u00e3o do Servi\u00e7o\n@Service\npublic class OrderService {\n    private final OrderRepository orderRepository;\n\n    // Inje\u00e7\u00e3o de Depend\u00eancia atrav\u00e9s do construtor\n    @Autowired\n    public OrderService(OrderRepository orderRepository) {\n        this.orderRepository = orderRepository;\n    }\n\n    public void placeOrder(Order order) {\n        orderRepository.save(order);\n    }\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/microservices/","title":"Microservices: Abordagem no Projeto","text":"<p>Microservices s\u00e3o uma abordagem arquitet\u00f4nica que estrutura uma aplica\u00e7\u00e3o como um conjunto de pequenos servi\u00e7os independentes, cada um executando uma fun\u00e7\u00e3o espec\u00edfica dentro do sistema. Esses servi\u00e7os podem ser desenvolvidos, implantados e escalados de forma independente, promovendo agilidade e flexibilidade no desenvolvimento de software.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/microservices/#decomposicao-em-microservices","title":"Decomposi\u00e7\u00e3o em Microservices","text":"<p>Um dos aspectos-chave da arquitetura de microservices \u00e9 a decomposi\u00e7\u00e3o do sistema em servi\u00e7os menores, que s\u00e3o organizados em torno de contextos delimitados (ou bounded contexts). Esta abordagem \u00e9 inspirada nos princ\u00edpios da Domain-Driven Design (DDD) e permite que cada microservice represente um subdom\u00ednio espec\u00edfico da aplica\u00e7\u00e3o.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/microservices/#contexto-delimitado","title":"Contexto Delimitado","text":"<ul> <li>Defini\u00e7\u00e3o: Um contexto delimitado define os limites dentro dos quais um modelo de dom\u00ednio \u00e9 aplicado. Isso significa que cada microservice tem sua pr\u00f3pria l\u00f3gica de neg\u00f3cios e modelo de dados, que n\u00e3o interfere com outros servi\u00e7os.</li> <li>Benef\u00edcios:</li> <li>Isolamento: Altera\u00e7\u00f5es em um servi\u00e7o n\u00e3o afetam diretamente outros servi\u00e7os.</li> <li>Clareza: Cada equipe pode se concentrar em um subdom\u00ednio espec\u00edfico, facilitando a compreens\u00e3o e o desenvolvimento.</li> <li>Escalabilidade: Servi\u00e7os podem ser escalados de acordo com a demanda do seu subdom\u00ednio espec\u00edfico.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/microservices/#api-gateway","title":"API Gateway","text":"<p>Para gerenciar a comunica\u00e7\u00e3o entre microservices, muitas vezes \u00e9 utilizado um API Gateway. Este padr\u00e3o atua como um ponto de entrada \u00fanico para todas as requisi\u00e7\u00f5es externas, que redireciona as chamadas para os servi\u00e7os apropriados. </p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/microservices/#vantagens-do-api-gateway","title":"Vantagens do API Gateway:","text":"<ul> <li>Abstra\u00e7\u00e3o: Esconde a complexidade da comunica\u00e7\u00e3o entre os servi\u00e7os.</li> <li>Seguran\u00e7a: Pode implementar autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o centralizadas.</li> <li>Monitoramento: Facilita o rastreamento e a an\u00e1lise de desempenho das requisi\u00e7\u00f5es.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/microservices/#uso-de-uma-base-de-dados-comum","title":"Uso de uma Base de Dados Comum","text":"<p>Embora cada microservice deva idealmente ter sua pr\u00f3pria base de dados para garantir o isolamento de dados, pode haver justificativas para o uso de uma base de dados compartilhada:</p> <ul> <li>Simplicidade: Para sistemas menores ou em fases iniciais, o uso de uma \u00fanica base de dados pode simplificar a arquitetura e reduzir a complexidade.</li> <li>Evitar Mensageria: A utiliza\u00e7\u00e3o de uma base de dados comum pode eliminar a necessidade de um sistema de mensageria para sincronizar dados entre servi\u00e7os, o que pode ser vantajoso em termos de desempenho e redu\u00e7\u00e3o de lat\u00eancia nas opera\u00e7\u00f5es.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/microservices/#consideracoes","title":"Considera\u00e7\u00f5es:","text":"<p>Enquanto essa abordagem pode ser vantajosa em cen\u00e1rios espec\u00edficos, \u00e9 importante ser cauteloso, pois a depend\u00eancia de uma base de dados comum pode levar \u00e0 introdu\u00e7\u00e3o de acoplamento entre microservices, o que contradiz um dos princ\u00edpios fundamentais da arquitetura de microservices.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/microservices/#conclusao","title":"Conclus\u00e3o","text":"<p>A arquitetura de microservices, com a decomposi\u00e7\u00e3o baseada em contextos delimitados e o uso de um API Gateway, pode trazer muitos benef\u00edcios em termos de flexibilidade e escalabilidade. No entanto, a decis\u00e3o de compartilhar uma base de dados deve ser cuidadosamente avaliada, considerando as trade-offs entre simplicidade e acoplamento.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/monorepo/","title":"Monorepo","text":"<p>Um monorepo (abrevia\u00e7\u00e3o de \"monolithic repository\") \u00e9 uma abordagem de gerenciamento de c\u00f3digo-fonte onde m\u00faltiplos projetos ou m\u00f3dulos s\u00e3o armazenados em um \u00fanico reposit\u00f3rio de controle de vers\u00e3o. Em vez de ter reposit\u00f3rios separados para cada projeto ou microservi\u00e7o, todos os c\u00f3digos s\u00e3o mantidos juntos em um \u00fanico reposit\u00f3rio.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/monorepo/#vantagens-do-monorepo","title":"Vantagens do Monorepo","text":"<ol> <li> <p>Gerenciamento Simplificado: Ter todos os projetos em um \u00fanico local facilita o gerenciamento de depend\u00eancias e vers\u00f5es.</p> </li> <li> <p>Consist\u00eancia: A utiliza\u00e7\u00e3o de vers\u00f5es consistentes de bibliotecas e servi\u00e7os \u00e9 mais f\u00e1cil, j\u00e1 que tudo \u00e9 controlado a partir de um \u00fanico reposit\u00f3rio.</p> </li> <li> <p>Colabora\u00e7\u00e3o Facilmente: A colabora\u00e7\u00e3o entre equipes \u00e9 facilitada, pois todos os desenvolvedores t\u00eam acesso ao mesmo reposit\u00f3rio e podem ver as altera\u00e7\u00f5es em tempo real.</p> </li> <li> <p>Refatora\u00e7\u00e3o Simples: Refatora\u00e7\u00f5es que afetam m\u00faltiplos projetos podem ser feitas de forma mais segura e simples, pois todos os m\u00f3dulos est\u00e3o no mesmo reposit\u00f3rio.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/monorepo/#como-o-monorepo-e-aplicado-com-maven","title":"Como o Monorepo \u00e9 Aplicado com Maven","text":"<p>O Maven \u00e9 uma ferramenta de automa\u00e7\u00e3o de constru\u00e7\u00e3o e gerenciamento de projetos em Java que pode ser usada eficientemente em um monorepo. Com o Maven, voc\u00ea pode gerenciar depend\u00eancias, construir e testar m\u00faltiplos m\u00f3dulos que est\u00e3o interligados, como bibliotecas e microservi\u00e7os.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/monorepo/#estrutura-do-monorepo","title":"Estrutura do Monorepo","text":"<p>Para a estrutura mencionada:</p> <pre><code>java_backend/\n\u251c\u2500\u2500 libs/               # Bibliotecas comuns\n\u2502   \u2514\u2500\u2500 AuthGuard/     # Biblioteca de autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o\n\u2502       \u2514\u2500\u2500 pom.xml\n\u2514\u2500\u2500 microservices/      # Microservi\u00e7os\n    \u251c\u2500\u2500 usermanagement/  # Microservi\u00e7o de gerenciamento de usu\u00e1rios\n    \u2502   \u2514\u2500\u2500 pom.xml\n    \u251c\u2500\u2500 feedbackrequest/  # Microservi\u00e7o de solicita\u00e7\u00e3o de feedback\n    \u2502   \u2514\u2500\u2500 pom.xml\n    \u2514\u2500\u2500 feedbackresponse/ # Microservi\u00e7o de resposta ao feedback\n        \u2514\u2500\u2500 pom.xml\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/monorepo/#configuracao-do-pom","title":"Configura\u00e7\u00e3o do POM","text":"<p>Para gerenciar o monorepo com o Maven, um projeto pai (<code>pom.xml</code>) \u00e9 criado no n\u00edvel superior da estrutura, que cont\u00e9m as defini\u00e7\u00f5es comuns e as configura\u00e7\u00f5es de gerenciamento para os subm\u00f3dulos.</p> <p>Exemplo de <code>pom.xml</code> do projeto pai (java_backend/pom.xml):</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;java_backend&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;pom&lt;/packaging&gt;\n\n    &lt;modules&gt;\n        &lt;module&gt;libs/AuthGuard&lt;/module&gt;\n        &lt;module&gt;microservices/usermanagement&lt;/module&gt;\n        &lt;module&gt;microservices/feedbackrequest&lt;/module&gt;\n        &lt;module&gt;microservices/feedbackresponse&lt;/module&gt;\n    &lt;/modules&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;!-- Depend\u00eancia comum a todos os microservi\u00e7os --&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n                &lt;version&gt;2.5.4&lt;/version&gt;\n            &lt;/dependency&gt;\n            &lt;!-- Adicione outras depend\u00eancias comuns aqui --&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/monorepo/#pom-dos-modulos","title":"POM dos M\u00f3dulos","text":"<p>Os m\u00f3dulos (libs e microservi\u00e7os) devem referenciar o projeto pai em seus pr\u00f3prios arquivos <code>pom.xml</code>.</p> <p>Exemplo de <code>pom.xml</code> da biblioteca AuthGuard (java_backend/libs/AuthGuard/pom.xml):</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;com.example&lt;/groupId&gt;\n        &lt;artifactId&gt;java_backend&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/parent&gt;\n\n    &lt;artifactId&gt;AuthGuard&lt;/artifactId&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Depend\u00eancias espec\u00edficas para AuthGuard --&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre> <p>Exemplo de <code>pom.xml</code> do microservi\u00e7o usermanagement (java_backend/microservices/usermanagement/pom.xml):</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;com.example&lt;/groupId&gt;\n        &lt;artifactId&gt;java_backend&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/parent&gt;\n\n    &lt;artifactId&gt;usermanagement&lt;/artifactId&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.example&lt;/groupId&gt;\n            &lt;artifactId&gt;AuthGuard&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Outras depend\u00eancias espec\u00edficas do microservi\u00e7o --&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/monorepo/#gerenciamento-do-monorepo","title":"Gerenciamento do Monorepo","text":"<ol> <li>Constru\u00e7\u00e3o e Testes: Voc\u00ea pode construir e testar todos os m\u00f3dulos de uma s\u00f3 vez executando o comando Maven no diret\u00f3rio raiz:</li> </ol> <p><code>bash    mvn clean install</code></p> <p>Isso compilar\u00e1 todas as bibliotecas e microservi\u00e7os na ordem correta, respeitando as depend\u00eancias.</p> <ol> <li> <p>Adi\u00e7\u00e3o de Novos M\u00f3dulos: Para adicionar novos microservi\u00e7os ou bibliotecas, basta criar um novo diret\u00f3rio e adicionar o m\u00f3dulo correspondente ao POM do projeto pai.</p> </li> <li> <p>Refatora\u00e7\u00f5es: Como todos os projetos est\u00e3o no mesmo reposit\u00f3rio, as refatora\u00e7\u00f5es que afetam m\u00faltiplos servi\u00e7os ou bibliotecas podem ser realizadas de forma mais segura e coordenada.</p> </li> <li> <p>Versionamento: O versionamento pode ser gerenciado de forma centralizada, garantindo que todos os servi\u00e7os e bibliotecas estejam usando as mesmas vers\u00f5es de depend\u00eancias.</p> </li> <li> <p>Gerenciamento de Depend\u00eancias: O uso de <code>dependencyManagement</code> no POM pai ajuda a definir vers\u00f5es de depend\u00eancias em um \u00fanico local, evitando conflitos e tornando mais f\u00e1cil a atualiza\u00e7\u00e3o de vers\u00f5es.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/monorepo/#conclusao","title":"Conclus\u00e3o","text":"<p>Um monorepo pode simplificar significativamente o gerenciamento de projetos que possuem m\u00faltiplos m\u00f3dulos, como bibliotecas e microservi\u00e7os. Com o Maven, voc\u00ea pode facilmente gerenciar depend\u00eancias, construir e testar m\u00faltiplos m\u00f3dulos que est\u00e3o interligados. Essa abordagem \u00e9 especialmente \u00fatil em ambientes de desenvolvimento \u00e1gil e em equipes que lidam com um grande n\u00famero de servi\u00e7os interdependentes.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/","title":"O que \u00e9 DDD - Domain Driven Design","text":"<p>Domain-Driven Design (Design Orientado ao Dom\u00ednio) \u00e9 um conjunto de princ\u00edpios e pr\u00e1ticas para desenvolver software de forma que ele reflita bem o mundo real do problema que est\u00e1 tentando resolver. \u00c9 uma maneira de melhorar a comunica\u00e7\u00e3o entre desenvolvedores e pessoas que entendem o neg\u00f3cio, para que o software seja mais \u00fatil e f\u00e1cil de entender.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#o-que-e-dominio","title":"O que \u00e9 \"Dom\u00ednio\"?","text":"<p>Dom\u00ednio se refere \u00e0 \u00e1rea espec\u00edfica de conhecimento ou atividade sobre a qual voc\u00ea est\u00e1 construindo o software. Por exemplo, se voc\u00ea est\u00e1 criando um sistema para uma biblioteca, o dom\u00ednio seria tudo relacionado a bibliotecas: livros, empr\u00e9stimos, leitores, etc.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#exemplos-de-dominios","title":"Exemplos de Dom\u00ednios:","text":"<ol> <li>Biblioteca: Livros, leitores, empr\u00e9stimos, devolu\u00e7\u00f5es.</li> <li>E-commerce: Produtos, clientes, pedidos, pagamentos.</li> <li>Sa\u00fade: Pacientes, m\u00e9dicos, tratamentos, consultas.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#por-que-o-dominio-e-importante","title":"Por que o Dom\u00ednio \u00e9 Importante?","text":"<ol> <li>Entendimento: Conhecer bem o dom\u00ednio ajuda a criar um software que realmente atende \u00e0s necessidades dos usu\u00e1rios.</li> <li>Comunica\u00e7\u00e3o: Facilita a conversa entre desenvolvedores e especialistas do neg\u00f3cio, pois todos usam a mesma linguagem.</li> <li>Modelagem: Permite que voc\u00ea crie modelos que representam a realidade do dom\u00ednio, ajudando a estruturar o software de maneira l\u00f3gica.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#componentes-do-dominio","title":"Componentes do Dom\u00ednio","text":"<ol> <li> <p>Entidades: S\u00e3o objetos que t\u00eam uma identidade pr\u00f3pria. Por exemplo, um livro ou um leitor em uma biblioteca.</p> </li> <li> <p>Value Objects: Objetos que n\u00e3o t\u00eam identidade pr\u00f3pria, mas t\u00eam atributos que definem seu valor. Por exemplo, uma data ou um endere\u00e7o.</p> </li> <li> <p>Agregados: Um grupo de entidades e Value Objects que s\u00e3o tratados como uma \u00fanica unidade. Por exemplo, um pedido em um e-commerce pode incluir v\u00e1rios itens.</p> </li> <li> <p>Reposit\u00f3rios: S\u00e3o respons\u00e1veis por recuperar e armazenar entidades e agregados.</p> </li> <li> <p>Servi\u00e7os: L\u00f3gica de neg\u00f3cio que n\u00e3o se encaixa em entidades ou Value Objects. Por exemplo, um servi\u00e7o que calcula o valor total de um pedido.</p> </li> </ol> <p>Claro! Vamos explicar o que s\u00e3o building blocks (ou \"blocos de constru\u00e7\u00e3o\") de forma simples.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#o-que-sao-building-blocks","title":"O que s\u00e3o Building Blocks?","text":"<p>Building blocks s\u00e3o componentes fundamentais que ajudam a construir um sistema de software. Pense neles como pe\u00e7as de LEGO. Cada pe\u00e7a tem uma fun\u00e7\u00e3o espec\u00edfica e, quando unidas, elas formam algo maior e mais complexo.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#por-que-sao-importantes","title":"Por que s\u00e3o Importantes?","text":"<ol> <li> <p>Estrutura: Os building blocks fornecem uma estrutura que facilita a organiza\u00e7\u00e3o do c\u00f3digo. Isso torna mais f\u00e1cil entender como o sistema funciona.</p> </li> <li> <p>Reutiliza\u00e7\u00e3o: Voc\u00ea pode usar esses blocos em diferentes partes do seu sistema ou at\u00e9 mesmo em outros projetos. Isso economiza tempo e esfor\u00e7o.</p> </li> <li> <p>Colabora\u00e7\u00e3o: Quando todos usam os mesmos building blocks, fica mais f\u00e1cil para os desenvolvedores trabalharem juntos, pois eles t\u00eam uma compreens\u00e3o comum do que cada bloco faz.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#principais-building-blocks","title":"Principais Building Blocks","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#entidades","title":"Entidades","text":"<p>No contexto do Domain-Driven Design (DDD), Entidades s\u00e3o objetos que possuem uma identidade \u00fanica e podem mudar ao longo do tempo. Elas s\u00e3o fundamentais na modelagem do dom\u00ednio, pois representam objetos do mundo real que t\u00eam significado dentro do contexto do problema que estamos resolvendo.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#principais-caracteristicas-das-entidades","title":"Principais Caracter\u00edsticas das Entidades","text":"<ol> <li>Identidade \u00danica:</li> <li>Cada Entidade possui uma identidade distinta que a torna \u00fanica, mesmo que seus atributos (caracter\u00edsticas) mudem ao longo do tempo.</li> <li>Essa identidade \u00e9 geralmente representada por um identificador, como um n\u00famero de ID ou um c\u00f3digo.</li> </ol> <p>Exemplo: Em um sistema de biblioteca, cada livro pode ter um ID \u00fanico, como \"Livro123\", que o distingue de outros livros, mesmo que dois livros tenham o mesmo t\u00edtulo.</p> <ol> <li>Mudan\u00e7a de Estado:</li> <li>As Entidades podem ter seu estado alterado ao longo do tempo. Isso significa que suas propriedades e caracter\u00edsticas podem mudar conforme as opera\u00e7\u00f5es s\u00e3o realizadas.</li> </ol> <p>Exemplo: Um cliente pode ter seu endere\u00e7o atualizado. A identidade do cliente permanece a mesma, mas suas informa\u00e7\u00f5es mudam.</p> <ol> <li>Comportamento:</li> <li>Al\u00e9m de ter atributos, as Entidades tamb\u00e9m podem ter comportamentos, ou seja, m\u00e9todos que definem a\u00e7\u00f5es que podem ser realizadas sobre elas.</li> </ol> <p>Exemplo: Um objeto \"Cliente\" pode ter um m\u00e9todo chamado <code>comprarProduto()</code>, que define como o cliente realiza uma compra.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#exemplo-de-entidade","title":"Exemplo de Entidade","text":"<p>Vamos usar um exemplo simples para ilustrar uma Entidade:</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#entidade-cliente","title":"Entidade: Cliente","text":"<ul> <li>Identidade: ID do Cliente (por exemplo, \"Cliente001\")</li> <li>Atributos:</li> <li>Nome</li> <li>Endere\u00e7o</li> <li>Email</li> <li>Comportamentos:</li> <li><code>atualizarEndereco(novoEndereco)</code>: M\u00e9todo que permite ao cliente atualizar seu endere\u00e7o.</li> <li><code>realizarCompra(produto)</code>: M\u00e9todo que permite ao cliente realizar uma compra.</li> </ul> <pre><code>class Cliente:\n    def __init__(self, id, nome, endereco, email):\n        self.id = id          # Identidade \u00fanica\n        self.nome = nome\n        self.endereco = endereco\n        self.email = email\n\n    def atualizarEndereco(self, novoEndereco):\n        self.endereco = novoEndereco  # Mudan\u00e7a de estado\n\n    def realizarCompra(self, produto):\n        # L\u00f3gica para realizar uma compra\n        pass\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#vantagens-de-usar-entidades","title":"Vantagens de Usar Entidades","text":"<ol> <li> <p>Modelo Rico: As Entidades permitem que voc\u00ea crie um modelo rico e expressivo que reflete o dom\u00ednio do problema.</p> </li> <li> <p>Isolamento de L\u00f3gica: Ao encapsular dados e comportamentos dentro das Entidades, voc\u00ea mant\u00e9m a l\u00f3gica de neg\u00f3cio pr\u00f3xima aos dados que ela manipula.</p> </li> <li> <p>Facilidade de Manuten\u00e7\u00e3o: Com as Entidades bem definidas, \u00e9 mais f\u00e1cil entender, testar e manter o c\u00f3digo, al\u00e9m de facilitar a comunica\u00e7\u00e3o entre a equipe de desenvolvimento e as partes interessadas.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#repository","title":"Repository","text":"<p>No contexto do Domain-Driven Design (DDD), um Reposit\u00f3rio \u00e9 um padr\u00e3o que encapsula a l\u00f3gica necess\u00e1ria para acessar os dados armazenados. Em outras palavras, um reposit\u00f3rio atua como uma cole\u00e7\u00e3o de objetos de dom\u00ednio, permitindo que voc\u00ea adicione, remova e recupere entidades sem se preocupar com os detalhes de como esses dados s\u00e3o armazenados ou recuperados.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#principais-caracteristicas-do-repositorio","title":"Principais Caracter\u00edsticas do Reposit\u00f3rio","text":"<ol> <li>Abstra\u00e7\u00e3o do Armazenamento:</li> <li> <p>O reposit\u00f3rio oculta os detalhes da persist\u00eancia dos dados, como bancos de dados, arquivos ou servi\u00e7os externos. Isso permite que voc\u00ea trabalhe com objetos de dom\u00ednio sem se preocupar com como eles s\u00e3o armazenados.</p> </li> <li> <p>Interface Clara:</p> </li> <li> <p>Um reposit\u00f3rio fornece uma interface clara para realizar opera\u00e7\u00f5es comuns, como adicionar, remover e buscar entidades. Isso promove uma separa\u00e7\u00e3o de preocupa\u00e7\u00f5es e facilita a manuten\u00e7\u00e3o e o teste do c\u00f3digo.</p> </li> <li> <p>Foco em Objetos de Dom\u00ednio:</p> </li> <li>O reposit\u00f3rio lida exclusivamente com objetos de dom\u00ednio, como entidades e agregados. Ele n\u00e3o deve conter l\u00f3gica de neg\u00f3cio; essa l\u00f3gica deve permanecer nas entidades ou servi\u00e7os.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#exemplo-de-repositorio","title":"Exemplo de Reposit\u00f3rio","text":"<p>Vamos usar um exemplo para ilustrar como um reposit\u00f3rio funciona em um sistema simples, como uma biblioteca.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#repositorio-livrorepository","title":"Reposit\u00f3rio: LivroRepository","text":"<pre><code>class Livro:\n    def __init__(self, id, titulo, autor):\n        self.id = id\n        self.titulo = titulo\n        self.autor = autor\n\nclass LivroRepository:\n    def __init__(self):\n        self.livros = []  # Simulando um armazenamento em mem\u00f3ria\n\n    def adicionar(self, livro):\n        self.livros.append(livro)  # Adiciona um livro ao reposit\u00f3rio\n\n    def remover(self, livro):\n        self.livros.remove(livro)  # Remove um livro do reposit\u00f3rio\n\n    def buscar_por_id(self, id):\n        for livro in self.livros:\n            if livro.id == id:\n                return livro  # Retorna o livro com o ID especificado\n        return None  # Se n\u00e3o encontrado\n\n    def listar_todos(self):\n        return self.livros  # Retorna todos os livros\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#operacoes-comuns-em-repositorios","title":"Opera\u00e7\u00f5es Comuns em Reposit\u00f3rios","text":"<ol> <li>Adicionar: M\u00e9todo para adicionar uma nova entidade ao reposit\u00f3rio.</li> <li>Remover: M\u00e9todo para remover uma entidade existente do reposit\u00f3rio.</li> <li>Buscar: M\u00e9todos para recuperar entidades com base em crit\u00e9rios espec\u00edficos (por exemplo, por ID ou por atributos).</li> <li>Listar: M\u00e9todo para listar todas as entidades armazenadas no reposit\u00f3rio.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#vantagens-de-usar-repositorios","title":"Vantagens de Usar Reposit\u00f3rios","text":"<ol> <li> <p>Separa\u00e7\u00e3o de Preocupa\u00e7\u00f5es: Ao separar a l\u00f3gica de acesso a dados da l\u00f3gica de neg\u00f3cio, voc\u00ea torna o sistema mais modular e f\u00e1cil de manter.</p> </li> <li> <p>Facilidade de Testes: Os reposit\u00f3rios podem ser facilmente simulados (mocked) em testes, permitindo que voc\u00ea teste a l\u00f3gica de neg\u00f3cios sem depender de um banco de dados real.</p> </li> <li> <p>Flexibilidade: Se voc\u00ea decidir mudar a forma como os dados s\u00e3o armazenados (por exemplo, mudar de um banco de dados SQL para um NoSQL), voc\u00ea pode fazer isso alterando apenas o reposit\u00f3rio, sem afetar o restante do c\u00f3digo.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#service","title":"Service","text":"<p>No contexto do Domain-Driven Design (DDD), um Servi\u00e7o \u00e9 uma classe ou um componente que encapsula l\u00f3gica de neg\u00f3cio que n\u00e3o se encaixa bem em uma \u00fanica Entidade ou Value Object. Os servi\u00e7os podem ser utilizados para realizar opera\u00e7\u00f5es mais complexas que envolvem m\u00faltiplas entidades ou que n\u00e3o pertencem diretamente a uma entidade espec\u00edfica.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#principais-caracteristicas-do-servico","title":"Principais Caracter\u00edsticas do Servi\u00e7o","text":"<ol> <li>L\u00f3gica de Neg\u00f3cio:</li> <li> <p>Os servi\u00e7os cont\u00eam regras de neg\u00f3cio e opera\u00e7\u00f5es que s\u00e3o relevantes para o dom\u00ednio, mas que n\u00e3o s\u00e3o diretamente representadas por uma entidade.</p> </li> <li> <p>Sem Estado Persistente:</p> </li> <li> <p>Diferente das entidades, os servi\u00e7os geralmente n\u00e3o mant\u00eam estado. Eles podem ser considerados \"semelhantes a fun\u00e7\u00f5es\" que realizam tarefas e retornam resultados.</p> </li> <li> <p>Intera\u00e7\u00e3o entre Entidades:</p> </li> <li>Servi\u00e7os podem coordenar opera\u00e7\u00f5es que envolvem m\u00faltiplas entidades, facilitando a intera\u00e7\u00e3o entre elas.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#tipos-de-servicos","title":"Tipos de Servi\u00e7os","text":"<ol> <li>Servi\u00e7os de Dom\u00ednio: </li> <li> <p>Cont\u00eam l\u00f3gica de neg\u00f3cio espec\u00edfica do dom\u00ednio e podem operar sobre entidades e Value Objects. Geralmente, eles s\u00e3o usados para encapsular opera\u00e7\u00f5es que envolvem regras de neg\u00f3cio complexas.</p> </li> <li> <p>Servi\u00e7os de Aplica\u00e7\u00e3o:</p> </li> <li>Gerenciam a l\u00f3gica de aplica\u00e7\u00e3o e orquestram o fluxo de dados entre a interface do usu\u00e1rio, servi\u00e7os de dom\u00ednio e reposit\u00f3rios. Eles s\u00e3o respons\u00e1veis por opera\u00e7\u00f5es que n\u00e3o fazem parte diretamente do modelo de dom\u00ednio, mas que s\u00e3o necess\u00e1rias para a aplica\u00e7\u00e3o.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#exemplo-de-servico","title":"Exemplo de Servi\u00e7o","text":"<p>Vamos usar um exemplo simples para ilustrar como um servi\u00e7o funciona em um sistema de e-commerce.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#servico-pedidoservice","title":"Servi\u00e7o: PedidoService","text":"<pre><code>class Produto:\n    def __init__(self, id, nome, preco):\n        self.id = id\n        self.nome = nome\n        self.preco = preco\n\nclass Pedido:\n    def __init__(self, cliente_id):\n        self.cliente_id = cliente_id\n        self.itens = []\n\n    def adicionar_item(self, produto):\n        self.itens.append(produto)  # Adiciona um produto ao pedido\n\nclass PedidoService:\n    def __init__(self, pedido_repository):\n        self.pedido_repository = pedido_repository\n\n    def criar_pedido(self, cliente_id, produtos):\n        pedido = Pedido(cliente_id)\n        for produto in produtos:\n            pedido.adicionar_item(produto)  # Adiciona produtos ao pedido\n        self.pedido_repository.adicionar(pedido)  # Salva o pedido no reposit\u00f3rio\n        return pedido\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#operacoes-comuns-em-servicos","title":"Opera\u00e7\u00f5es Comuns em Servi\u00e7os","text":"<ol> <li>Criar: M\u00e9todos para criar novas entidades ou agregados, muitas vezes utilizando reposit\u00f3rios.</li> <li>Atualizar: M\u00e9todos para atualizar o estado de entidades, podendo envolver l\u00f3gica de valida\u00e7\u00e3o.</li> <li>Executar Processos de Neg\u00f3cio: M\u00e9todos que realizam opera\u00e7\u00f5es complexas que podem envolver m\u00faltiplas entidades ou intera\u00e7\u00f5es.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#vantagens-de-usar-servicos","title":"Vantagens de Usar Servi\u00e7os","text":"<ol> <li> <p>Organiza\u00e7\u00e3o do C\u00f3digo: Ao encapsular l\u00f3gica de neg\u00f3cio complexa em servi\u00e7os, voc\u00ea mant\u00e9m o c\u00f3digo mais organizado e mais f\u00e1cil de entender.</p> </li> <li> <p>Reutiliza\u00e7\u00e3o: Servi\u00e7os podem ser reutilizados em diferentes partes da aplica\u00e7\u00e3o, promovendo a efici\u00eancia.</p> </li> <li> <p>Facilidade de Testes: Os servi\u00e7os podem ser facilmente testados isoladamente, o que facilita a cria\u00e7\u00e3o de testes automatizados.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#validator","title":"Validator","text":"<p>No contexto do Domain-Driven Design (DDD), um Validador \u00e9 um componente respons\u00e1vel por garantir que os dados e as regras de neg\u00f3cio atendam a crit\u00e9rios espec\u00edficos antes de serem processados ou armazenados. O validador atua como uma camada de prote\u00e7\u00e3o que verifica a integridade e a validade dos dados antes que eles sejam utilizados nas opera\u00e7\u00f5es de neg\u00f3cio.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#principais-caracteristicas-do-validador","title":"Principais Caracter\u00edsticas do Validador","text":"<ol> <li>Verifica\u00e7\u00e3o de Regras de Neg\u00f3cio:</li> <li> <p>O validador \u00e9 encarregado de verificar se os dados atendem \u00e0s regras de neg\u00f3cio definidas. Isso inclui checar se os dados est\u00e3o completos, s\u00e3o coerentes e seguem as regras estabelecidas.</p> </li> <li> <p>Separa\u00e7\u00e3o de Preocupa\u00e7\u00f5es:</p> </li> <li> <p>A utiliza\u00e7\u00e3o de validadores ajuda a separar a l\u00f3gica de valida\u00e7\u00e3o da l\u00f3gica de neg\u00f3cio. Isso resulta em um c\u00f3digo mais modular e f\u00e1cil de manter.</p> </li> <li> <p>Reutiliza\u00e7\u00e3o:</p> </li> <li>Validadores podem ser reutilizados em diferentes partes da aplica\u00e7\u00e3o sempre que for necess\u00e1rio validar dados semelhantes, promovendo assim a consist\u00eancia.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#tipos-de-validador","title":"Tipos de Validador","text":"<ol> <li>Validador de Entidade:</li> <li> <p>Realiza a valida\u00e7\u00e3o dos atributos de uma entidade antes de ser persistida. Isso pode incluir checar se todos os campos obrigat\u00f3rios est\u00e3o preenchidos e se os dados est\u00e3o no formato correto.</p> </li> <li> <p>Validador de Comando:</p> </li> <li> <p>Utilizado para validar dados de entrada recebidos de uma interface, como formul\u00e1rios ou APIs. Garante que os dados que chegam ao sistema estejam corretos e prontos para serem processados.</p> </li> <li> <p>Validador de Regras de Neg\u00f3cio:</p> </li> <li>Valida regras espec\u00edficas que n\u00e3o s\u00e3o necessariamente relacionadas a atributos de entidades, mas que fazem parte da l\u00f3gica de neg\u00f3cio. Por exemplo, validar se um cliente tem saldo suficiente para realizar uma compra.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#exemplo-de-validador","title":"Exemplo de Validador","text":"<p>Vamos usar um exemplo para ilustrar como um validador funciona em um sistema de e-commerce.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#validador-produtovalidator","title":"Validador: ProdutoValidator","text":"<pre><code>class Produto:\n    def __init__(self, id, nome, preco):\n        self.id = id\n        self.nome = nome\n        self.preco = preco\n\nclass ProdutoValidator:\n    def validar(self, produto):\n        erros = []\n\n        if not produto.nome:\n            erros.append(\"O nome do produto \u00e9 obrigat\u00f3rio.\")\n        if produto.preco &lt;= 0:\n            erros.append(\"O pre\u00e7o do produto deve ser maior que zero.\")\n\n        if erros:\n            raise ValueError(\"Erros de valida\u00e7\u00e3o: \" + \"; \".join(erros))\n\n# Uso\nproduto = Produto(1, \"\", -10)  # Produto com dados inv\u00e1lidos\nvalidator = ProdutoValidator()\n\ntry:\n    validator.validar(produto)  # Valida o produto\nexcept ValueError as e:\n    print(e)  # Captura e exibe os erros de valida\u00e7\u00e3o\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#operacoes-comuns-em-validadores","title":"Opera\u00e7\u00f5es Comuns em Validadores","text":"<ol> <li>Validar Dados: M\u00e9todos que realizam a verifica\u00e7\u00e3o dos dados com base nas regras de neg\u00f3cio.</li> <li>Retornar Erros: Quando a valida\u00e7\u00e3o falha, o validador deve retornar uma lista de erros ou lan\u00e7ar exce\u00e7\u00f5es que descrevem o que est\u00e1 errado.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#vantagens-de-usar-validadores","title":"Vantagens de Usar Validadores","text":"<ol> <li> <p>Consist\u00eancia: A aplica\u00e7\u00e3o de validadores garante que os dados que entram no sistema sejam consistentes e v\u00e1lidos, reduzindo a chance de erros em opera\u00e7\u00f5es subsequentes.</p> </li> <li> <p>Manuten\u00e7\u00e3o: Com a l\u00f3gica de valida\u00e7\u00e3o separada, \u00e9 mais f\u00e1cil modificar ou adicionar regras de valida\u00e7\u00e3o sem impactar outras partes do sistema.</p> </li> <li> <p>Clareza: A utiliza\u00e7\u00e3o de validadores torna o c\u00f3digo mais claro e f\u00e1cil de entender, pois as regras de valida\u00e7\u00e3o s\u00e3o explicitamente definidas.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#controller-mvc","title":"Controller (MVC)","text":"<p>No contexto do desenvolvimento de software, especialmente em aplica\u00e7\u00f5es web, um Controller \u00e9 um componente que atua como intermedi\u00e1rio entre a interface do usu\u00e1rio (UI) e a l\u00f3gica de neg\u00f3cio da aplica\u00e7\u00e3o. Ele \u00e9 respons\u00e1vel por gerenciar as requisi\u00e7\u00f5es do usu\u00e1rio, processar essas requisi\u00e7\u00f5es, interagir com os servi\u00e7os e retornar as respostas apropriadas.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#principais-caracteristicas-do-controller","title":"Principais Caracter\u00edsticas do Controller","text":"<ol> <li>Gerenciamento de Requisi\u00e7\u00f5es:</li> <li> <p>O controller \u00e9 respons\u00e1vel por receber e processar as requisi\u00e7\u00f5es feitas pelos usu\u00e1rios, normalmente atrav\u00e9s de um navegador ou aplicativo cliente. Isso inclui a an\u00e1lise dos dados de entrada e a execu\u00e7\u00e3o das a\u00e7\u00f5es necess\u00e1rias.</p> </li> <li> <p>Intera\u00e7\u00e3o com Servi\u00e7os:</p> </li> <li> <p>Um controller geralmente interage com servi\u00e7os de dom\u00ednio ou de aplica\u00e7\u00e3o para realizar opera\u00e7\u00f5es de neg\u00f3cio. Ele n\u00e3o deve conter l\u00f3gica de neg\u00f3cio complexa, mas sim delegar essa responsabilidade aos servi\u00e7os.</p> </li> <li> <p>Retorno de Respostas:</p> </li> <li>Ap\u00f3s processar a requisi\u00e7\u00e3o, o controller prepara a resposta para ser enviada de volta ao usu\u00e1rio. Isso pode incluir a renderiza\u00e7\u00e3o de uma p\u00e1gina, o retorno de dados em formato JSON, ou redirecionamentos para outras p\u00e1ginas.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#estrutura-tipica-de-um-controller","title":"Estrutura T\u00edpica de um Controller","text":"<p>Um controller geralmente cont\u00e9m m\u00e9todos que correspondem a a\u00e7\u00f5es que podem ser realizadas na aplica\u00e7\u00e3o, como criar, ler, atualizar e excluir (CRUD). Cada um desses m\u00e9todos manipula uma requisi\u00e7\u00e3o espec\u00edfica.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#exemplo-de-controller","title":"Exemplo de Controller","text":"<p>Vamos usar um exemplo simples para ilustrar como um controller funciona em um sistema de e-commerce.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#controller-produtocontroller","title":"Controller: ProdutoController","text":"<pre><code>class ProdutoService:\n    def criar_produto(self, nome, preco):\n        # L\u00f3gica para criar um produto\n        pass\n\n    def listar_produtos(self):\n        # L\u00f3gica para listar produtos\n        return []\n\nclass ProdutoController:\n    def __init__(self, produto_service):\n        self.produto_service = produto_service\n\n    def adicionar_produto(self, nome, preco):\n        try:\n            self.produto_service.criar_produto(nome, preco)\n            return \"Produto adicionado com sucesso!\"\n        except Exception as e:\n            return f\"Erro ao adicionar produto: {str(e)}\"\n\n    def listar_produtos(self):\n        produtos = self.produto_service.listar_produtos()\n        return produtos  # Retorna a lista de produtos\n\n# Uso\nproduto_service = ProdutoService()\ncontroller = ProdutoController(produto_service)\n\n# Adicionando um produto\nresultado_adicao = controller.adicionar_produto(\"Produto A\", 100)\nprint(resultado_adicao)\n\n# Listando produtos\nprodutos = controller.listar_produtos()\nprint(produtos)\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#operacoes-comuns-em-controllers","title":"Opera\u00e7\u00f5es Comuns em Controllers","text":"<ol> <li>Adicionar: M\u00e9todo para processar requisi\u00e7\u00f5es de cria\u00e7\u00e3o de novos recursos (por exemplo, um novo produto).</li> <li>Listar: M\u00e9todo para retornar uma lista de recursos existentes.</li> <li>Atualizar: M\u00e9todo para manipular requisi\u00e7\u00f5es de atualiza\u00e7\u00e3o de recursos existentes.</li> <li>Remover: M\u00e9todo para processar requisi\u00e7\u00f5es de exclus\u00e3o de recursos.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#vantagens-de-usar-controllers","title":"Vantagens de Usar Controllers","text":"<ol> <li> <p>Separa\u00e7\u00e3o de Preocupa\u00e7\u00f5es: A utiliza\u00e7\u00e3o de controllers permite separar a l\u00f3gica de apresenta\u00e7\u00e3o (interface do usu\u00e1rio) da l\u00f3gica de neg\u00f3cio, resultando em um c\u00f3digo mais organizado e f\u00e1cil de manter.</p> </li> <li> <p>Facilidade de Testes: Controllers podem ser testados isoladamente, garantindo que a manipula\u00e7\u00e3o de requisi\u00e7\u00f5es e respostas ocorra corretamente.</p> </li> <li> <p>Clareza: Com a defini\u00e7\u00e3o clara de m\u00e9todos que correspondem a a\u00e7\u00f5es espec\u00edficas, o c\u00f3digo do controller se torna mais f\u00e1cil de entender e seguir.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#ddd-e-mvc","title":"DDD e MVC","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#o-que-e-mvc","title":"O que \u00e9 MVC?","text":"<p>Model-View-Controller (MVC) \u00e9 um padr\u00e3o arquitetural que divide uma aplica\u00e7\u00e3o em tr\u00eas componentes principais:</p> <ol> <li>Model (Modelo): Representa os dados e a l\u00f3gica de neg\u00f3cio.</li> <li>View (Vis\u00e3o): A interface do usu\u00e1rio que exibe dados e recebe entradas do usu\u00e1rio.</li> <li>Controller (Controlador): Intermedi\u00e1rio entre a View e o Model, processando as requisi\u00e7\u00f5es do usu\u00e1rio e manipulando os dados.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#ddd-e-agnostico-a-padroes-arquiteturais-e-organizacionais","title":"DDD \u00e9 Agn\u00f3stico a Padr\u00f5es Arquiteturais e Organizacionais","text":"<ol> <li>Independ\u00eancia de Padr\u00f5es:</li> <li> <p>O DDD n\u00e3o prescreve uma arquitetura espec\u00edfica ou um padr\u00e3o organizacional. Ele \u00e9 agn\u00f3stico em rela\u00e7\u00e3o a como o c\u00f3digo deve ser estruturado. Isso significa que voc\u00ea pode aplicar os princ\u00edpios do DDD em diversas arquiteturas, como MVC, Microservices, Clean Architecture, entre outras.</p> </li> <li> <p>Flexibilidade:</p> </li> <li>A estrutura do DDD pode ser adaptada para se integrar com diferentes padr\u00f5es, dependendo das necessidades do projeto e das prefer\u00eancias da equipe de desenvolvimento. Isso permite que os desenvolvedores escolham a melhor abordagem para o contexto em que est\u00e3o trabalhando.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#como-ddd-e-mvc-se-encaixam","title":"Como DDD e MVC se Encaixam","text":"<ol> <li>Model (Modelo) e Entidades:</li> <li>No MVC, o Model \u00e9 respons\u00e1vel por representar dados e l\u00f3gica de neg\u00f3cio. No DDD, as entidades e Value Objects formam a base do modelo. Portanto, o Model no MVC pode ser uma implementa\u00e7\u00e3o direta dos conceitos do DDD. </li> <li> <p>As regras de neg\u00f3cio e valida\u00e7\u00f5es definidas no DDD s\u00e3o refletidas nas entidades que comp\u00f5em o Model.</p> </li> <li> <p>Controller (Controlador) e Servi\u00e7os:</p> </li> <li>O Controller no MVC atua como intermedi\u00e1rio, recebendo as entradas do usu\u00e1rio e interagindo com o Model. No DDD, os servi\u00e7os de dom\u00ednio s\u00e3o utilizados dentro dos controllers para encapsular a l\u00f3gica de neg\u00f3cio. Isso permite que o controller delegue as opera\u00e7\u00f5es complexas a servi\u00e7os, mantendo o c\u00f3digo limpo e organizado.</li> <li> <p>O controller pode chamar m\u00e9todos dos servi\u00e7os de dom\u00ednio para realizar opera\u00e7\u00f5es, como criar ou atualizar entidades.</p> </li> <li> <p>View (Vis\u00e3o) e Apresenta\u00e7\u00e3o:</p> </li> <li>A View no MVC \u00e9 respons\u00e1vel por exibir dados para o usu\u00e1rio. A apresenta\u00e7\u00e3o dos dados pode ser influenciada pela modelagem do dom\u00ednio feita no DDD. Isso significa que a estrutura e o comportamento da View podem ser moldados pelos conceitos do dom\u00ednio, garantindo que a interface do usu\u00e1rio esteja alinhada com as regras e necessidades do neg\u00f3cio.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/#exemplificando-a-interseccao","title":"Exemplificando a Intersec\u00e7\u00e3o","text":"<ul> <li>Modelo:</li> <li> <p>Uma classe <code>Produto</code> que representa um produto pode ser tanto uma entidade no DDD quanto parte do Model no MVC. Essa classe incluiria atributos e m\u00e9todos que refletem as regras de neg\u00f3cio.</p> </li> <li> <p>Controlador:</p> </li> <li> <p>Um <code>ProdutoController</code> no MVC interage com um <code>ProdutoService</code> do DDD. O controlador processa requisi\u00e7\u00f5es de cria\u00e7\u00e3o ou atualiza\u00e7\u00e3o de produtos, utilizando os servi\u00e7os de dom\u00ednio para aplicar a l\u00f3gica de neg\u00f3cio necess\u00e1ria.</p> </li> <li> <p>Vis\u00e3o:</p> </li> <li>A interface do usu\u00e1rio que exibe a lista de produtos ou um formul\u00e1rio para adicionar novos produtos \u00e9 a View no MVC, que se beneficia da modelagem de dom\u00ednio feita no DDD.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/","title":"O que \u00e9 Contexto Delimitado","text":"<p>O Contexto Delimitado \u00e9 um conceito central no Domain-Driven Design (DDD). Ele se refere a uma delimita\u00e7\u00e3o clara de um modelo de dom\u00ednio espec\u00edfico, onde as palavras, conceitos e regras t\u00eam significados precisos e consistentes. Cada contexto delimitado define um limite em torno de um modelo de dom\u00ednio e estabelece a linguagem e as intera\u00e7\u00f5es que ocorrem dentro desse limite.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#principais-caracteristicas-do-contexto-delimitado","title":"Principais Caracter\u00edsticas do Contexto Delimitado","text":"<ol> <li>Modelo de Dom\u00ednio Espec\u00edfico:</li> <li> <p>Dentro de um contexto delimitado, voc\u00ea pode ter um modelo de dom\u00ednio que \u00e9 espec\u00edfico para aquela parte do sistema. Isso significa que as entidades e servi\u00e7os t\u00eam defini\u00e7\u00f5es e comportamentos que s\u00e3o relevantes apenas dentro desse contexto.</p> </li> <li> <p>Linguagem Ubiqua:</p> </li> <li> <p>O contexto delimitado incentiva o uso de uma linguagem ub\u00edqua (ou Ubiquitous Language), que \u00e9 uma linguagem comum usada por todos os membros da equipe para descrever o modelo de dom\u00ednio, ajudando a evitar ambiguidades e mal-entendidos.</p> </li> <li> <p>Limite Claro:</p> </li> <li>Cada contexto delimitado possui limites claros que definem onde um modelo de dom\u00ednio se aplica. Fora desses limites, o mesmo conceito pode ter um significado diferente ou pode n\u00e3o ser aplic\u00e1vel.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#entidades-em-multiplos-contextos","title":"Entidades em M\u00faltiplos Contextos","text":"<p>Uma mesma entidade pode aparecer em diferentes contextos delimitados, mas com significados e contratos distintos. Vamos usar o exemplo do Produto para ilustrar isso:</p> <ol> <li>Contexto Delimitado: Cat\u00e1logo de Produtos:</li> <li> <p>No contexto do Cat\u00e1logo, o Produto pode incluir atributos relacionados ao marketing, como descri\u00e7\u00e3o, imagens, e pre\u00e7os promocionais. Este contexto \u00e9 voltado para como o produto \u00e9 apresentado aos clientes.</p> </li> <li> <p>Contexto Delimitado: Pedidos:</p> </li> <li> <p>No contexto de Pedidos, o Produto \u00e9 tratado como um Item de Pedido. Aqui, ele pode incluir informa\u00e7\u00f5es como quantidade e pre\u00e7o no momento da compra, que podem ser diferentes das informa\u00e7\u00f5es do cat\u00e1logo.</p> </li> <li> <p>Contexto Delimitado: Pagamentos:</p> </li> <li>No contexto de Pagamentos, o Produto pode ser representado como parte do c\u00e1lculo total do valor da transa\u00e7\u00e3o. Este contexto foca nos aspectos financeiros e pode ter informa\u00e7\u00f5es sobre descontos ou taxas.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#mapeamento-de-entidades","title":"Mapeamento de Entidades","text":"<p>As mesmas entidades podem ser mapeadas de v\u00e1rias maneiras entre os contextos:</p> <ul> <li>Tabela \u00danica:</li> <li> <p>Em alguns casos, as entidades podem ser armazenadas na mesma tabela em um banco de dados. Por exemplo, a tabela de produtos poderia conter todas as informa\u00e7\u00f5es relevantes para o cat\u00e1logo, pedidos e pagamentos, mas com colunas que refletem as diferentes necessidades de cada contexto.</p> </li> <li> <p>Tabelas Independentes:</p> </li> <li>Alternativamente, cada contexto pode ter sua pr\u00f3pria tabela para armazenar dados espec\u00edficos. Isso permite uma maior flexibilidade e especializa\u00e7\u00e3o, garantindo que cada contexto atenda \u00e0s suas necessidades sem ser afetado por mudan\u00e7as em outros contextos.</li> <li>Nesse caso, pode haver replica\u00e7\u00e3o de dados entre os contextos, onde um servi\u00e7o ou mecanismo de sincroniza\u00e7\u00e3o \u00e9 respons\u00e1vel por garantir que as informa\u00e7\u00f5es relevantes sejam atualizadas em todos os contextos.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#interacao-entre-contextos-delimitados","title":"Intera\u00e7\u00e3o entre Contextos Delimitados","text":"<p>Quando diferentes contextos delimitados precisam interagir, \u00e9 importante definir as interfaces e contratos que permitir\u00e3o essa comunica\u00e7\u00e3o. Por exemplo, ao criar um pedido, o contexto de Pedidos pode precisar consultar o contexto de Cat\u00e1logo para obter informa\u00e7\u00f5es sobre o produto, mas isso deve ser feito atrav\u00e9s de uma API bem definida.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#vantagens-do-uso-de-contextos-delimitados","title":"Vantagens do Uso de Contextos Delimitados","text":"<ol> <li>Clareza e Consist\u00eancia:</li> <li> <p>A defini\u00e7\u00e3o de contextos delimitados ajuda a manter a clareza e a consist\u00eancia no modelo de dom\u00ednio, evitando ambiguidade nas defini\u00e7\u00f5es.</p> </li> <li> <p>Facilidade de Manuten\u00e7\u00e3o:</p> </li> <li> <p>Com limites claros definidos, as equipes podem trabalhar em diferentes contextos sem interferir nas outras partes do sistema, facilitando a manuten\u00e7\u00e3o e a evolu\u00e7\u00e3o do software.</p> </li> <li> <p>Escalabilidade:</p> </li> <li>Contextos delimitados permitem que sistemas complexos sejam divididos em partes menores e mais gerenci\u00e1veis, facilitando a escalabilidade e a implementa\u00e7\u00e3o de novas funcionalidades.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#o-que-e-camada-anti-corrupcao-anti-corruption-layer-acl","title":"O que \u00e9 Camada Anti-Corrup\u00e7\u00e3o (Anti-Corruption Layer - ACL)","text":"<p>A Camada Anti-Corrup\u00e7\u00e3o \u00e9 um padr\u00e3o arquitetural utilizado no Domain-Driven Design (DDD) para evitar que um contexto delimitado seja \"corrompido\" por influ\u00eancias externas ou por outros contextos. Essa camada atua como um intermedi\u00e1rio que traduz as intera\u00e7\u00f5es entre contextos delimitados, permitindo que eles se comuniquem sem que um contexto influencie negativamente o modelo de dom\u00ednio do outro.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#principais-caracteristicas-da-camada-anti-corrupcao","title":"Principais Caracter\u00edsticas da Camada Anti-Corrup\u00e7\u00e3o","text":"<ol> <li>Isolamento:</li> <li> <p>A camada anti-corrup\u00e7\u00e3o isola o modelo de dom\u00ednio de um contexto de qualquer mudan\u00e7a ou comportamento inesperado que possa vir de outro contexto. Isso \u00e9 especialmente importante em sistemas complexos onde diferentes contextos t\u00eam suas pr\u00f3prias regras e modelos.</p> </li> <li> <p>Tradu\u00e7\u00e3o de Modelos:</p> </li> <li> <p>Quando dois contextos delimitados interagem, pode haver diferen\u00e7as significativas nas representa\u00e7\u00f5es de dados e na sem\u00e2ntica. A camada anti-corrup\u00e7\u00e3o atua como um tradutor, convertendo dados e chamadas de m\u00e9todo de um contexto para um formato que o outro contexto pode entender.</p> </li> <li> <p>Encapsulamento de L\u00f3gica de Integra\u00e7\u00e3o:</p> </li> <li>A l\u00f3gica necess\u00e1ria para integrar e comunicar entre contextos \u00e9 encapsulada dentro da camada anti-corrup\u00e7\u00e3o, tornando mais f\u00e1cil modificar ou substituir a l\u00f3gica de integra\u00e7\u00e3o sem impactar os modelos de dom\u00ednio dos contextos.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#exemplo-de-camada-anti-corrupcao","title":"Exemplo de Camada Anti-Corrup\u00e7\u00e3o","text":"<p>Vamos usar um exemplo de um sistema de e-commerce com dois contextos delimitados: Cat\u00e1logo de Produtos e Pedidos.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#cenario","title":"Cen\u00e1rio","text":"<ul> <li>Contexto Cat\u00e1logo de Produtos:</li> <li> <p>Este contexto possui uma representa\u00e7\u00e3o rica dos produtos, com informa\u00e7\u00f5es detalhadas sobre marketing, disponibilidade, etc.</p> </li> <li> <p>Contexto Pedidos:</p> </li> <li>Este contexto precisa criar pedidos com informa\u00e7\u00f5es de produtos, mas n\u00e3o deve depender da estrutura ou l\u00f3gica do contexto de Cat\u00e1logo de Produtos.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#implementacao-da-camada-anti-corrupcao","title":"Implementa\u00e7\u00e3o da Camada Anti-Corrup\u00e7\u00e3o","text":"<p>A camada anti-corrup\u00e7\u00e3o pode ser implementada como um servi\u00e7o ou um m\u00f3dulo que traduz as informa\u00e7\u00f5es do contexto de Cat\u00e1logo para o contexto de Pedidos. Por exemplo:</p> <pre><code>class ProdutoCatalogo:\n    def __init__(self, id, nome, preco, descricao):\n        self.id = id\n        self.nome = nome\n        self.preco = preco\n        self.descricao = descricao\n\nclass PedidoService:\n    def __init__(self, catalogo_service):\n        self.catalogo_service = catalogo_service\n\n    def criar_pedido(self, produto_id):\n        # Usar a camada anti-corrup\u00e7\u00e3o para obter informa\u00e7\u00f5es do cat\u00e1logo\n        produto_info = self.catalogo_service.obter_produto(produto_id)\n\n        # Converter para o formato do pedido\n        item_pedido = {\n            \"produto_id\": produto_info.id,\n            \"nome\": produto_info.nome,\n            \"preco\": produto_info.preco,\n            # Outros atributos necess\u00e1rios para o pedido\n        }\n        # L\u00f3gica para adicionar o item ao pedido\n        return item_pedido\n\nclass CatalogoService:\n    def obter_produto(self, produto_id):\n        # Simula a obten\u00e7\u00e3o de um produto do Cat\u00e1logo\n        return ProdutoCatalogo(produto_id, \"Produto A\", 100.0, \"Descri\u00e7\u00e3o do Produto A\")\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/contextos_delimitados/#vantagens-da-camada-anti-corrupcao","title":"Vantagens da Camada Anti-Corrup\u00e7\u00e3o","text":"<ol> <li>Prote\u00e7\u00e3o do Modelo de Dom\u00ednio:</li> <li> <p>A camada anti-corrup\u00e7\u00e3o protege o modelo de dom\u00ednio do contexto de ser afetado por mudan\u00e7as ou inconsist\u00eancias em outros contextos, garantindo que ele permane\u00e7a puro e consistente.</p> </li> <li> <p>Facilidade de Mudan\u00e7as:</p> </li> <li> <p>Se um contexto externo muda (por exemplo, o formato de dados ou a l\u00f3gica de neg\u00f3cios), as altera\u00e7\u00f5es podem ser feitas apenas na camada anti-corrup\u00e7\u00e3o, minimizando o impacto em todo o sistema.</p> </li> <li> <p>Comunica\u00e7\u00e3o Clara:</p> </li> <li> <p>A camada define uma interface clara para a comunica\u00e7\u00e3o entre contextos, facilitando a compreens\u00e3o das intera\u00e7\u00f5es e promovendo um design mais limpo.</p> </li> <li> <p>Facilidade de Testes:</p> </li> <li>A l\u00f3gica de integra\u00e7\u00e3o e tradu\u00e7\u00e3o \u00e9 encapsulada, permitindo que voc\u00ea teste a camada anti-corrup\u00e7\u00e3o independentemente dos contextos que ela conecta.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/","title":"E-Commerce","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#modelo-de-dominio","title":"Modelo de Dom\u00ednio","text":"<p>Para construir o dom\u00ednio de um sistema de e-commerce que abrange o fluxo de compras do cliente final, precisamos identificar as principais entidades de neg\u00f3cio que comp\u00f5em esse fluxo. Aqui est\u00e1 uma descri\u00e7\u00e3o de cada uma dessas entidades, seu papel no sistema e como elas se relacionam entre si.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#1-cliente","title":"1. Cliente","text":"<p>O cliente \u00e9 a entidade que representa o usu\u00e1rio final que est\u00e1 fazendo compras no e-commerce. Essa entidade deve armazenar informa\u00e7\u00f5es como nome, e-mail, endere\u00e7o e dados de contato.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#2-produto","title":"2. Produto","text":"<p>O produto \u00e9 a unidade b\u00e1sica de venda no e-commerce. Cada produto deve ter informa\u00e7\u00f5es como nome, descri\u00e7\u00e3o, pre\u00e7o, categoria e quantidade dispon\u00edvel. O produto pode estar listado em um cat\u00e1logo.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#3-catalogo","title":"3. Cat\u00e1logo","text":"<p>O cat\u00e1logo \u00e9 uma cole\u00e7\u00e3o de produtos dispon\u00edveis para venda. Ele permite que os clientes naveguem e filtrem produtos com base em categorias, pre\u00e7os e outros crit\u00e9rios. O cat\u00e1logo pode ser considerado uma visualiza\u00e7\u00e3o dos produtos dispon\u00edveis.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#4-carrinho","title":"4. Carrinho","text":"<p>O carrinho representa uma cole\u00e7\u00e3o tempor\u00e1ria de produtos que o cliente deseja comprar. O cliente pode adicionar, remover ou alterar a quantidade de produtos no carrinho antes de finalizar a compra. O carrinho deve armazenar refer\u00eancias aos produtos e a quantidade escolhida de cada um.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#5-pedido","title":"5. Pedido","text":"<p>Um pedido \u00e9 gerado quando o cliente decide finalizar a compra. Ele representa a transa\u00e7\u00e3o e deve incluir informa\u00e7\u00f5es sobre o cliente, os produtos comprados, o total a ser pago e o status do pedido. O pedido \u00e9 a entidade que persiste as informa\u00e7\u00f5es da compra.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#6-pagamento","title":"6. Pagamento","text":"<p>A entidade de pagamento gerencia as informa\u00e7\u00f5es relacionadas ao processo de pagamento do pedido. Ela deve armazenar informa\u00e7\u00f5es como m\u00e9todo de pagamento, status do pagamento, data e valor.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#raciocinio-para-montar-o-dominio","title":"Racioc\u00ednio para Montar o Dom\u00ednio","text":"<ul> <li> <p>Identifica\u00e7\u00e3o das Entidades: Iniciamos identificando as entidades fundamentais que participam do fluxo de compra. Cada entidade deve refletir uma parte do processo de compra que \u00e9 relevante para o cliente.</p> </li> <li> <p>Relacionamentos: Ap\u00f3s identificar as entidades, mapeamos os relacionamentos entre elas. Por exemplo, um cliente pode ter m\u00faltiplos pedidos, um pedido pode ter m\u00faltiplos produtos, e cada produto pode estar em muitos pedidos (rela\u00e7\u00e3o muitos-para-muitos).</p> </li> <li> <p>Atributos: Para cada entidade, definimos os atributos necess\u00e1rios que permitir\u00e3o que o sistema funcione corretamente e que capturem todas as informa\u00e7\u00f5es relevantes.</p> </li> <li> <p>Coes\u00e3o e Responsabilidade: Nos asseguramos de que cada entidade tenha uma \u00fanica responsabilidade e que seus atributos e comportamentos sejam coesos, proporcionando uma melhor manuten\u00e7\u00e3o e entendimento do sistema.</p> </li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#diagrama-do-dominio","title":"Diagrama do Dom\u00ednio","text":"<p>Assim fica o desenho final do dom\u00ednio do nosso e-commerce</p> <pre>f257c4241018304238ed3cc2d46f6facab074c6e7aadacb82d43f9723de272a946f411c349e7b493479503bfe49f43a711d8fffb677ed524e9dcd08db5e178b5</pre> <p>Nota: Esse dom\u00ednio est\u00e1 bastanta reduzido em compara\u00e7\u00e3o com um real para prop\u00f3sitos did\u00e1ticos</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#modelo-de-infraestrutura-repositorios-e-servicos","title":"Modelo de infraestrutura Reposit\u00f3rios e Servi\u00e7os","text":"<ol> <li> <p>Separa\u00e7\u00e3o de Responsabilidades: </p> </li> <li> <p>Reposit\u00f3rios: A camada de reposit\u00f3rios \u00e9 respons\u00e1vel por todas as intera\u00e7\u00f5es com a base de dados. Isso permite que a l\u00f3gica de acesso a dados seja isolada, facilitando futuras mudan\u00e7as na forma como os dados s\u00e3o armazenados ou recuperados (por exemplo, a troca de uma base de dados relacional por uma NoSQL).</p> </li> <li> <p>Servi\u00e7os: A camada de servi\u00e7os cont\u00e9m a l\u00f3gica de neg\u00f3cio que orquestra as opera\u00e7\u00f5es necess\u00e1rias para atender \u00e0s requisi\u00e7\u00f5es do cliente. Ao centralizar a l\u00f3gica de neg\u00f3cio, garantimos que as regras do dom\u00ednio sejam aplicadas de maneira consistente em toda a aplica\u00e7\u00e3o.</p> </li> <li> <p>Fluxo de Compras:</p> </li> <li> <p>Ao adicionar um produto ao carrinho, o controlador chamar\u00e1 o servi\u00e7o correspondente, que, por sua vez, utilizar\u00e1 o reposit\u00f3rio para persistir as informa\u00e7\u00f5es do produto no carrinho.</p> </li> <li>Quando um cliente finaliza um pedido, o servi\u00e7o de pedidos ir\u00e1 coordenar a cria\u00e7\u00e3o do pedido, interagir com a camada de reposit\u00f3rios para salvar o pedido na base de dados e tamb\u00e9m calcular o total do pedido, utilizando as informa\u00e7\u00f5es dos itens e do cliente.</li> <li> <p>O servi\u00e7o de pagamento orquestrar\u00e1 a l\u00f3gica de processamento do pagamento, chamando o reposit\u00f3rio quando necess\u00e1rio para registrar o status do pagamento.</p> </li> <li> <p>Manuten\u00e7\u00e3o e Testabilidade:</p> </li> <li> <p>A utiliza\u00e7\u00e3o dessas camadas permite que a l\u00f3gica de neg\u00f3cios (servi\u00e7os) seja testada isoladamente, sem depender da implementa\u00e7\u00e3o da persist\u00eancia (reposit\u00f3rios). Isso \u00e9 fundamental para garantir que as regras de neg\u00f3cio sejam verific\u00e1veis em testes unit\u00e1rios.</p> </li> <li>Mudan\u00e7as na persist\u00eancia dos dados (como a troca de um banco de dados) exigir\u00e3o apenas altera\u00e7\u00f5es na camada de reposit\u00f3rios, enquanto a l\u00f3gica de neg\u00f3cios permanecer\u00e1 intacta.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#diagrama-de-camadas-de-repositorios-e-servicos","title":"Diagrama de Camadas de Reposit\u00f3rios e Servi\u00e7os","text":"<p>Abaixo est\u00e1 o diagrama em PlantUML que representa as intera\u00e7\u00f5es entre as entidades de neg\u00f3cio, reposit\u00f3rios e servi\u00e7os no contexto do nosso sistema de e-commerce:</p> <pre>aa0ec131a315867a3bbc9687b4fe1a6393f0b922c1027abc9a698effa4e7800cb2195a5b40cb8d23cf5b966b73e836a849c281d1119709147ae33adcbc25cfe9</pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#uso-dos-controllers","title":"Uso dos Controllers","text":"<ol> <li> <p>Responsabilidade dos Controllers:</p> </li> <li> <p>Os Controllers s\u00e3o respons\u00e1veis por receber as requisi\u00e7\u00f5es HTTP e retornar as respostas apropriadas. Eles atuam como intermedi\u00e1rios entre o cliente e a l\u00f3gica de neg\u00f3cios da aplica\u00e7\u00e3o.</p> </li> <li> <p>Cada controller deve estar associado a uma entidade ou um conjunto de funcionalidades espec\u00edficas, como gerenciamento de produtos, clientes, pedidos e pagamentos.</p> </li> <li> <p>Intera\u00e7\u00e3o com os Services:</p> </li> <li> <p>Quando uma requisi\u00e7\u00e3o \u00e9 recebida, o controller invoca o servi\u00e7o apropriado para processar a l\u00f3gica de neg\u00f3cios necess\u00e1ria. Por exemplo, ao criar um novo produto, o controlador de produtos chamar\u00e1 o <code>ProductService.createProduct()</code>.</p> </li> <li> <p>O controller deve lidar com a valida\u00e7\u00e3o das entradas e formatar as respostas, enquanto a l\u00f3gica de neg\u00f3cios complexa \u00e9 delegada ao servi\u00e7o.</p> </li> <li> <p>Manuten\u00e7\u00e3o e Testabilidade:</p> </li> <li> <p>A separa\u00e7\u00e3o entre controllers e servi\u00e7os permite que ambos sejam testados de forma independente. Os controllers podem ser testados utilizando mocks para os servi\u00e7os, garantindo que a interface HTTP funcione conforme o esperado.</p> </li> <li> <p>Qualquer altera\u00e7\u00e3o na l\u00f3gica de neg\u00f3cios n\u00e3o afetar\u00e1 diretamente os controllers, desde que a interface do servi\u00e7o permane\u00e7a a mesma.</p> </li> <li> <p>Fluxo de Opera\u00e7\u00f5es:</p> </li> <li> <p>Quando um cliente realiza uma a\u00e7\u00e3o (como adicionar um produto ao carrinho), a requisi\u00e7\u00e3o \u00e9 dirigida ao controller correspondente. O controller chama o servi\u00e7o apropriado, que realiza as opera\u00e7\u00f5es necess\u00e1rias e interage com os reposit\u00f3rios conforme necess\u00e1rio.</p> </li> <li> <p>O resultado \u00e9 retornado ao controller, que ent\u00e3o formata a resposta e a envia de volta ao cliente.</p> </li> <li> <p>Opera\u00e7\u00f5es:</p> </li> <li> <p>Buscar Produtos No Catalogo: Retorna uma lista de produtos dispon\u00edveis no cat\u00e1logo.</p> </li> <li> <p>Adicionar Produto Ao Carrinho: Adiciona um produto ao carrinho do cliente.</p> </li> <li> <p>Calcular Desconto Carrinho: Aplica um desconto ao carrinho do cliente e retorna o carrinho atualizado.</p> </li> <li> <p>Realizar Pedido Cria um novo pedido com os produtos no carrinho do cliente e retorna o pedido gerado.</p> </li> <li> <p>Pagar Pedido: Processa o pagamento para o pedido especificado e retorna os detalhes do pagamento.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/arquitetura/DDD_-_Domain_Driven_Design/Exemplos_Pr%C3%A1ticos/ecommerce/#diagrama-de-operacoes-com-controllers-e-services","title":"Diagrama de Opera\u00e7\u00f5es com Controllers e Services","text":"<pre>a6f2e573a8825284007697d75920896d7fbf917f8372f8f22f7a3c0bd8e0e08a9dd9fd528778724db33f21ca50afd32ed7227a1f48b46e745955ef75aabd1058</pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/coder/","title":"Coder","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/","title":"Docker","text":"<p>Docker \u00e9 uma plataforma de software que permite a cria\u00e7\u00e3o, o envio e a execu\u00e7\u00e3o de aplica\u00e7\u00f5es em cont\u00eaineres. Os cont\u00eaineres s\u00e3o unidades leves e port\u00e1teis que podem ser executadas em qualquer ambiente que tenha o Docker instalado, garantindo que a aplica\u00e7\u00e3o funcione da mesma forma, independentemente do sistema operacional subjacente.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#conceitos-fundamentais","title":"Conceitos Fundamentais","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#1-conteineres","title":"1. Cont\u00eaineres","text":"<ul> <li>Defini\u00e7\u00e3o: Um cont\u00eainer \u00e9 uma inst\u00e2ncia de uma imagem Docker em execu\u00e7\u00e3o. Ele encapsula tudo o que uma aplica\u00e7\u00e3o precisa para rodar: c\u00f3digo, bibliotecas, depend\u00eancias e configura\u00e7\u00f5es.</li> <li>Isolamento: Cont\u00eaineres compartilham o mesmo n\u00facleo do sistema operacional, mas s\u00e3o isolados entre si e do host, permitindo que v\u00e1rias aplica\u00e7\u00f5es sejam executadas de forma segura e eficaz no mesmo sistema.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#2-imagens","title":"2. Imagens","text":"<ul> <li>Defini\u00e7\u00e3o: Uma imagem Docker \u00e9 uma constru\u00e7\u00e3o est\u00e1tica que cont\u00e9m todos os arquivos necess\u00e1rios para executar uma aplica\u00e7\u00e3o. Ela \u00e9 composta de camadas, onde cada camada representa uma altera\u00e7\u00e3o em rela\u00e7\u00e3o \u00e0 camada anterior.</li> <li>Cria\u00e7\u00e3o: As imagens s\u00e3o geralmente criadas atrav\u00e9s de um arquivo chamado <code>Dockerfile</code>, que cont\u00e9m instru\u00e7\u00f5es sobre como construir a imagem.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#3-dockerfile","title":"3. Dockerfile","text":"<ul> <li>Defini\u00e7\u00e3o: Um Dockerfile \u00e9 um script de texto que cont\u00e9m uma s\u00e9rie de comandos que o Docker utiliza para construir uma imagem.</li> <li>Exemplo de Comandos:</li> <li><code>FROM</code>: Define a imagem base.</li> <li><code>RUN</code>: Executa comandos durante a constru\u00e7\u00e3o da imagem.</li> <li><code>COPY</code>: Copia arquivos do sistema de arquivos do host para a imagem.</li> <li><code>CMD</code>: Define o comando padr\u00e3o a ser executado quando um cont\u00eainer \u00e9 iniciado a partir da imagem.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#4-docker-hub","title":"4. Docker Hub","text":"<ul> <li>Defini\u00e7\u00e3o: O Docker Hub \u00e9 um reposit\u00f3rio p\u00fablico onde os usu\u00e1rios podem armazenar e compartilhar imagens Docker.</li> <li>Uso: As imagens podem ser baixadas do Docker Hub ou de reposit\u00f3rios privados, permitindo f\u00e1cil acesso a imagens pr\u00e9-constru\u00eddas e compartilhamento de suas pr\u00f3prias imagens.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#vantagens-do-docker","title":"Vantagens do Docker","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#1-portabilidade","title":"1. Portabilidade","text":"<ul> <li>As aplica\u00e7\u00f5es em cont\u00eaineres podem ser executadas em qualquer lugar que suporte Docker, eliminando problemas de \"funciona na minha m\u00e1quina\".</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#2-eficiencia","title":"2. Efici\u00eancia","text":"<ul> <li>Os cont\u00eaineres s\u00e3o mais leves que m\u00e1quinas virtuais, pois compartilham o n\u00facleo do sistema operacional. Isso resulta em menor consumo de recursos e tempos de inicializa\u00e7\u00e3o mais r\u00e1pidos.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#3-isolamento","title":"3. Isolamento","text":"<ul> <li>Cada cont\u00eainer \u00e9 isolado, o que significa que as aplica\u00e7\u00f5es podem operar em ambientes diferentes sem conflitos de depend\u00eancias ou configura\u00e7\u00f5es.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#4-escalabilidade","title":"4. Escalabilidade","text":"<ul> <li>Docker facilita a escalabilidade horizontal, permitindo que m\u00faltiplas inst\u00e2ncias de um cont\u00eainer sejam executadas em paralelo para atender a picos de demanda.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#5-devops-e-cicd","title":"5. DevOps e CI/CD","text":"<ul> <li>Docker se integra bem com pr\u00e1ticas de DevOps e pipelines de integra\u00e7\u00e3o cont\u00ednua/entrega cont\u00ednua (CI/CD), permitindo que desenvolvedores e operadores trabalhem juntos de maneira mais eficaz.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#casos-de-uso-comuns","title":"Casos de Uso Comuns","text":"<ol> <li>Desenvolvimento Local: Desenvolvedores podem usar Docker para criar ambientes de desenvolvimento consistentes e replic\u00e1veis.</li> <li>Microservices: Docker \u00e9 frequentemente usado em arquiteturas de microservices, onde cada servi\u00e7o pode ser executado em seu pr\u00f3prio cont\u00eainer.</li> <li>Testes Automatizados: \u00c9 poss\u00edvel configurar ambientes de testes que podem ser criados e destru\u00eddos rapidamente, garantindo que os testes sejam executados em condi\u00e7\u00f5es controladas.</li> <li>Implanta\u00e7\u00e3o em Nuvem: Docker facilita a implanta\u00e7\u00e3o de aplica\u00e7\u00f5es em ambientes de nuvem, como AWS, Google Cloud e Azure, onde cont\u00eaineres podem ser gerenciados e orquestrados de forma eficaz.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#orquestracao-de-conteineres","title":"Orquestra\u00e7\u00e3o de Cont\u00eaineres","text":"<p>Para gerenciar m\u00faltiplos cont\u00eaineres, ferramentas de orquestra\u00e7\u00e3o como Kubernetes e Docker Swarm s\u00e3o frequentemente utilizadas. Essas ferramentas permitem a automa\u00e7\u00e3o do deployment, escalabilidade e gerenciamento de cont\u00eaineres em larga escala.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose \u00e9 uma ferramenta que permite definir e gerenciar aplica\u00e7\u00f5es multi-cont\u00eainer de forma simples e eficiente. Com o Docker Compose, voc\u00ea pode usar um arquivo YAML para configurar todos os servi\u00e7os necess\u00e1rios para sua aplica\u00e7\u00e3o, facilitando o gerenciamento e a orquestra\u00e7\u00e3o de cont\u00eaineres.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#conceitos-fundamentais_1","title":"Conceitos Fundamentais","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#1-definicao","title":"1. Defini\u00e7\u00e3o","text":"<ul> <li>Docker Compose \u00e9 uma ferramenta que permite definir e executar aplica\u00e7\u00f5es Docker compostas por m\u00faltiplos cont\u00eaineres. Ele utiliza um arquivo de configura\u00e7\u00e3o (geralmente chamado de <code>docker-compose.yml</code>) onde voc\u00ea descreve os servi\u00e7os que comp\u00f5em sua aplica\u00e7\u00e3o.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#2-arquivo-docker-composeyml","title":"2. Arquivo <code>docker-compose.yml</code>","text":"<ul> <li>O arquivo <code>docker-compose.yml</code> \u00e9 onde voc\u00ea define todos os servi\u00e7os, redes e volumes necess\u00e1rios para sua aplica\u00e7\u00e3o. A sintaxe \u00e9 baseada em YAML, o que torna a configura\u00e7\u00e3o bastante leg\u00edvel.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#estrutura-basica-do-docker-composeyml","title":"Estrutura B\u00e1sica do <code>docker-compose.yml</code>","text":"<pre><code>version: '3'  # Vers\u00e3o do Compose file format\nservices:     # Defini\u00e7\u00e3o dos servi\u00e7os\n  web:        # Nome do servi\u00e7o\n    image: nginx:latest  # Imagem a ser utilizada\n    ports:\n      - \"80:80\"  # Mapeamento de portas\n  db:         # Outro servi\u00e7o (banco de dados)\n    image: postgres:latest\n    environment:  # Vari\u00e1veis de ambiente\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#principais-componentes","title":"Principais Componentes","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#1-servicos","title":"1. Servi\u00e7os","text":"<ul> <li>Cada servi\u00e7o no <code>docker-compose.yml</code> representa um cont\u00eainer. Voc\u00ea pode especificar a imagem a ser usada, configura\u00e7\u00f5es de rede, vari\u00e1veis de ambiente, volumes e muito mais.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#2-redes","title":"2. Redes","text":"<ul> <li>O Compose cria uma rede padr\u00e3o para os servi\u00e7os se comunicarem entre si. Voc\u00ea pode personalizar redes, permitindo que servi\u00e7os em diferentes redes se comuniquem ou isolem servi\u00e7os conforme necess\u00e1rio.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#3-volumes","title":"3. Volumes","text":"<ul> <li>Volumes permitem que voc\u00ea persista dados gerados por cont\u00eaineres. Eles s\u00e3o armazenados fora do ciclo de vida do cont\u00eainer, garantindo que os dados n\u00e3o sejam perdidos quando um cont\u00eainer \u00e9 removido ou atualizado.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#comandos-principais-do-docker-compose","title":"Comandos Principais do Docker Compose","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#1-docker-compose-up","title":"1. <code>docker-compose up</code>","text":"<ul> <li>Este comando cria e inicia todos os servi\u00e7os definidos no arquivo <code>docker-compose.yml</code>.</li> <li>Exemplo:    <code>bash   docker-compose up</code></li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#2-docker-compose-down","title":"2. <code>docker-compose down</code>","text":"<ul> <li>Para de todos os servi\u00e7os e remove os cont\u00eaineres, redes e volumes associados.</li> <li>Exemplo:   <code>bash   docker-compose down</code></li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#3-docker-compose-build","title":"3. <code>docker-compose build</code>","text":"<ul> <li>Este comando constr\u00f3i ou reconstr\u00f3i os servi\u00e7os definidos no Compose file.</li> <li>Exemplo:   <code>bash   docker-compose build</code></li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#4-docker-compose-logs","title":"4. <code>docker-compose logs</code>","text":"<ul> <li>Mostra os logs de todos os servi\u00e7os em execu\u00e7\u00e3o, permitindo que voc\u00ea monitore a sa\u00edda dos cont\u00eaineres.</li> <li>Exemplo:   <code>bash   docker-compose logs</code></li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#5-docker-compose-exec","title":"5. <code>docker-compose exec</code>","text":"<ul> <li>Permite que voc\u00ea execute comandos em um cont\u00eainer em execu\u00e7\u00e3o.</li> <li>Exemplo:   <code>bash   docker-compose exec web bash</code></li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#vantagens-do-docker-compose","title":"Vantagens do Docker Compose","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#1-simplicidade","title":"1. Simplicidade","text":"<ul> <li>O Docker Compose simplifica o gerenciamento de aplica\u00e7\u00f5es multi-cont\u00eainer, permitindo que voc\u00ea defina todos os servi\u00e7os em um \u00fanico arquivo de configura\u00e7\u00e3o.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#2-consistencia","title":"2. Consist\u00eancia","text":"<ul> <li>A configura\u00e7\u00e3o da aplica\u00e7\u00e3o pode ser facilmente compartilhada entre diferentes ambientes (desenvolvimento, teste, produ\u00e7\u00e3o), garantindo que todos estejam usando a mesma configura\u00e7\u00e3o.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#3-facilidade-de-uso","title":"3. Facilidade de Uso","text":"<ul> <li>Docker Compose fornece uma interface de linha de comando intuitiva que torna f\u00e1cil iniciar, parar e gerenciar aplica\u00e7\u00f5es complexas.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/docker/#4-orquestracao","title":"4. Orquestra\u00e7\u00e3o","text":"<ul> <li>Embora o Docker Compose n\u00e3o seja uma ferramenta de orquestra\u00e7\u00e3o completa como o Kubernetes, ele fornece funcionalidades b\u00e1sicas de orquestra\u00e7\u00e3o para aplica\u00e7\u00f5es que n\u00e3o exigem a complexidade de uma solu\u00e7\u00e3o mais robusta.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/","title":"Maven","text":"<p>O Maven \u00e9 uma ferramenta de automa\u00e7\u00e3o de constru\u00e7\u00e3o e gerenciamento de projetos em Java. Ele fornece uma maneira padr\u00e3o de construir, testar e gerenciar depend\u00eancias em projetos Java. O Maven tem como principal objetivo simplificar o processo de constru\u00e7\u00e3o de projetos e gerenciar as bibliotecas utilizadas.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#teoria","title":"Teoria","text":"<p>Maven utiliza o conceito de Project Object Model (POM), que \u00e9 um arquivo XML (<code>pom.xml</code>) que cont\u00e9m informa\u00e7\u00f5es sobre o projeto e configura\u00e7\u00f5es sobre como construir o projeto. O POM \u00e9 o cora\u00e7\u00e3o do Maven e define as depend\u00eancias, plugins, configura\u00e7\u00f5es de constru\u00e7\u00e3o e outras informa\u00e7\u00f5es relevantes para o projeto.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#utilidade-do-maven","title":"Utilidade do Maven","text":"<ol> <li> <p>Gerenciamento de Depend\u00eancias: O Maven permite que voc\u00ea declare as bibliotecas que seu projeto precisa. Ele baixa automaticamente essas bibliotecas e suas depend\u00eancias transitivas a partir de reposit\u00f3rios remotos.</p> </li> <li> <p>Constru\u00e7\u00e3o do Projeto: O Maven fornece um conjunto de comandos para compilar, testar e empacotar seu projeto de maneira consistente. O processo de constru\u00e7\u00e3o \u00e9 definido no arquivo POM.</p> </li> <li> <p>Estrutura de Projeto Padr\u00e3o: O Maven imp\u00f5e uma estrutura de diret\u00f3rios padr\u00e3o para projetos, facilitando a organiza\u00e7\u00e3o do c\u00f3digo e a colabora\u00e7\u00e3o entre desenvolvedores.</p> </li> <li> <p>Plugins: O Maven possui uma extensa cole\u00e7\u00e3o de plugins que permitem executar tarefas como teste, empacotamento e implanta\u00e7\u00e3o.</p> </li> <li> <p>Integra\u00e7\u00e3o Cont\u00ednua: O Maven se integra facilmente com ferramentas de CI/CD (Integra\u00e7\u00e3o Cont\u00ednua/Entrega Cont\u00ednua), permitindo que voc\u00ea automatize o processo de constru\u00e7\u00e3o e testes.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#exemplos-de-uso-do-arquivo-pom","title":"Exemplos de Uso do Arquivo POM","text":"<p>O arquivo <code>pom.xml</code> \u00e9 o cora\u00e7\u00e3o do Maven. Aqui est\u00e3o algumas se\u00e7\u00f5es comuns que voc\u00ea encontrar\u00e1 em um arquivo POM.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#exemplo-basico-de-um-pomxml","title":"Exemplo B\u00e1sico de um <code>pom.xml</code>","text":"<pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;my-app&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Depend\u00eancia do Spring Boot Starter Web --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;2.5.4&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Depend\u00eancia do JUnit para testes --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.13.2&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!-- Plugin do Maven Compiler --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.8.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;1.8&lt;/source&gt;\n                    &lt;target&gt;1.8&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#explicacao-do-pom","title":"Explica\u00e7\u00e3o do POM:","text":"<ul> <li> <p>groupId: Identifica o grupo ou organiza\u00e7\u00e3o ao qual o projeto pertence.</p> </li> <li> <p>artifactId: Nome \u00fanico do projeto.</p> </li> <li> <p>version: Vers\u00e3o do projeto.</p> </li> <li> <p>dependencies: Declara as bibliotecas que o projeto requer. O Maven ir\u00e1 baixar essas depend\u00eancias automaticamente.</p> </li> <li> <p>build: Define a configura\u00e7\u00e3o de constru\u00e7\u00e3o do projeto, incluindo plugins que ser\u00e3o utilizados, como o <code>maven-compiler-plugin</code> para compilar o c\u00f3digo.</p> </li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#exemplos-de-uso-da-linha-de-comando","title":"Exemplos de Uso da Linha de Comando","text":"<p>O Maven fornece uma s\u00e9rie de comandos que voc\u00ea pode executar no terminal para gerenciar o ciclo de vida do projeto. Aqui est\u00e3o alguns comandos comuns:</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#1-criar-um-novo-projeto","title":"1. Criar um Novo Projeto","text":"<pre><code>mvn archetype:generate -DgroupId=com.example -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#2-compilar-o-projeto","title":"2. Compilar o Projeto","text":"<pre><code>cd my-app\nmvn compile\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#3-executar-testes","title":"3. Executar Testes","text":"<pre><code>mvn test\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#4-empacotar-o-projeto","title":"4. Empacotar o Projeto","text":"<pre><code>mvn package\n</code></pre> <p>Este comando compila o c\u00f3digo e empacota o projeto em um arquivo <code>.jar</code> ou <code>.war</code>, dependendo do tipo de empacotamento definido no POM.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#5-executar-o-projeto","title":"5. Executar o Projeto","text":"<p>Se voc\u00ea estiver usando o Spring Boot, voc\u00ea pode executar o projeto diretamente com o Maven:</p> <pre><code>mvn spring-boot:run\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#6-limpar-o-projeto","title":"6. Limpar o Projeto","text":"<p>Para limpar os arquivos gerados durante a constru\u00e7\u00e3o, como classes compiladas e artefatos de empacotamento, utilize:</p> <pre><code>mvn clean\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/maven/#conclusao","title":"Conclus\u00e3o","text":"<p>O Maven \u00e9 uma ferramenta poderosa que simplifica o gerenciamento de projetos Java, oferecendo recursos para gerenciamento de depend\u00eancias, constru\u00e7\u00e3o, teste e empacotamento. Atrav\u00e9s do uso do arquivo <code>pom.xml</code> e da linha de comando, os desenvolvedores podem automatizar o ciclo de vida de seus projetos, garantindo consist\u00eancia e efici\u00eancia no desenvolvimento.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/","title":"NPM","text":"<p>O npm (Node Package Manager) \u00e9 o gestor de pacotes padr\u00e3o para o ambiente de execu\u00e7\u00e3o Node.js. Ele permite que os desenvolvedores instalem, compartilhem e gerenciem depend\u00eancias de projetos JavaScript.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#1-instalacao-do-npm","title":"1. Instala\u00e7\u00e3o do npm","text":"<p>O npm \u00e9 instalado automaticamente junto com o Node.js. Para verificar se o npm est\u00e1 instalado, voc\u00ea pode usar o seguinte comando no terminal:</p> <pre><code>npm -v\n</code></pre> <p>Se o npm n\u00e3o estiver instalado, voc\u00ea pode baixar o Node.js do site oficial e seguir as instru\u00e7\u00f5es de instala\u00e7\u00e3o.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#2-estrutura-do-npm","title":"2. Estrutura do npm","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#21-repositorio-npm","title":"2.1. Reposit\u00f3rio npm","text":"<p>O npm possui um reposit\u00f3rio online de pacotes que pode ser acessado em npmjs.com. Este reposit\u00f3rio cont\u00e9m milhares de pacotes que podem ser usados em projetos.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#22-pacotes","title":"2.2. Pacotes","text":"<p>Um pacote \u00e9 uma cole\u00e7\u00e3o de c\u00f3digo que pode ser reutilizado em outros projetos. Cada pacote tem um arquivo <code>package.json</code> que cont\u00e9m informa\u00e7\u00f5es sobre o pacote, como nome, vers\u00e3o e depend\u00eancias.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#3-comandos-basicos-do-npm","title":"3. Comandos B\u00e1sicos do npm","text":"<p>Aqui est\u00e3o alguns dos comandos mais comuns usados com o npm:</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#31-inicializando-um-projeto","title":"3.1. Inicializando um Projeto","text":"<p>Para criar um novo projeto e gerar um arquivo <code>package.json</code>, execute:</p> <pre><code>npm init\n</code></pre> <p>Se voc\u00ea quiser pular as perguntas e usar valores padr\u00e3o, voc\u00ea pode usar:</p> <pre><code>npm init -y\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#32-instalando-pacotes","title":"3.2. Instalando Pacotes","text":"<p>Para instalar um pacote, use:</p> <pre><code>npm install &lt;nome-do-pacote&gt;\n</code></pre> <p>Por exemplo, para instalar o Express:</p> <pre><code>npm install express\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#321-instalacao-global","title":"3.2.1. Instala\u00e7\u00e3o Global","text":"<p>Para instalar um pacote globalmente, use a flag <code>-g</code>:</p> <pre><code>npm install -g &lt;nome-do-pacote&gt;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#33-removendo-pacotes","title":"3.3. Removendo Pacotes","text":"<p>Para remover um pacote, use:</p> <pre><code>npm uninstall &lt;nome-do-pacote&gt;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#34-atualizando-pacotes","title":"3.4. Atualizando Pacotes","text":"<p>Para atualizar um pacote para a vers\u00e3o mais recente, use:</p> <pre><code>npm update &lt;nome-do-pacote&gt;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#35-listando-pacotes-instalados","title":"3.5. Listando Pacotes Instalados","text":"<p>Para ver todos os pacotes instalados no seu projeto, use:</p> <pre><code>npm list\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#4-arquivo-packagejson","title":"4. Arquivo package.json","text":"<p>O arquivo <code>package.json</code> \u00e9 fundamental para gerenciar um projeto npm. Ele cont\u00e9m v\u00e1rias se\u00e7\u00f5es, incluindo:</p> <pre><code>{\n  \"name\": \"nome-do-projeto\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Descri\u00e7\u00e3o do projeto\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  },\n  \"devDependencies\": {\n    \"jest\": \"^26.6.3\"\n  },\n  \"author\": \"Seu Nome\",\n  \"license\": \"ISC\"\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#41-scripts","title":"4.1. Scripts","text":"<p>A se\u00e7\u00e3o <code>scripts</code> permite que voc\u00ea defina comandos personalizados que podem ser executados com <code>npm run &lt;script&gt;</code>. Por exemplo:</p> <pre><code>npm run start\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#5-dependencias-e-devdependencies","title":"5. Depend\u00eancias e DevDependencies","text":"<ul> <li>dependencies: Pacotes necess\u00e1rios para o funcionamento do aplicativo em produ\u00e7\u00e3o.</li> <li>devDependencies: Pacotes necess\u00e1rios apenas durante o desenvolvimento e testes.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#6-publicando-pacotes","title":"6. Publicando Pacotes","text":"<p>Se voc\u00ea deseja compartilhar seu pacote com a comunidade, voc\u00ea pode public\u00e1-lo no reposit\u00f3rio npm:</p> <ol> <li>Crie uma conta no npm.</li> <li>Fa\u00e7a login usando o comando:</li> </ol> <p><code>bash    npm login</code></p> <ol> <li>Navegue at\u00e9 o diret\u00f3rio do seu pacote e execute:</li> </ol> <p><code>bash    npm publish</code></p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#7-conclusao","title":"7. Conclus\u00e3o","text":"<p>O npm \u00e9 uma ferramenta poderosa que simplifica o gerenciamento de pacotes e depend\u00eancias em projetos JavaScript. Para mais informa\u00e7\u00f5es e documenta\u00e7\u00e3o detalhada, voc\u00ea pode visitar a documenta\u00e7\u00e3o oficial do npm.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/npm/#8-recursos-adicionais","title":"8. Recursos Adicionais","text":"<ul> <li>Documenta\u00e7\u00e3o do npm</li> <li>Reposit\u00f3rio de Pacotes npm</li> <li>Guia para Publicar Pacotes</li> </ul> <p>Esses recursos podem ajud\u00e1-lo a se aprofundar ainda mais no uso do npm e em suas funcionalidades.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/","title":"Python Poetry","text":"<p>Poetry \u00e9 uma ferramenta de gerenciamento de depend\u00eancias e constru\u00e7\u00e3o de pacotes para projetos Python. Ele facilita a cria\u00e7\u00e3o e a gest\u00e3o de ambientes virtuais, al\u00e9m de permitir a especifica\u00e7\u00e3o e a instala\u00e7\u00e3o de depend\u00eancias de maneira simples.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#1-instalacao-do-poetry","title":"1. Instala\u00e7\u00e3o do Poetry","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#11-usando-o-instalador","title":"1.1. Usando o Instalador","text":"<p>Para instalar o Poetry, voc\u00ea pode usar o seguinte comando no terminal:</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#12-verificando-a-instalacao","title":"1.2. Verificando a Instala\u00e7\u00e3o","text":"<p>Ap\u00f3s a instala\u00e7\u00e3o, verifique se o Poetry foi instalado corretamente com:</p> <pre><code>poetry --version\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#2-estrutura-do-poetry","title":"2. Estrutura do Poetry","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#21-diretorio-do-projeto","title":"2.1. Diret\u00f3rio do Projeto","text":"<p>Quando voc\u00ea cria um novo projeto com o Poetry, ele gera uma estrutura de diret\u00f3rios com um arquivo <code>pyproject.toml</code>, que \u00e9 o principal arquivo de configura\u00e7\u00e3o para o seu projeto.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#22-arquivo-pyprojecttoml","title":"2.2. Arquivo pyproject.toml","text":"<p>O arquivo <code>pyproject.toml</code> \u00e9 onde voc\u00ea define as configura\u00e7\u00f5es do seu projeto, incluindo metadados e depend\u00eancias.</p> <pre><code>[tool.poetry]\nname = \"meu_projeto\"\nversion = \"0.1.0\"\ndescription = \"Uma breve descri\u00e7\u00e3o do meu projeto.\"\nauthors = [\"Seu Nome &lt;seu.email@exemplo.com&gt;\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\nrequests = \"^2.25.1\"\nflask = \"^2.0.1\"\n\n[tool.poetry.dev-dependencies]\npytest = \"^6.2.4\"\nblack = \"^21.6b0\"\n\n[build-system]\nrequires = [\"poetry-core&gt;=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#explicacao-dos-campos","title":"Explica\u00e7\u00e3o dos Campos","text":"<ul> <li>[tool.poetry]: Se\u00e7\u00e3o principal onde s\u00e3o configuradas as informa\u00e7\u00f5es do projeto.</li> <li><code>name</code>: Nome do projeto.</li> <li><code>version</code>: Vers\u00e3o do projeto.</li> <li><code>description</code>: Uma breve descri\u00e7\u00e3o do que o projeto faz.</li> <li><code>authors</code>: Lista de autores do projeto.</li> <li><code>license</code>: Licen\u00e7a do projeto.</li> <li> <p><code>readme</code>: Caminho para o arquivo README do projeto.</p> </li> <li> <p>[tool.poetry.dependencies]: Lista de depend\u00eancias do projeto.</p> </li> <li><code>python</code>: Especifica a vers\u00e3o do Python necess\u00e1ria.</li> <li><code>requests</code>: Exemplo de uma depend\u00eancia do projeto.</li> <li> <p><code>flask</code>: Outro exemplo de depend\u00eancia.</p> </li> <li> <p>[tool.poetry.dev-dependencies]: Depend\u00eancias necess\u00e1rias apenas para desenvolvimento.</p> </li> <li><code>pytest</code>: Ferramenta de testes.</li> <li> <p><code>black</code>: Formata\u00e7\u00e3o de c\u00f3digo.</p> </li> <li> <p>[build-system]: Define o sistema de constru\u00e7\u00e3o do projeto.</p> </li> <li><code>requires</code>: Depend\u00eancias necess\u00e1rias para construir o projeto.</li> <li><code>build-backend</code>: Especifica o backend de constru\u00e7\u00e3o a ser usado.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#3-comandos-basicos-do-poetry","title":"3. Comandos B\u00e1sicos do Poetry","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#31-criando-um-novo-projeto","title":"3.1. Criando um Novo Projeto","text":"<p>Para criar um novo projeto, use:</p> <pre><code>poetry new nome-do-projeto\n</code></pre> <p>Isso criar\u00e1 uma estrutura b\u00e1sica de diret\u00f3rio:</p> <pre><code>nome-do-projeto/\n\u251c\u2500\u2500 nome_do_projeto/\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 pyproject.toml\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#32-adicionando-dependencias","title":"3.2. Adicionando Depend\u00eancias","text":"<p>Para adicionar uma depend\u00eancia ao seu projeto, use:</p> <pre><code>poetry add nome-do-pacote\n</code></pre> <p>Por exemplo, para adicionar o pacote <code>requests</code>:</p> <pre><code>poetry add requests\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#321-adicionando-dependencias-de-desenvolvimento","title":"3.2.1. Adicionando Depend\u00eancias de Desenvolvimento","text":"<p>Para adicionar uma depend\u00eancia apenas para desenvolvimento, use a flag <code>--dev</code>:</p> <pre><code>poetry add --dev nome-do-pacote\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#33-removendo-dependencias","title":"3.3. Removendo Depend\u00eancias","text":"<p>Para remover uma depend\u00eancia, use:</p> <pre><code>poetry remove nome-do-pacote\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#34-instalando-dependencias","title":"3.4. Instalando Depend\u00eancias","text":"<p>Para instalar todas as depend\u00eancias listadas no <code>pyproject.toml</code>, use:</p> <pre><code>poetry install\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#35-atualizando-dependencias","title":"3.5. Atualizando Depend\u00eancias","text":"<p>Para atualizar as depend\u00eancias do projeto, use:</p> <pre><code>poetry update\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#4-gerenciando-ambientes-virtuais","title":"4. Gerenciando Ambientes Virtuais","text":"<p>Poetry cria automaticamente um ambiente virtual para o seu projeto. Para ativar o ambiente virtual, use:</p> <pre><code>poetry shell\n</code></pre> <p>Para executar um comando dentro do ambiente virtual sem ativ\u00e1-lo, voc\u00ea pode usar:</p> <pre><code>poetry run nome-do-comando\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#5-scripts-de-execucao","title":"5. Scripts de Execu\u00e7\u00e3o","text":"<p>Voc\u00ea pode definir scripts no seu arquivo <code>pyproject.toml</code> para executar comandos personalizados. Por exemplo:</p> <pre><code>[tool.poetry.scripts]\nmeu_script = \"modulo:funcao\"\n</code></pre> <p>Para executar o script, use:</p> <pre><code>poetry run meu_script\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#6-publicando-pacotes","title":"6. Publicando Pacotes","text":"<p>Se voc\u00ea deseja distribuir seu pacote, pode public\u00e1-lo no PyPI:</p> <ol> <li>Primeiro, certifique-se de que as informa\u00e7\u00f5es no <code>pyproject.toml</code> est\u00e3o corretas.</li> <li>Fa\u00e7a login na sua conta PyPI:</li> </ol> <p><code>bash    poetry config pypi-token.pypi &lt;TOKEN&gt;</code></p> <ol> <li>Publique seu pacote:</li> </ol> <p><code>bash    poetry publish</code></p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#7-conclusao","title":"7. Conclus\u00e3o","text":"<p>O Poetry simplifica o gerenciamento de depend\u00eancias e a constru\u00e7\u00e3o de pacotes em projetos Python. Para mais informa\u00e7\u00f5es e documenta\u00e7\u00e3o detalhada, voc\u00ea pode visitar a documenta\u00e7\u00e3o oficial do Poetry.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/ferramentas/python-poetry/#8-recursos-adicionais","title":"8. Recursos Adicionais","text":"<ul> <li>Documenta\u00e7\u00e3o do Poetry</li> <li>Reposit\u00f3rio no GitHub</li> <li>Guia de In\u00edcio R\u00e1pido</li> </ul> <p>Esses recursos podem ajud\u00e1-lo a se aprofundar ainda mais no uso do Poetry e em suas funcionalidades.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/","title":"Next.JS","text":"<p>O nextjs \u00e9 um framework que se utiliza de toda a mec\u00e2nica do react com o adicional que adiciona um sistema de roteamento, compila\u00e7\u00e3o e renderiza\u00e7\u00e3o no backend que fazem dele uma ferramenta completa para desenvolvimento web</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#1-arquitetura-de-paginas","title":"1. Arquitetura de P\u00e1ginas","text":"<p>O Next.js adota uma arquitetura baseada em p\u00e1ginas, onde cada arquivo dentro da pasta <code>/pages</code> se torna uma rota na aplica\u00e7\u00e3o. Por exemplo: - <code>pages/index.js</code> se torna a rota <code>/</code> - <code>pages/about.js</code> se torna a rota <code>/about</code></p> <p>Essa abordagem de roteamento autom\u00e1tico simplifica a estrutura do projeto e facilita a navega\u00e7\u00e3o entre diferentes partes da aplica\u00e7\u00e3o.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#2-renderizacao","title":"2. Renderiza\u00e7\u00e3o","text":"<p>O Next.js oferece diferentes m\u00e9todos de renderiza\u00e7\u00e3o para otimizar o desempenho e a experi\u00eancia do usu\u00e1rio:</p> <p>Claro! Vamos detalhar como usar a Renderiza\u00e7\u00e3o do Lado do Servidor (SSR) em aplica\u00e7\u00f5es web, especialmente no contexto do Next.js, e como distingui-la da Renderiza\u00e7\u00e3o do Lado do Cliente (Client-Side Rendering - CSR).</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#uso-da-renderizacao-do-lado-do-servidor-ssr","title":"Uso da Renderiza\u00e7\u00e3o do Lado do Servidor (SSR)","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#1-definicao-do-ssr","title":"1. Defini\u00e7\u00e3o do SSR","text":"<p>A Renderiza\u00e7\u00e3o do Lado do Servidor (SSR) refere-se \u00e0 t\u00e9cnica onde a gera\u00e7\u00e3o do HTML da p\u00e1gina ocorre no servidor, permitindo que o conte\u00fado seja enviado ao cliente j\u00e1 renderizado. Isso \u00e9 especialmente \u00fatil para SEO e para melhorar a experi\u00eancia do usu\u00e1rio, j\u00e1 que o conte\u00fado est\u00e1 dispon\u00edvel imediatamente quando a p\u00e1gina \u00e9 carregada.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#2-como-usar-ssr-no-nextjs","title":"2. Como Usar SSR no Next.js","text":"<p>Para implementar SSR no Next.js, voc\u00ea utiliza a fun\u00e7\u00e3o <code>getServerSideProps</code>. Esta fun\u00e7\u00e3o \u00e9 exportada de um componente de p\u00e1gina e \u00e9 chamada pelo Next.js no lado do servidor antes de renderizar a p\u00e1gina.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#exemplo-de-ssr","title":"Exemplo de SSR","text":"<pre><code>// pages/exemplo.js\nexport async function getServerSideProps(context) {\n  // Aqui voc\u00ea pode buscar dados de uma API ou banco de dados\n  const res = await fetch('https://api.exemplo.com/dados');\n  const dados = await res.json();\n\n  // Retorne os dados como props para o componente\n  return { props: { dados } };\n}\n\nconst Exemplo = ({ dados }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dados Carregados do Servidor&lt;/h1&gt;\n      &lt;pre&gt;{JSON.stringify(dados, null, 2)}&lt;/pre&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Exemplo;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#3-fluxo-de-funcionamento-do-ssr","title":"3. Fluxo de Funcionamento do SSR","text":"<ul> <li>Quando um usu\u00e1rio acessa a rota <code>/exemplo</code>, o Next.js chama a fun\u00e7\u00e3o <code>getServerSideProps</code>.</li> <li>O servidor faz a requisi\u00e7\u00e3o para a API, obt\u00e9m os dados e os retorna como props.</li> <li>O Next.js renderiza a p\u00e1gina no servidor com os dados recebidos e envia o HTML completo ao cliente.</li> <li>O cliente v\u00ea a p\u00e1gina j\u00e1 renderizada, melhorando o tempo de carregamento inicial e a experi\u00eancia do usu\u00e1rio.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#distinguir-ssr-de-client-side-rendering-csr","title":"Distinguir SSR de Client-Side Rendering (CSR)","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#1-definicao-do-csr","title":"1. Defini\u00e7\u00e3o do CSR","text":"<p>A Renderiza\u00e7\u00e3o do Lado do Cliente (CSR) \u00e9 uma t\u00e9cnica em que a maior parte do processamento para renderizar a p\u00e1gina \u00e9 feita no navegador do usu\u00e1rio. Isso significa que o HTML inicial enviado pelo servidor \u00e9 m\u00ednimo, e o conte\u00fado \u00e9 carregado dinamicamente atrav\u00e9s de chamadas de API ap\u00f3s a p\u00e1gina ser carregada.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#2-como-funciona-o-csr","title":"2. Como Funciona o CSR","text":"<ul> <li>O servidor envia um HTML b\u00e1sico com um arquivo JavaScript que cont\u00e9m a l\u00f3gica da aplica\u00e7\u00e3o.</li> <li>O JavaScript \u00e9 baixado e executado no navegador, que faz requisi\u00e7\u00f5es adicionais para buscar dados e renderizar a interface.</li> <li>O conte\u00fado \u00e9 exibido somente ap\u00f3s o JavaScript ser executado, o que pode resultar em uma experi\u00eancia de usu\u00e1rio menos eficiente, especialmente em conex\u00f5es lentas.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#exemplo-de-csr","title":"Exemplo de CSR","text":"<pre><code>// pages/csr.js\nimport { useEffect, useState } from 'react';\n\nconst Csr = () =&gt; {\n  const [dados, setDados] = useState(null);\n\n  useEffect(() =&gt; {\n    const fetchData = async () =&gt; {\n      const res = await fetch('https://api.exemplo.com/dados');\n      const data = await res.json();\n      setDados(data);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dados Carregados do Cliente&lt;/h1&gt;\n      {dados ? &lt;pre&gt;{JSON.stringify(dados, null, 2)}&lt;/pre&gt; : &lt;p&gt;Carregando...&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n};\n\nexport default Csr;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#3-comparacao-entre-ssr-e-csr","title":"3. Compara\u00e7\u00e3o entre SSR e CSR","text":"Caracter\u00edstica SSR CSR Onde o HTML \u00e9 gerado No servidor (antes de enviar ao cliente) No cliente (no navegador ap\u00f3s o carregamento) SEO Melhor, pois o conte\u00fado \u00e9 renderizado antes de ser enviado ao cliente Pode ser pior, pois motores de busca podem n\u00e3o indexar corretamente conte\u00fado carregado dinamicamente Tempo de Carregamento Inicial Mais r\u00e1pido, pois o HTML completo \u00e9 enviado Pode ser mais lento, pois o usu\u00e1rio espera o JavaScript ser baixado e executado Intera\u00e7\u00e3o e Navega\u00e7\u00e3o Pode ser mais lenta em navega\u00e7\u00f5es subsequentes devido ao carregamento do servidor Mais r\u00e1pida ap\u00f3s o carregamento inicial, pois a navega\u00e7\u00e3o pode ser feita sem recarregar a p\u00e1gina Uso de Recursos Pode consumir mais recursos no servidor devido ao processamento de cada requisi\u00e7\u00e3o Pode consumir mais recursos no cliente, pois o processamento \u00e9 feito no navegador"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#geracao-de-sites-estaticos-ssg","title":"Gera\u00e7\u00e3o de Sites Est\u00e1ticos (SSG)","text":"<p>As p\u00e1ginas s\u00e3o geradas no momento da constru\u00e7\u00e3o e servidas como arquivos est\u00e1ticos. Isso \u00e9 ideal para conte\u00fado que n\u00e3o muda frequentemente.</p> <pre><code>export async function getStaticProps() {\n  // Fetch data here\n  return { props: { data } };\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#geracao-de-paginas-estaticas-com-incremental-static-regeneration-isr","title":"Gera\u00e7\u00e3o de P\u00e1ginas Est\u00e1ticas com Incremental Static Regeneration (ISR)","text":"<p>Permite a atualiza\u00e7\u00e3o de p\u00e1ginas est\u00e1ticas ap\u00f3s a constru\u00e7\u00e3o inicial, garantindo que o conte\u00fado esteja sempre atualizado sem a necessidade de uma nova constru\u00e7\u00e3o da aplica\u00e7\u00e3o.</p> <pre><code>export async function getStaticProps() {\n  return {\n    props: { data },\n    revalidate: 10, // Revalidate every 10 seconds\n  };\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#3-api-routes","title":"3. API Routes","text":"<p>O Next.js permite que voc\u00ea crie APIs diretamente dentro do projeto, facilitando a constru\u00e7\u00e3o de endpoints sem a necessidade de um servidor separado. As rotas da API s\u00e3o criadas dentro da pasta <code>/api</code>.</p> <pre><code>// pages/api/hello.js\nexport default function handler(req, res) {\n  res.status(200).json({ message: 'Hello World' });\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#4-otimizacao-de-imagens","title":"4. Otimiza\u00e7\u00e3o de Imagens","text":"<p>O Next.js fornece um componente <code>&lt;Image /&gt;</code> que otimiza automaticamente as imagens, incluindo recursos como lazy loading e redimensionamento, melhorando o desempenho geral da aplica\u00e7\u00e3o.</p> <pre><code>import Image from 'next/image';\n\nfunction MeuComponente() {\n  return &lt;Image src=\"/imagem.jpg\" alt=\"Minha Imagem\" width={500} height={300} /&gt;;\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#5-estilizacao","title":"5. Estiliza\u00e7\u00e3o","text":"<p>O Next.js suporta v\u00e1rias abordagens de estiliza\u00e7\u00e3o, incluindo CSS, CSS Modules e bibliotecas CSS-in-JS. Isso permite que os desenvolvedores escolham a abordagem que melhor se adapta \u00e0s suas necessidades.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#6-divisao-de-codigo","title":"6. Divis\u00e3o de C\u00f3digo","text":"<p>O Next.js realiza a divis\u00e3o autom\u00e1tica de c\u00f3digo, o que significa que cada p\u00e1gina carrega apenas o c\u00f3digo necess\u00e1rio para ela. Isso resulta em tempos de carregamento mais r\u00e1pidos e melhor desempenho.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#7-suporte-a-typescript","title":"7. Suporte a TypeScript","text":"<p>O Next.js oferece suporte nativo ao TypeScript, permitindo que os desenvolvedores escrevam c\u00f3digo com tipagem est\u00e1tica, o que pode ajudar a detectar erros em tempo de desenvolvimento.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#8-internacionalizacao","title":"8. Internacionaliza\u00e7\u00e3o","text":"<p>O Next.js facilita a cria\u00e7\u00e3o de aplica\u00e7\u00f5es multil\u00edngues com suporte a rotas e conte\u00fados localizados, permitindo que voc\u00ea atenda a uma audi\u00eancia global.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#9-deploy-simples","title":"9. Deploy Simples","text":"<p>O Next.js \u00e9 otimizado para ser implantado de maneira simples, especialmente na plataforma Vercel, que \u00e9 a criadora do Next.js. Ele permite um fluxo de trabalho cont\u00ednuo com integra\u00e7\u00e3o f\u00e1cil a reposit\u00f3rios Git.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/nextjs/#10-performance-e-seo","title":"10. Performance e SEO","text":"<p>O Next.js \u00e9 projetado para oferecer alto desempenho e otimiza\u00e7\u00e3o para SEO (Search Engine Optimization). A renderiza\u00e7\u00e3o no servidor e a gera\u00e7\u00e3o de p\u00e1ginas est\u00e1ticas garantem que os motores de busca consigam indexar o conte\u00fado da aplica\u00e7\u00e3o facilmente.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/","title":"React","text":"<p>A teoria de opera\u00e7\u00e3o do React \u00e9 baseada em princ\u00edpios fundamentais que permitem a constru\u00e7\u00e3o de interfaces de usu\u00e1rio de forma eficiente e reativa. Abaixo est\u00e3o os principais conceitos e mecanismos que sustentam o funcionamento do React.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#teoria-de-operacao-do-react","title":"Teoria de Opera\u00e7\u00e3o do React","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#1-componentes","title":"1. Componentes","text":"<p>Os componentes s\u00e3o a base da arquitetura do React. Eles permitem dividir a interface em partes menores e reutiliz\u00e1veis. Existem dois tipos principais de componentes:</p> <ul> <li>Componentes Funcionais: S\u00e3o fun\u00e7\u00f5es JavaScript que retornam elementos React. Com a introdu\u00e7\u00e3o dos Hooks, eles podem gerenciar estado e efeitos colaterais.</li> </ul> <p><code>javascript   function MeuComponente() {     return &lt;div&gt;Ol\u00e1, mundo!&lt;/div&gt;;   }</code></p> <ul> <li>Componentes de Classe: Usam a sintaxe de classe do JavaScript e podem ter m\u00e9todos de ciclo de vida. Embora ainda sejam suportados, seu uso est\u00e1 diminuindo em favor dos componentes funcionais.</li> </ul> <p><code>javascript   class MeuComponente extends React.Component {     render() {       return &lt;div&gt;Ol\u00e1, mundo!&lt;/div&gt;;     }   }</code></p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#2-jsx-javascript-xml","title":"2. JSX (JavaScript XML)","text":"<p>JSX \u00e9 uma sintaxe que permite escrever HTML dentro de arquivos JavaScript. Ele facilita a cria\u00e7\u00e3o de elementos React e torna o c\u00f3digo mais leg\u00edvel.</p> <pre><code>const elemento = &lt;h1&gt;Meu T\u00edtulo&lt;/h1&gt;;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#3-props-propriedades","title":"3. Props (Propriedades)","text":"<p>As <code>props</code> s\u00e3o um mecanismo para passar dados de componentes pais para componentes filhos. Elas s\u00e3o imut\u00e1veis e ajudam a criar componentes que podem ser reutilizados em diferentes contextos.</p> <pre><code>function Saudacao(props) {\n  return &lt;h1&gt;Ol\u00e1, {props.nome}!&lt;/h1&gt;;\n}\n\n// Uso\n&lt;Saudacao nome=\"Maria\" /&gt;\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#4-state-estado","title":"4. State (Estado)","text":"<p>O <code>state</code> \u00e9 um objeto que armazena dados que podem mudar ao longo do ciclo de vida de um componente. Altera\u00e7\u00f5es no estado acionam re-renderiza\u00e7\u00f5es do componente e de seus filhos.</p> <pre><code>import React, { useState } from 'react';\n\nfunction Contador() {\n  const [contagem, setContagem] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Contagem: {contagem}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setContagem(contagem + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#5-ciclo-de-vida-dos-componentes","title":"5. Ciclo de Vida dos Componentes","text":"<p>Os componentes t\u00eam um ciclo de vida que abrange v\u00e1rias fases, como montagem, atualiza\u00e7\u00e3o e desmontagem. Os componentes de classe t\u00eam m\u00e9todos espec\u00edficos (como <code>componentDidMount</code>, <code>componentDidUpdate</code>, e <code>componentWillUnmount</code>) que permitem a execu\u00e7\u00e3o de c\u00f3digo em diferentes momentos do ciclo de vida. Nos componentes funcionais, os Hooks, como <code>useEffect</code>, desempenham um papel semelhante.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#6-renderizacao","title":"6. Renderiza\u00e7\u00e3o","text":"<p>A renderiza\u00e7\u00e3o no React \u00e9 um processo eficiente. Quando o estado ou as props de um componente mudam, o React re-renderiza esse componente e seus filhos. O React utiliza um algoritmo de reconcilia\u00e7\u00e3o para determinar quais partes da \u00e1rvore de componentes precisam ser atualizadas, minimizando o n\u00famero de opera\u00e7\u00f5es diretas no DOM.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#7-virtual-dom","title":"7. Virtual DOM","text":"<p>O React utiliza um conceito chamado Virtual DOM, que \u00e9 uma representa\u00e7\u00e3o leve do DOM real. Quando h\u00e1 uma mudan\u00e7a no estado ou nas props, o React faz uma atualiza\u00e7\u00e3o no Virtual DOM. Em seguida, ele compara o Virtual DOM com o DOM real e calcula a diferen\u00e7a (diffing). Apenas as partes que mudaram s\u00e3o atualizadas no DOM real, o que melhora o desempenho.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#8-hooks","title":"8. Hooks","text":"<p>Os Hooks s\u00e3o fun\u00e7\u00f5es que permitem que componentes funcionais tenham acesso a recursos de estado e efeitos colaterais. Exemplos de Hooks incluem <code>useState</code>, <code>useEffect</code>, <code>useContext</code>, entre outros.</p> <pre><code>import React, { useState, useEffect } from 'react';\n\nfunction Exemplo() {\n  const [contador, setContador] = useState(0);\n\n  useEffect(() =&gt; {\n    console.log(`O contador \u00e9: ${contador}`);\n  }, [contador]);\n\n  return &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;Incrementar&lt;/button&gt;;\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#9-context-api","title":"9. Context API","text":"<p>A Context API permite que voc\u00ea compartilhe dados entre componentes sem precisar passar props manualmente em cada n\u00edvel da \u00e1rvore de componentes. \u00c9 \u00fatil para gerenciar estados globais, como temas ou autentica\u00e7\u00e3o.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/react/#10-roteamento","title":"10. Roteamento","text":"<p>O React n\u00e3o possui um roteador embutido, mas bibliotecas como o React Router permitem que voc\u00ea implemente navega\u00e7\u00e3o entre diferentes componentes e p\u00e1ginas em uma aplica\u00e7\u00e3o React.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/","title":"Spring boot","text":"<p>O Spring Boot \u00e9 um framework baseado no ecossistema Spring, que visa simplificar o desenvolvimento de aplica\u00e7\u00f5es Java. Sua filosofia \u00e9 proporcionar uma experi\u00eancia de desenvolvimento r\u00e1pida, produtiva e de f\u00e1cil configura\u00e7\u00e3o, permitindo que os desenvolvedores se concentrem nas funcionalidades do software, em vez de se preocupar com a configura\u00e7\u00e3o de infraestrutura.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#filosofia-do-spring-boot","title":"Filosofia do Spring Boot","text":"<p>O Spring Boot se destaca por sua filosofia de facilitar o desenvolvimento de aplica\u00e7\u00f5es Java, aderindo a pr\u00e1ticas recomendadas como DDD e SOLID. Al\u00e9m disso, sua abordagem de configura\u00e7\u00e3o autom\u00e1tica e suporte a AOP tornam o desenvolvimento mais eficiente e organizado. Isso permite que os desenvolvedores se concentrem nas caracter\u00edsticas espec\u00edficas do dom\u00ednio e no design da aplica\u00e7\u00e3o, ao inv\u00e9s de se perderem em detalhes de configura\u00e7\u00e3o e infraestrutura. Al\u00e9m disso, o conceito de beans permite uma gest\u00e3o eficiente e flex\u00edvel dos componentes da aplica\u00e7\u00e3o.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#principais-caracteristicas-do-spring-boot","title":"Principais Caracter\u00edsticas do Spring Boot:","text":"<ul> <li>Configura\u00e7\u00e3o Autom\u00e1tica: O Spring Boot automaticamente configura a aplica\u00e7\u00e3o com base nas depend\u00eancias que voc\u00ea adiciona, reduzindo a necessidade de configura\u00e7\u00e3o manual.</li> <li>Standalone: As aplica\u00e7\u00f5es Spring Boot podem ser executadas como aplica\u00e7\u00f5es Java independentes, sem a necessidade de um servidor de aplicativos externo, pois incluem um servidor embutido (como Tomcat).</li> <li>Pronto para Produ\u00e7\u00e3o: Inclui recursos de monitoramento e gerenciamento prontos para produ\u00e7\u00e3o, como m\u00e9tricas e health checks.</li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#beans","title":"Beans","text":"<p>Um bean \u00e9 um objeto que \u00e9 instanciado, configurado e gerenciado pelo cont\u00eainer de Inje\u00e7\u00e3o de Depend\u00eancia (IoC) do Spring Framework. A defini\u00e7\u00e3o de um bean \u00e9 fundamental para a forma como o Spring Boot lida com a configura\u00e7\u00e3o e a gest\u00e3o de objetos em uma aplica\u00e7\u00e3o.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#caracteristicas-dos-beans","title":"Caracter\u00edsticas dos Beans","text":"<ol> <li>Inst\u00e2ncia Gerenciada: O Spring se encarrega de criar e gerenciar o ciclo de vida dos beans.</li> <li>Configura\u00e7\u00e3o: Beans podem ser configurados atrav\u00e9s de anota\u00e7\u00f5es ou arquivos de configura\u00e7\u00e3o XML.</li> <li>Inje\u00e7\u00e3o de Depend\u00eancia: O Spring permite que os beans sejam injetados em outros beans, facilitando a constru\u00e7\u00e3o de aplica\u00e7\u00f5es desacopladas.</li> <li>Escopo: Beans podem ter diferentes escopos, como singleton (uma \u00fanica inst\u00e2ncia por cont\u00eainer) ou prototype (uma nova inst\u00e2ncia a cada solicita\u00e7\u00e3o).</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#como-definir-um-bean","title":"Como Definir um Bean","text":"<p>Existem diversas maneiras de definir um bean no Spring:</p> <ol> <li>Usando Anota\u00e7\u00f5es:</li> <li><code>@Component</code>: Indica que a classe \u00e9 um bean gen\u00e9rico.</li> <li><code>@Service</code>: Usada para classes de servi\u00e7o.</li> <li><code>@Repository</code>: Usada para classes de acesso a dados.</li> <li><code>@Controller</code>: Usada para classes de controle em aplica\u00e7\u00f5es web.</li> </ol> <p>Exemplo:</p> <pre><code>import org.springframework.stereotype.Component;\n\n@Component\npublic class MyBean {\n    public void doSomething() {\n        System.out.println(\"Fazendo algo!\");\n    }\n}\n</code></pre> <ol> <li>Usando o M\u00e9todo de F\u00e1brica:</li> <li>Voc\u00ea tamb\u00e9m pode definir um bean em um m\u00e9todo que retorna uma inst\u00e2ncia do objeto desejado, anotando o m\u00e9todo com <code>@Bean</code>.</li> </ol> <p>Exemplo:</p> <pre><code>import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class MyConfig {\n    @Bean\n    public MyBean myBean() {\n        return new MyBean();\n    }\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#ciclo-de-vida-de-um-bean","title":"Ciclo de Vida de um Bean","text":"<p>O ciclo de vida de um bean gerenciado pelo Spring pode ser dividido nas seguintes etapas:</p> <ol> <li>Instancia\u00e7\u00e3o: O Spring cria uma nova inst\u00e2ncia do bean.</li> <li>Popula\u00e7\u00e3o de Propriedades: O Spring injeta depend\u00eancias necess\u00e1rias no bean.</li> <li>Inicializa\u00e7\u00e3o: O Spring chama m\u00e9todos de inicializa\u00e7\u00e3o, se definidos (por exemplo, o m\u00e9todo anotado com <code>@PostConstruct</code>).</li> <li>Uso: O bean est\u00e1 pronto para ser usado pela aplica\u00e7\u00e3o.</li> <li>Destrui\u00e7\u00e3o: Quando o bean n\u00e3o \u00e9 mais necess\u00e1rio, o Spring chama m\u00e9todos de destrui\u00e7\u00e3o, se definidos (por exemplo, o m\u00e9todo anotado com <code>@PreDestroy</code>).</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#exemplo-de-ciclo-de-vida-de-um-bean","title":"Exemplo de Ciclo de Vida de um Bean","text":"<p>Classe de Bean:</p> <pre><code>import javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\n\n@Component\npublic class MyLifecycleBean {\n\n    @PostConstruct\n    public void init() {\n        System.out.println(\"Bean criado e inicializado!\");\n    }\n\n    @PreDestroy\n    public void cleanup() {\n        System.out.println(\"Bean sendo destru\u00eddo!\");\n    }\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#uso-de-beans-na-aplicacao","title":"Uso de Beans na Aplica\u00e7\u00e3o","text":"<p>Os beans podem ser injetados em outros componentes do Spring, como servi\u00e7os e controladores, utilizando a inje\u00e7\u00e3o de depend\u00eancia por meio da anota\u00e7\u00e3o <code>@Autowired</code>.</p> <p>Exemplo de Inje\u00e7\u00e3o de Depend\u00eancia:</p> <pre><code>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class MyService {\n\n    @Autowired\n    private MyBean myBean;\n\n    public void performAction() {\n        myBean.doSomething();\n    }\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#como-o-spring-boot-nos-ajuda-com-as-abordagens-desejadas-para-o-projeto","title":"Como o Spring Boot nos ajuda com as abordagens desejadas para o projeto","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#principios-solid","title":"Princ\u00edpios SOLID","text":"<p>Os princ\u00edpios SOLID s\u00e3o um conjunto de diretrizes que ajudam a criar software de forma mais clara e compreens\u00edvel. Esses princ\u00edpios incluem:</p> <ol> <li> <p>S - Single Responsibility Principle (SRP): Uma classe deve ter apenas uma raz\u00e3o para mudar. No Spring Boot, isso \u00e9 alcan\u00e7ado pela separa\u00e7\u00e3o de responsabilidades em diferentes camadas (controladores, servi\u00e7os, reposit\u00f3rios).</p> </li> <li> <p>O - Open/Closed Principle (OCP): Entidades de software devem ser abertas para extens\u00e3o, mas fechadas para modifica\u00e7\u00e3o. Isso pode ser implementado usando interfaces e heran\u00e7a, permitindo que novos comportamentos sejam adicionados sem alterar o c\u00f3digo existente.</p> </li> <li> <p>L - Liskov Substitution Principle (LSP): Objetos de uma classe derivada devem poder substituir objetos da classe base sem alterar o comportamento desejado. O Spring Boot permite que voc\u00ea use interfaces e classes abstratas para garantir isso.</p> </li> <li> <p>I - Interface Segregation Principle (ISP): Uma classe n\u00e3o deve ser for\u00e7ada a implementar interfaces que n\u00e3o usa. O Spring Boot promove a cria\u00e7\u00e3o de interfaces espec\u00edficas que podem ser implementadas por diferentes classes.</p> </li> <li> <p>D - Dependency Inversion Principle (DIP): Dependa de abstra\u00e7\u00f5es, n\u00e3o de classes concretas. O Spring Boot utiliza inje\u00e7\u00e3o de depend\u00eancia, permitindo que voc\u00ea trabalhe com interfaces e abstra\u00e7\u00f5es em vez de implementa\u00e7\u00f5es concretas.</p> </li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#teoria-de-operacao-do-spring-boot","title":"Teoria de Opera\u00e7\u00e3o do Spring Boot","text":"<p>O Spring Boot opera com base no conceito de configura\u00e7\u00e3o autom\u00e1tica e conven\u00e7\u00f5es sobre configura\u00e7\u00f5es. Quando uma aplica\u00e7\u00e3o Spring Boot \u00e9 iniciada, o framework examina as depend\u00eancias presentes no classpath e configura automaticamente os beans necess\u00e1rios.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#ciclo-de-vida-da-aplicacao","title":"Ciclo de Vida da Aplica\u00e7\u00e3o","text":"<ol> <li>Inicializa\u00e7\u00e3o: O Spring Boot inicializa o contexto da aplica\u00e7\u00e3o e carrega todos os beans definidos.</li> <li>Configura\u00e7\u00e3o Autom\u00e1tica: O Spring Boot aplica a configura\u00e7\u00e3o autom\u00e1tica com base nas depend\u00eancias encontradas, como a configura\u00e7\u00e3o de um banco de dados quando <code>spring-boot-starter-data-jpa</code> est\u00e1 presente.</li> <li>Inje\u00e7\u00e3o de Depend\u00eancia: A inje\u00e7\u00e3o de depend\u00eancia \u00e9 realizada, permitindo que os componentes colaborem entre si.</li> <li>Execu\u00e7\u00e3o da Aplica\u00e7\u00e3o: A aplica\u00e7\u00e3o come\u00e7a a responder a requisi\u00e7\u00f5es, utilizando os controladores e servi\u00e7os definidos.</li> </ol>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#programacao-orientada-a-aspectos-aop","title":"Programa\u00e7\u00e3o Orientada a Aspectos (AOP)","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#o-que-e-aop","title":"O que \u00e9 AOP?","text":"<p>A Programa\u00e7\u00e3o Orientada a Aspectos (AOP) \u00e9 uma t\u00e9cnica que permite modularizar preocupa\u00e7\u00f5es transversais, como logging, seguran\u00e7a e gerenciamento de transa\u00e7\u00f5es, separando-as da l\u00f3gica de neg\u00f3cio principal.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#como-o-spring-abraca-aop","title":"Como o Spring Abra\u00e7a AOP","text":"<p>O Spring Framework fornece suporte robusto para AOP, permitindo que voc\u00ea defina aspectos e aplique l\u00f3gica de maneira declarativa.</p> <p>Principais Conceitos:</p> <ul> <li> <p>Aspecto: Um m\u00f3dulo que cont\u00e9m preocupa\u00e7\u00f5es transversais.</p> </li> <li> <p>Join Point: Um ponto na execu\u00e7\u00e3o da aplica\u00e7\u00e3o, como a chamada de um m\u00e9todo.</p> </li> <li> <p>Advice: A a\u00e7\u00e3o a ser executada em um Join Point.</p> </li> <li> <p>Pointcut: Uma express\u00e3o que define onde o Advice deve ser aplicado.</p> </li> </ul>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#exemplo-de-aop-no-spring-boot","title":"Exemplo de AOP no Spring Boot","text":"<p>Definindo um Aspecto:</p> <pre><code>import org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class LoggingAspect {\n    @Before(\"execution(* com.example.service.*.*(..))\") // Aplica antes da execu\u00e7\u00e3o de qualquer m\u00e9todo nos servi\u00e7os\n    public void logBeforeMethod() {\n        System.out.println(\"M\u00e9todo chamado...\");\n    }\n}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/springboot/#uso-de-aop","title":"Uso de AOP","text":"<p>Ao utilizar AOP, voc\u00ea pode facilmente adicionar logging, seguran\u00e7a ou outras funcionalidades sem modificar o c\u00f3digo existente nas classes de servi\u00e7o:</p> <pre><code>@Service\npublic class OrderServiceImpl implements OrderService {\n    public void placeOrder(Order order) {\n        // l\u00f3gica de neg\u00f3cio\n        orderRepository.save(order);\n    }\n}\n</code></pre> <p>O <code>logBeforeMethod</code> ser\u00e1 chamado automaticamente antes de qualquer m\u00e9todo no pacote <code>com.example.service</code>, permitindo que voc\u00ea insira l\u00f3gica de logging de maneira limpa e n\u00e3o intrusiva.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/","title":"Express JS","text":"<p>O Express.js \u00e9 um framework minimalista e flex\u00edvel para Node.js que fornece um conjunto robusto de recursos para desenvolver aplica\u00e7\u00f5es web e APIs. Ele \u00e9 amplamente utilizado devido \u00e0 sua simplicidade e extensibilidade. A seguir, apresento uma vis\u00e3o detalhada da teoria de opera\u00e7\u00e3o do Express.js.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#teoria-de-operacao-do-expressjs","title":"Teoria de Opera\u00e7\u00e3o do Express.js","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#1-arquitetura-baseada-em-middleware","title":"1. Arquitetura Baseada em Middleware","text":"<p>O Express utiliza um padr\u00e3o arquitetural baseado em middleware, onde fun\u00e7\u00f5es intermedi\u00e1rias (middleware) processam requisi\u00e7\u00f5es e respostas. Cada middleware pode modificar a requisi\u00e7\u00e3o e a resposta ou encerrar o ciclo de requisi\u00e7\u00e3o/resposta. Isso permite a adi\u00e7\u00e3o de funcionalidades de forma modular.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#estrutura-de-um-middleware","title":"Estrutura de um Middleware","text":"<p>Um middleware \u00e9 uma fun\u00e7\u00e3o que recebe tr\u00eas par\u00e2metros: <code>req</code> (requisi\u00e7\u00e3o), <code>res</code> (resposta) e <code>next</code> (uma fun\u00e7\u00e3o que passa o controle para o pr\u00f3ximo middleware).</p> <pre><code>const meuMiddleware = (req, res, next) =&gt; {\n  console.log('Requisi\u00e7\u00e3o recebida!');\n  next(); // Chama o pr\u00f3ximo middleware\n};\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#2-instalacao-e-configuracao","title":"2. Instala\u00e7\u00e3o e Configura\u00e7\u00e3o","text":"<p>Para iniciar um projeto com Express, voc\u00ea precisa instalar a biblioteca e criar uma inst\u00e2ncia da aplica\ufffd\ufffd\u00e3o.</p> <pre><code>npm install express\n</code></pre> <pre><code>const express = require('express');\nconst app = express();\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#3-roteamento","title":"3. Roteamento","text":"<p>O Express permite definir rotas para diferentes endpoints da aplica\u00e7\u00e3o. As rotas podem responder a diferentes m\u00e9todos HTTP, como GET, POST, PUT e DELETE.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#exemplo-de-roteamento","title":"Exemplo de Roteamento","text":"<pre><code>app.get('/usuarios', (req, res) =&gt; {\n  res.send('Lista de usu\u00e1rios');\n});\n\napp.post('/usuarios', (req, res) =&gt; {\n  res.send('Usu\u00e1rio criado');\n});\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#4-manipulacao-de-requisicoes-e-respostas","title":"4. Manipula\u00e7\u00e3o de Requisi\u00e7\u00f5es e Respostas","text":"<p>O Express simplifica o trabalho com objetos de requisi\u00e7\u00e3o e resposta, permitindo que voc\u00ea acesse dados da requisi\u00e7\u00e3o (como par\u00e2metros, corpo e cabe\u00e7alhos) e envie respostas de forma f\u00e1cil.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#acesso-a-parametros-e-corpo-da-requisicao","title":"Acesso a Par\u00e2metros e Corpo da Requisi\u00e7\u00e3o","text":"<pre><code>app.get('/usuarios/:id', (req, res) =&gt; {\n  const usuarioId = req.params.id; // Acesso a par\u00e2metros da URL\n  res.send(`Usu\u00e1rio com ID: ${usuarioId}`);\n});\n\n// Para manipular o corpo da requisi\u00e7\u00e3o, \u00e9 necess\u00e1rio usar um middleware como body-parser\napp.use(express.json());\napp.post('/usuarios', (req, res) =&gt; {\n  const novoUsuario = req.body; // Acesso ao corpo da requisi\u00e7\u00e3o\n  res.send(`Usu\u00e1rio criado: ${JSON.stringify(novoUsuario)}`);\n});\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#5-middleware","title":"5. Middleware","text":"<p>Os middlewares s\u00e3o essenciais no Express, permitindo adicionar funcionalidades como autentica\u00e7\u00e3o, manipula\u00e7\u00e3o de erros, logging, entre outros.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#exemplo-de-middleware-de-registro","title":"Exemplo de Middleware de Registro","text":"<pre><code>app.use((req, res, next) =&gt; {\n  console.log(`${req.method} ${req.url}`);\n  next(); // Passa para o pr\u00f3ximo middleware\n});\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#6-tratamento-de-erros","title":"6. Tratamento de Erros","text":"<p>O Express permite definir middlewares espec\u00edficos para tratamento de erros. Um middleware de erro deve ter quatro par\u00e2metros: <code>err</code>, <code>req</code>, <code>res</code>, e <code>next</code>.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#exemplo-de-middleware-de-tratamento-de-erros","title":"Exemplo de Middleware de Tratamento de Erros","text":"<pre><code>app.use((err, req, res, next) =&gt; {\n  console.error(err.stack);\n  res.status(500).send('Algo deu errado!');\n});\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#7-servindo-arquivos-estaticos","title":"7. Servindo Arquivos Est\u00e1ticos","text":"<p>O Express pode servir arquivos est\u00e1ticos (como HTML, CSS e JavaScript) utilizando o middleware <code>express.static</code>.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#exemplo-de-servir-arquivos-estaticos","title":"Exemplo de Servir Arquivos Est\u00e1ticos","text":"<pre><code>app.use(express.static('public'));\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#8-conexao-com-bancos-de-dados","title":"8. Conex\u00e3o com Bancos de Dados","text":"<p>O Express pode se conectar a bancos de dados, como MongoDB, MySQL, etc., utilizando bibliotecas apropriadas e middlewares para executar opera\u00e7\u00f5es CRUD.</p> <pre><code>const mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/meubanco', { useNewUrlParser: true });\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#9-aplicacoes-em-tempo-real","title":"9. Aplica\u00e7\u00f5es em Tempo Real","text":"<p>O Express pode ser utilizado em conjunto com bibliotecas como Socket.io para criar aplica\u00e7\u00f5es em tempo real, permitindo comunica\u00e7\u00e3o bidirecional entre o cliente e o servidor.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/express/#10-implantacao","title":"10. Implanta\u00e7\u00e3o","text":"<p>Uma aplica\u00e7\u00e3o Express pode ser implantada em diferentes ambientes, como servidores dedicados, servi\u00e7os de cloud (como Heroku, AWS) ou cont\u00eaineres Docker, tornando-a altamente flex\u00edvel.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/","title":"FastAPI","text":"<p>O FastAPI \u00e9 um framework moderno e de alto desempenho para construir APIs em Python. Ele \u00e9 projetado para ser r\u00e1pido e f\u00e1cil de usar, aproveitando os recursos do Python moderno, como type hints, al\u00e9m de fornecer suporte nativo para valida\u00e7\u00e3o de dados, documenta\u00e7\u00e3o autom\u00e1tica e muito mais. Vamos explorar a teoria de opera\u00e7\u00e3o do FastAPI.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#teoria-de-operacao-do-fastapi","title":"Teoria de Opera\u00e7\u00e3o do FastAPI","text":""},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#1-arquitetura-baseada-em-asgi","title":"1. Arquitetura Baseada em ASGI","text":"<p>O FastAPI \u00e9 constru\u00eddo sobre o protocolo ASGI (Asynchronous Server Gateway Interface), que permite a constru\u00e7\u00e3o de aplica\u00e7\u00f5es ass\u00edncronas e escal\u00e1veis. Isso significa que ele pode lidar com um grande n\u00famero de conex\u00f5es simult\u00e2neas de forma eficiente, utilizando recursos de programa\u00e7\u00e3o ass\u00edncrona do Python.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#2-instalacao-e-configuracao","title":"2. Instala\u00e7\u00e3o e Configura\u00e7\u00e3o","text":"<p>Para come\u00e7ar a usar o FastAPI, voc\u00ea precisa instal\u00e1-lo, juntamente com um servidor ASGI, como o Uvicorn:</p> <pre><code>pip install fastapi uvicorn\n</code></pre> <p>Voc\u00ea pode iniciar uma aplica\u00e7\u00e3o FastAPI b\u00e1sica da seguinte maneira:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"mensagem\": \"Ol\u00e1, mundo!\"}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#3-roteamento","title":"3. Roteamento","text":"<p>O FastAPI permite definir rotas para diferentes endpoints de forma muito simples. Voc\u00ea pode usar decoradores para associar fun\u00e7\u00f5es a m\u00e9todos HTTP (GET, POST, PUT, DELETE, etc.).</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#exemplo-de-roteamento","title":"Exemplo de Roteamento","text":"<pre><code>@app.get(\"/usuarios/{usuario_id}\")\nasync def read_usuario(usuario_id: int):\n    return {\"usuario_id\": usuario_id}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#4-validacao-de-dados","title":"4. Valida\u00e7\u00e3o de Dados","text":"<p>Uma das caracter\u00edsticas mais poderosas do FastAPI \u00e9 a valida\u00e7\u00e3o autom\u00e1tica de dados. Voc\u00ea pode usar classes do Pydantic para definir modelos de dados e o FastAPI validar\u00e1 automaticamente as requisi\u00e7\u00f5es baseadas nesses modelos.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#exemplo-de-validacao-de-dados","title":"Exemplo de Valida\u00e7\u00e3o de Dados","text":"<pre><code>from pydantic import BaseModel\n\nclass Usuario(BaseModel):\n    nome: str\n    idade: int\n\n@app.post(\"/usuarios/\")\nasync def create_usuario(usuario: Usuario):\n    return {\"usuario\": usuario}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#5-documentacao-automatica","title":"5. Documenta\u00e7\u00e3o Autom\u00e1tica","text":"<p>O FastAPI gera automaticamente documenta\u00e7\u00e3o interativa da API usando Swagger UI e ReDoc. Voc\u00ea pode acessar a documenta\u00e7\u00e3o em <code>/docs</code> e <code>/redoc</code>.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#6-manipulacao-de-erros","title":"6. Manipula\u00e7\u00e3o de Erros","text":"<p>O FastAPI permite que voc\u00ea defina manipuladores de erros personalizados, que podem ser usados para retornar respostas significativas em caso de falhas.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#exemplo-de-manipulacao-de-erros","title":"Exemplo de Manipula\u00e7\u00e3o de Erros","text":"<pre><code>from fastapi import HTTPException\n\n@app.get(\"/usuarios/{usuario_id}\")\nasync def read_usuario(usuario_id: int):\n    if usuario_id not in usuarios:\n        raise HTTPException(status_code=404, detail=\"Usu\u00e1rio n\u00e3o encontrado\")\n    return {\"usuario\": usuarios[usuario_id]}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#7-middleware","title":"7. Middleware","text":"<p>O FastAPI suporta middleware, que s\u00e3o fun\u00e7\u00f5es que podem ser executadas antes ou depois do processamento de uma requisi\u00e7\u00e3o. Eles podem ser usados para autentica\u00e7\u00e3o, logging, entre outros.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#exemplo-de-middleware","title":"Exemplo de Middleware","text":"<pre><code>from starlette.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#8-autenticacao-e-autorizacao","title":"8. Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o","text":"<p>O FastAPI permite implementar autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o de forma simples, utilizando depend\u00eancias e seguran\u00e7a baseada em token.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#exemplo-de-autenticacao","title":"Exemplo de Autentica\u00e7\u00e3o","text":"<pre><code>from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    # L\u00f3gica de autentica\u00e7\u00e3o aqui\n    return {\"access_token\": form_data.username, \"token_type\": \"bearer\"}\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#9-suporte-a-requests-assincronas","title":"9. Suporte a Requests Ass\u00edncronas","text":"<p>O FastAPI permite o uso de opera\u00e7\u00f5es ass\u00edncronas, o que \u00e9 \u00fatil para chamadas a APIs externas ou opera\u00e7\u00f5es de I/O que podem levar tempo.</p>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#exemplo-de-operacoes-assincronas","title":"Exemplo de Opera\u00e7\u00f5es Ass\u00edncronas","text":"<pre><code>import httpx\n\n@app.get(\"/external-api/\")\nasync def get_external_data():\n    async with httpx.AsyncClient() as client:\n        response = await client.get('https://api.exemplo.com/dados')\n    return response.json()\n</code></pre>"},{"location":"conte%C3%BAdo_did%C3%A1tico/frameworks/microframeworks/fastapi/#10-implantacao","title":"10. Implanta\u00e7\u00e3o","text":"<p>O FastAPI pode ser implantado em qualquer servidor ASGI como Uvicorn ou Daphne, e pode ser facilmente integrado em cont\u00eaineres Docker ou servi\u00e7os de nuvem como AWS, Google Cloud e Azure.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/","title":"Ubuntu","text":"<p>Este documento fornece um passo a passo sobre como instalar v\u00e1rias ferramentas de desenvolvimento, incluindo OpenJDK 17, Python 3, Docker, Node.js, Maven, Jest e MkDocs em um sistema Ubuntu. Ao final, ser\u00e1 apresentada uma descri\u00e7\u00e3o de cada pacote instalado.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#passo-a-passo","title":"Passo a Passo","text":""},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#1-atualizar-a-lista-de-pacotes","title":"1. Atualizar a Lista de Pacotes","text":"<pre><code>apt update\n</code></pre> <p>Descri\u00e7\u00e3o: Este comando atualiza a lista de pacotes dispon\u00edveis e suas vers\u00f5es no reposit\u00f3rio. \u00c9 importante executar este passo antes de instalar qualquer pacote, pois garante que voc\u00ea esteja instalando as vers\u00f5es mais recentes e est\u00e1veis dos softwares.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#2-instalar-openjdk-17-python-3-maven-e-ferramentas-adicionais","title":"2. Instalar OpenJDK 17, Python 3, Maven, e Ferramentas Adicionais","text":"<pre><code>apt install -y git openjdk-17-jdk maven python3 python3-pip python3-poetry pipx nodejs npm apt-transport-https ca-certificates curl software-properties-common\n</code></pre> <p>Descri\u00e7\u00e3o:</p> <ul> <li> <p>openjdk-17-jdk: \u00c9 a implementa\u00e7\u00e3o de c\u00f3digo aberto da plataforma Java. O JDK (Java Development Kit) \u00e9 necess\u00e1rio para desenvolver e executar aplica\u00e7\u00f5es Java.</p> </li> <li> <p>maven: \u00c9 uma ferramenta de gerenciamento de projetos e automa\u00e7\u00e3o de builds para projetos Java. Facilita a constru\u00e7\u00e3o, gerenciamento de depend\u00eancias e documenta\u00e7\u00e3o do projeto.</p> </li> <li> <p>python3: \u00c9 a linguagem de programa\u00e7\u00e3o Python, amplamente utilizada para desenvolvimento web, automa\u00e7\u00e3o, an\u00e1lise de dados e muito mais.</p> </li> <li> <p>python3-pip: \u00c9 o gerenciador de pacotes para Python, permitindo que voc\u00ea instale e gerencie bibliotecas e depend\u00eancias de Python.</p> </li> <li> <p>python3-poetry: \u00c9 uma ferramenta para gerenciar depend\u00eancias e empacotar projetos Python. Facilita a cria\u00e7\u00e3o e manuten\u00e7\u00e3o de ambientes de desenvolvimento.</p> </li> <li> <p>pipx: \u00c9 uma ferramenta para instalar e executar aplicativos Python em ambientes isolados. Permite que voc\u00ea instale pacotes Python globalmente sem conflitos.</p> </li> <li> <p>nodejs: \u00c9 um ambiente de execu\u00e7\u00e3o JavaScript que permite a execu\u00e7\u00e3o de c\u00f3digo JavaScript no lado do servidor.</p> </li> <li> <p>npm: \u00c9 o gerenciador de pacotes para Node.js, usado para instalar bibliotecas e pacotes JavaScript.</p> </li> <li> <p>apt-transport-https: Permite que o APT use HTTPS para acessar reposit\u00f3rios de pacotes, melhorando a seguran\u00e7a.</p> </li> <li> <p>ca-certificates: \u00c9 um pacote que cont\u00e9m certificados de autoridades de certifica\u00e7\u00e3o, garantindo conex\u00f5es seguras.</p> </li> <li> <p>curl: \u00c9 uma ferramenta de linha de comando para transferir dados usando URLs, frequentemente utilizada para baixar arquivos e acessar APIs.</p> </li> <li> <p>software-properties-common: Fornece um conjunto de ferramentas para gerenciar reposit\u00f3rios de software.</p> </li> </ul>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#3-adicionar-o-repositorio-do-docker","title":"3. Adicionar o Reposit\u00f3rio do Docker","text":"<pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n</code></pre> <p>Descri\u00e7\u00e3o: Esses comandos adicionam a chave GPG do Docker e o reposit\u00f3rio oficial do Docker ao sistema. Isso \u00e9 necess\u00e1rio para garantir que voc\u00ea esteja instalando o Docker a partir de uma fonte confi\u00e1vel e que as atualiza\u00e7\u00f5es sejam corretamente gerenciadas.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#4-atualizar-a-lista-de-pacotes-novamente","title":"4. Atualizar a Lista de Pacotes Novamente","text":"<pre><code>apt update\n</code></pre> <p>Descri\u00e7\u00e3o: Ap\u00f3s adicionar o reposit\u00f3rio do Docker, \u00e9 necess\u00e1rio atualizar a lista de pacotes novamente para incluir os pacotes dispon\u00edveis a partir do novo reposit\u00f3rio.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#5-instalar-o-docker","title":"5. Instalar o Docker","text":"<pre><code>apt install -y docker-ce\n</code></pre> <p>Descri\u00e7\u00e3o: Este comando instala o Docker Community Edition (CE), que permite criar, implantar e gerenciar cont\u00eaineres de aplicativos.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#6-instalar-jest-globalmente","title":"6. Instalar Jest Globalmente","text":"<pre><code>npm install -g jest\n</code></pre> <p>Descri\u00e7\u00e3o: Jest \u00e9 um framework de testes para JavaScript. Este comando instala Jest globalmente, permitindo que voc\u00ea o use em qualquer projeto no seu sistema.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#7-instalar-mkdocs-globalmente","title":"7. Instalar MkDocs Globalmente","text":"<pre><code>pipx install mkdocs --include-deps\npipx inject mkdocs mkdocs-material mkdocs-simple-plugin plantuml-markdown mkdocs-mermaid2-plugin mkdocs_puml --include-deps --force\npipx ensurepath\nsource ~/.bashrc\n</code></pre> <p>Descri\u00e7\u00e3o:</p> <ul> <li> <p>mkdocs: \u00c9 uma ferramenta para criar documenta\u00e7\u00e3o est\u00e1tica de projetos. Este comando instala MkDocs em um ambiente isolado, garantindo que suas depend\u00eancias n\u00e3o conflitem com outros projetos.</p> </li> <li> <p>pipx ensurepath: Adiciona o diret\u00f3rio de scripts do pipx ao seu PATH, permitindo que voc\u00ea execute as ferramentas instaladas facilmente.</p> </li> <li> <p>source ~/.bashrc: Recarrega o arquivo <code>.bashrc</code> para aplicar as mudan\u00e7as feitas no PATH.</p> </li> </ul>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#8-verificar-as-versoes-instaladas","title":"8. Verificar as Vers\u00f5es Instaladas","text":"<p>Ap\u00f3s a instala\u00e7\u00e3o, voc\u00ea pode verificar as vers\u00f5es instaladas de cada ferramenta com os seguintes comandos:</p> <pre><code>echo \"OpenJDK version:\"\njava -version\n\necho \"Python version:\"\npython3 --version\n\necho \"MkDocs version\"\nmkdocs --version\n\necho \"Node.js version:\"\nnode --version\n\necho \"Docker version:\"\ndocker --version\n\necho \"Maven version:\"\nmvn --version\n\necho \"Jest version:\"\njest --version\n\necho \"Poetry version:\"\npoetry --version\n\necho \"Instala\u00e7\u00e3o conclu\u00edda!\"\n</code></pre> <p>Descri\u00e7\u00e3o: Esses comandos exibem as vers\u00f5es instaladas de cada ferramenta, permitindo que voc\u00ea verifique se a instala\u00e7\u00e3o foi bem-sucedida.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#descricao-dos-pacotes-instalados","title":"Descri\u00e7\u00e3o dos Pacotes Instalados","text":"<ul> <li>Git: Ferramenta de versionamento de c\u00f3digo usada para centralizar as altera\u00e7\u00f5es de c\u00f3digo em um repositorio remoto</li> <li>OpenJDK 17: Ambiente de desenvolvimento Java.</li> <li>Maven: Gerenciador de projetos e automa\u00e7\u00e3o de builds para Java.</li> <li>Python 3: Linguagem de programa\u00e7\u00e3o.</li> <li>pip: Gerenciador de pacotes para Python.</li> <li>Poetry: Gerenciador de depend\u00eancias e empacotador para Python.</li> <li>pipx: Ferramenta para instalar aplicativos Python em ambientes isolados.</li> <li>Node.js: Ambiente de execu\u00e7\u00e3o para JavaScript.</li> <li>npm: Gerenciador de pacotes para Node.js.</li> <li>Docker: Plataforma para desenvolver, enviar e executar aplica\u00e7\u00f5es em cont\u00eaineres.</li> <li>Jest: Framework de testes para JavaScript.</li> <li>MkDocs: Ferramenta para criar documenta\u00e7\u00e3o est\u00e1tica.</li> </ul> <p>Com este guia, voc\u00ea deve ser capaz de instalar todas as ferramentas necess\u00e1rias para o seu ambiente de desenvolvimento no Ubuntu. Se voc\u00ea tiver alguma d\u00favida ou encontrar problemas durante a instala\u00e7\u00e3o, sinta-se \u00e0 vontade para pedir ajuda!</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/ubuntu/#automacao","title":"Automa\u00e7\u00e3o","text":"<p>Caso queira, basta executar o script ubuntu.sh contido na pasta install_scripts do projeto, contem todos esses passos automatizados</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/vscode/","title":"VSCode","text":"<p>Ap\u00f3s instalar o VSCode, uma sequencia de plugins \u00e9 recomendada para desenvolvimento nas tecnologias desse projeto</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/vscode/#bons-plugins-para-desenvolvimento-java-e-javacript","title":"Bons plugins para desenvolvimento java e javacript","text":""},{"location":"instala%C3%A7%C3%A3o_ambiente/vscode/#bons-plugins-para-desenvolvimento-python","title":"Bons plugins para desenvolvimento python","text":""},{"location":"instala%C3%A7%C3%A3o_ambiente/vscode/#bons-plugins-para-testes","title":"Bons Plugins para testes","text":""},{"location":"instala%C3%A7%C3%A3o_ambiente/vscode/#demais-tecnologias","title":"Demais tecnologias","text":""},{"location":"instala%C3%A7%C3%A3o_ambiente/vscode/#git","title":"Git","text":""},{"location":"instala%C3%A7%C3%A3o_ambiente/vscode/#docker","title":"Docker","text":""},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/","title":"Windows","text":"<p>Este guia fornece um passo a passo sobre como instalar o Windows Subsystem for Linux (WSL), Ubuntu e v\u00e1rias ferramentas de desenvolvimento, incluindo OpenJDK 17, Python 3, Node.js, Maven, Jest, MkDocs e Docker CE, utilizando o Chocolatey. </p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ol> <li> <p>Windows 10 ou Superior: Certifique-se de que voc\u00ea est\u00e1 usando Windows 10 ou uma vers\u00e3o mais recente, pois o WSL est\u00e1 dispon\u00edvel apenas nessas vers\u00f5es.</p> </li> <li> <p>Permiss\u00f5es de Administrador: Para instalar o WSL e as ferramentas, voc\u00ea precisar\u00e1 de permiss\u00f5es de administrador.</p> </li> </ol>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#passo-1-habilitar-o-wsl","title":"Passo 1: Habilitar o WSL","text":"<ol> <li>Abrir o PowerShell como Administrador:</li> <li> <p>Clique com o bot\u00e3o direito do mouse no menu Iniciar e selecione \"Windows PowerShell (Admin)\".</p> </li> <li> <p>Habilitar o recurso WSL:</p> </li> <li> <p>Execute o seguinte comando no PowerShell:</p> <p><code>powershell  wsl --install</code></p> </li> <li> <p>Este comando instala a vers\u00e3o padr\u00e3o do WSL e o Ubuntu.</p> </li> <li> <p>Reiniciar o Computador:</p> </li> <li>Ap\u00f3s a instala\u00e7\u00e3o, voc\u00ea deve reiniciar o computador para que as altera\u00e7\u00f5es tenham efeito.</li> </ol>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#passo-2-instalar-o-ubuntu-no-wsl","title":"Passo 2: Instalar o Ubuntu no WSL","text":"<p>Ap\u00f3s reiniciar, o Ubuntu deve ser instalado automaticamente. Caso contr\u00e1rio, siga os passos abaixo:</p> <ol> <li>Abrir a Microsoft Store:</li> <li> <p>No menu Iniciar, busque por \"Microsoft Store\" e abra-a.</p> </li> <li> <p>Buscar por Ubuntu:</p> </li> <li> <p>Na loja, use a barra de pesquisa para procurar \"Ubuntu\". Voc\u00ea ver\u00e1 v\u00e1rias vers\u00f5es dispon\u00edveis (como Ubuntu 20.04 LTS, Ubuntu 22.04 LTS, etc.).</p> </li> <li> <p>Instalar o Ubuntu:</p> </li> <li> <p>Selecione a vers\u00e3o desejada e clique em \"Instalar\".</p> </li> <li> <p>Iniciar o Ubuntu:</p> </li> <li>Ap\u00f3s a instala\u00e7\u00e3o, voc\u00ea pode iniciar o Ubuntu diretamente do menu Iniciar. Na primeira execu\u00e7\u00e3o, voc\u00ea ser\u00e1 solicitado a criar um nome de usu\u00e1rio e uma senha.</li> </ol>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#passo-3-atualizar-o-sistema-ubuntu","title":"Passo 3: Atualizar o Sistema Ubuntu","text":"<ol> <li>Abrir o Terminal do Ubuntu:</li> <li> <p>Ap\u00f3s a instala\u00e7\u00e3o, abra o Ubuntu a partir do menu Iniciar.</p> </li> <li> <p>Atualizar a lista de pacotes:</p> </li> <li> <p>Execute os seguintes comandos para atualizar a lista de pacotes e instalar as atualiza\u00e7\u00f5es dispon\u00edveis:</p> <p><code>bash  sudo apt update  sudo apt upgrade -y</code></p> </li> </ol>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#passo-4-instalar-o-chocolatey","title":"Passo 4: Instalar o Chocolatey","text":"<ol> <li>Abrir o PowerShell como Administrador:</li> <li> <p>Se ainda n\u00e3o estiver aberto, inicie o PowerShell como administrador novamente.</p> </li> <li> <p>Verificar se o Chocolatey j\u00e1 est\u00e1 instalado:</p> </li> <li> <p>Execute o seguinte comando para verificar se o Chocolatey j\u00e1 est\u00e1 instalado:</p> <p><code>powershell  WHERE choco</code></p> </li> <li> <p>Se o comando retornar um erro, isso significa que o Chocolatey n\u00e3o est\u00e1 instalado.</p> </li> <li> <p>Instalar o Chocolatey:</p> </li> <li> <p>Execute o seguinte comando no PowerShell para instalar o Chocolatey:</p> <p><code>powershell  @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\"</code></p> </li> <li> <p>Adicionar Chocolatey ao PATH:</p> </li> <li>Ap\u00f3s a instala\u00e7\u00e3o, adicione o Chocolatey ao PATH. O comando acima j\u00e1 faz isso, mas voc\u00ea pode verificar se a vari\u00e1vel <code>PATH</code> foi atualizada corretamente.</li> </ol>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#passo-5-instalar-ferramentas-de-desenvolvimento-com-chocolatey","title":"Passo 5: Instalar Ferramentas de Desenvolvimento com Chocolatey","text":"<p>Agora que o Chocolatey est\u00e1 instalado, voc\u00ea pode usar o seguinte processo para instalar as ferramentas necess\u00e1rias.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#51-atualizar-o-chocolatey","title":"5.1: Atualizar o Chocolatey","text":"<p>Execute o seguinte comando para garantir que voc\u00ea esteja usando a vers\u00e3o mais recente do Chocolatey:</p> <pre><code>choco upgrade chocolatey -y\n</code></pre>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#52-instalar-openjdk-17","title":"5.2: Instalar OpenJDK 17","text":"<ul> <li>Prop\u00f3sito: OpenJDK \u00e9 a implementa\u00e7\u00e3o de c\u00f3digo aberto do Java, necess\u00e1rio para desenvolver e executar aplica\u00e7\u00f5es Java.</li> </ul> <p>Execute o seguinte comando:</p> <pre><code>choco install openjdk17 -y\n</code></pre>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#53-instalar-python-3","title":"5.3: Instalar Python 3","text":"<ul> <li>Prop\u00f3sito: Python \u00e9 uma linguagem de programa\u00e7\u00e3o amplamente utilizada para desenvolvimento web, automa\u00e7\u00e3o, an\u00e1lise de dados, etc.</li> </ul> <p>Execute o seguinte comando:</p> <pre><code>choco install python --version=3.12.0 -y\n</code></pre>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#54-instalar-nodejs","title":"5.4: Instalar Node.js","text":"<ul> <li>Prop\u00f3sito: Node.js permite a execu\u00e7\u00e3o de c\u00f3digo JavaScript no lado do servidor, ideal para desenvolvimento de aplica\u00e7\u00f5es web.</li> </ul> <p>Execute o seguinte comando:</p> <pre><code>choco install nodejs -y\n</code></pre>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#55-instalar-maven","title":"5.5: Instalar Maven","text":"<ul> <li>Prop\u00f3sito: Maven \u00e9 uma ferramenta de gerenciamento de projetos e automa\u00e7\u00e3o de builds para projetos Java.</li> </ul> <p>Execute o seguinte comando:</p> <pre><code>choco install maven -y\n</code></pre>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#56-instalar-jest","title":"5.6: Instalar Jest","text":"<ul> <li>Prop\u00f3sito: Jest \u00e9 um framework de testes para JavaScript.</li> </ul> <p>Execute o seguinte comando:</p> <pre><code>npm install -g jest\n</code></pre>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#57-instalar-mkdocs-e-poetry","title":"5.7: Instalar MkDocs e Poetry","text":"<p>Para instalar MkDocs e Poetry, que s\u00e3o ferramentas \u00fateis para documenta\u00e7\u00e3o e gerenciamento de pacotes Python, execute os comandos abaixo:</p> <ul> <li>MkDocs:</li> <li>Prop\u00f3sito: MkDocs \u00e9 uma ferramenta para criar documenta\u00e7\u00e3o est\u00e1tica de projetos.</li> </ul> <pre><code>pip install mkdocs\n</code></pre> <ul> <li>Poetry:</li> <li>Prop\u00f3sito: Poetry \u00e9 uma ferramenta para gerenciar depend\u00eancias e empacotar projetos Python.</li> </ul> <pre><code>pip install poetry\n</code></pre>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#58-instalar-docker-ce","title":"5.8: Instalar Docker CE","text":"<ul> <li>Prop\u00f3sito: Docker \u00e9 uma plataforma para desenvolver, enviar e executar aplica\u00e7\u00f5es em cont\u00eaineres.</li> </ul> <p>Execute os comandos abaixo no terminal do Ubuntu WSL:</p> <pre><code>sudo apt install -y apt-transport-https ca-certificates curl\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\necho \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list\nsudo apt update\nsudo apt install -y docker-ce\n</code></pre>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#passo-6-verificar-as-instalacoes","title":"Passo 6: Verificar as Instala\u00e7\u00f5es","text":"<p>Ap\u00f3s instalar todas as ferramentas, voc\u00ea pode verificar se tudo foi instalado corretamente. Execute os seguintes comandos no terminal do Ubuntu:</p> <pre><code>java -version\npython3 --version\nnode --version\nmvn --version\njest --version\nmkdocs --version\npoetry --version\nwsl -d Ubuntu -- docker --version\n</code></pre>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#passo-7-instalar-o-git-for-windows","title":"Passo 7: Instalar o git for windows","text":"<p>Acessar a p\u00e1gina https://git-scm.com/downloads/win para baixar e instalar o client git oficial para windows</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#descricao-dos-pacotes-instalados","title":"Descri\u00e7\u00e3o dos Pacotes Instalados","text":"<ul> <li>Git: Ferramenta de versionamento de c\u00f3digo usada para centralizar as altera\u00e7\u00f5es de c\u00f3digo em um repositorio remoto</li> <li>OpenJDK 17: Ambiente de desenvolvimento Java.</li> <li>Python 3: Linguagem de programa\u00e7\u00e3o vers\u00e1til.</li> <li>Node.js: Ambiente de execu\u00e7\u00e3o para JavaScript.</li> <li>Maven: Gerenciador de projetos Java.</li> <li>Jest: Framework de testes para JavaScript.</li> <li>MkDocs: Ferramenta para documenta\u00e7\u00e3o est\u00e1tica.</li> <li>Poetry: Gerenciador de depend\u00eancias para Python.</li> <li>Docker CE: Plataforma para cont\u00eaineres de aplicativos.</li> </ul>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#conclusao","title":"Conclus\u00e3o","text":"<p>Com este guia, voc\u00ea instalou o Ubuntu no WSL e configurou um ambiente de desenvolvimento completo no Windows. Se voc\u00ea encontrar qualquer problema durante a instala\u00e7\u00e3o, consulte a documenta\u00e7\u00e3o oficial de cada ferramenta ou busque ajuda em comunidades online.</p>"},{"location":"instala%C3%A7%C3%A3o_ambiente/windows/#automacao","title":"Automa\u00e7\u00e3o","text":"<p>Alternativamente, pode usar o script windows.bat contido na pasta install_scripts, esse script assume que j\u00e1 performou a instala\u00e7\u00e3o do Ubuntu wsl e que est\u00e1 rodando como administrador</p>"},{"location":"frontend/","title":"Frontend com NextJS e Material UI","text":"<p>Este projeto \u00e9 uma aplica\u00e7\u00e3o frontend utilizando Next.js, React e Material UI. Abaixo est\u00e3o as instru\u00e7\u00f5es para configurar, executar e desenvolver neste projeto.</p>"},{"location":"frontend/#scripts-disponiveis","title":"Scripts Dispon\u00edveis","text":"<p>No projeto, voc\u00ea pode executar os seguintes comandos:</p> <ul> <li><code>dev</code>: Inicia o servidor de desenvolvimento utilizando o Next.js com Turbopack.   <code>bash   npm run dev</code></li> <li><code>build</code>: Gera uma build otimizada para produ\u00e7\u00e3o.   <code>bash   npm run build</code></li> <li><code>start</code>: Inicia o servidor com a aplica\u00e7\u00e3o previamente constru\u00edda.   <code>bash   npm run start</code></li> <li><code>lint</code>: Executa o linter para identificar e corrigir problemas de estilo de c\u00f3digo.   <code>bash   npm run lint</code></li> <li><code>test</code>: Executa os testes unit\u00e1rios da aplica\u00e7\u00e3o.   <code>bash   npm run test</code></li> </ul>"},{"location":"frontend/#dependencias","title":"Depend\u00eancias","text":""},{"location":"frontend/#principais","title":"Principais","text":"<ul> <li><code>@emotion/cache</code>, <code>@emotion/react</code>, <code>@emotion/styled</code>: Utilizados para estiliza\u00e7\u00e3o CSS-in-JS.</li> <li><code>@mui/icons-material</code>, <code>@mui/material</code>, <code>@mui/material-nextjs</code>: Componentes de interface do usu\u00e1rio.</li> <li><code>next</code>: Framework de React para produ\u00e7\u00e3o.</li> <li><code>react</code>, <code>react-dom</code>: Biblioteca principal de componentes para constru\u00e7\u00e3o de interfaces.</li> </ul>"},{"location":"frontend/#desenvolvimento","title":"Desenvolvimento","text":"<ul> <li><code>@eslint/eslintrc</code>: Configura\u00e7\u00e3o para ESLint.</li> <li><code>@testing-library/dom</code>, <code>@testing-library/react</code>: Bibliotecas para testes de componentes React.</li> <li><code>@types/node</code>, <code>@types/react</code>, <code>@types/react-dom</code>: Tipagem TypeScript para Node.js e React.</li> <li><code>@vitejs/plugin-react</code>: Plugin para integrar React com Vite.</li> <li><code>eslint</code>, <code>eslint-config-next</code>: Ferramentas para an\u00e1lise est\u00e1tica de c\u00f3digo.</li> <li><code>jsdom</code>: Implementa\u00e7\u00e3o do DOM para Node.js, utilizada em testes.</li> <li><code>typescript</code>: Linguagem de programa\u00e7\u00e3o que adiciona tipagem est\u00e1tica ao JavaScript.</li> <li><code>vite-tsconfig-paths</code>: Suporte para caminhos de importa\u00e7\u00e3o no TypeScript com Vite.</li> <li><code>vitest</code>: Framework de testes.</li> </ul>"},{"location":"frontend/#exemplo-de-criacao-de-endpoint-com-nextjs","title":"Exemplo de Cria\u00e7\u00e3o de Endpoint com Next.js","text":"<p>Para criar um novo endpoint, adicione um arquivo na pasta <code>pages/api</code>. Por exemplo, para criar um endpoint <code>hello</code>, crie o arquivo <code>pages/api/hello.js</code> com o seguinte conte\u00fado:</p> <pre><code>export default function handler(req, res) {\n  res.status(200).json({ message: 'Hello, world!' });\n}\n</code></pre> <p>A partir de agora, ao acessar <code>/api/hello</code>, voc\u00ea receber\u00e1 a resposta JSON <code>{ \"message\": \"Hello, world!\" }</code>.</p>"},{"location":"frontend/#exemplo-de-teste-com-testing-library-e-vitest","title":"Exemplo de Teste com Testing Library e Vitest","text":"<p>Para criar testes, crie um arquivo com a extens\u00e3o <code>.test.js</code> ou <code>.test.ts</code>. A seguir, um exemplo de teste simples utilizando Vitest e Testing Library:</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport Home from '../pages/index';\n\ntest('renders welcome message', () =&gt; {\n  render(&lt;Home /&gt;);\n  const linkElement = screen.getByText(/Bem-vindo ao Next.js/i);\n  expect(linkElement).toBeInTheDocument();\n});\n</code></pre>"},{"location":"frontend/#glossario","title":"Gloss\u00e1rio","text":"<ul> <li>Next.js: Um framework React para a constru\u00e7\u00e3o de aplica\u00e7\u00f5es web, que oferece funcionalidades como renderiza\u00e7\u00e3o do lado do servidor e gera\u00e7\u00e3o de sites est\u00e1ticos.</li> <li>React: Biblioteca JavaScript para constru\u00e7\u00e3o de interfaces de usu\u00e1rio.</li> <li>Material UI: Biblioteca de componentes React que implementa os princ\u00edpios do Material Design.</li> <li>Turbopack: Ferramenta de bundling otimizada utilizada pelo Next.js para acelerar o processo de desenvolvimento.</li> <li>ESLint: Ferramenta de linting para identificar e corrigir problemas no c\u00f3digo JavaScript.</li> <li>Testing Library: Conjunto de utilit\u00e1rios para testar componentes de interface de usu\u00e1rio de maneira que simule o comportamento real do usu\u00e1rio.</li> <li>Vitest: Framework de testes que utiliza o Vite para uma experi\u00eancia de desenvolvimento r\u00e1pida.</li> <li>TypeScript: Superset do JavaScript que adiciona tipagem est\u00e1tica ao c\u00f3digo, permitindo detectar erros em tempo de compila\u00e7\u00e3o.</li> <li>CSS-in-JS: T\u00e9cnica de estiliza\u00e7\u00e3o onde o CSS \u00e9 escrito dentro de arquivos JavaScript, geralmente associado a bibliotecas como Emotion e Styled Components.</li> </ul>"},{"location":"gateway/","title":"Api Gateway com Proxy Reverso e Upstream no NGINX","text":"<p>Este documento descreve a configura\u00e7\u00e3o de um servidor reverso utilizando Nginx, projetado para gerenciar tr\u00eas servi\u00e7os diferentes: <code>usermanagement</code>, <code>feedbackrequest</code> e <code>feedbackresponse</code>. Cada servi\u00e7o est\u00e1 associado a uma URL espec\u00edfica no servidor principal, que escuta na porta 80.</p>"},{"location":"gateway/#configuracao-do-servidor","title":"Configura\u00e7\u00e3o do Servidor","text":"<p>O c\u00f3digo de configura\u00e7\u00e3o define tr\u00eas blocos <code>upstream</code> que especificam os servidores backend para cada servi\u00e7o:</p> <ul> <li><code>usermanagement</code>: servidor de gerenciamento de usu\u00e1rios.</li> <li><code>feedbackrequest</code>: servidor para requisi\u00e7\u00f5es de feedback.</li> <li><code>feedbackresponse</code>: servidor para respostas de feedback.</li> </ul> <p>Cada servi\u00e7o est\u00e1 configurado para rodar na porta <code>8080</code>.</p>"},{"location":"gateway/#bloco-de-servidor","title":"Bloco de Servidor","text":"<p>O servidor principal escuta na porta <code>80</code> e tem tr\u00eas localiza\u00e7\u00f5es definidas, cada uma encaminhando requisi\u00e7\u00f5es para o respectivo servi\u00e7o backend usando <code>proxy_pass</code>.</p>"},{"location":"gateway/#localizacoes","title":"Localiza\u00e7\u00f5es:","text":"<ul> <li><code>/users</code>: Redireciona para o servi\u00e7o <code>usermanagement</code>.</li> <li><code>/requests</code>: Redireciona para o servi\u00e7o <code>feedbackrequest</code>.</li> <li><code>/responses</code>: Redireciona para o servi\u00e7o <code>feedbackresponse</code>.</li> </ul> <p>Os trechos de c\u00f3digo comentados usando <code>rewrite</code> s\u00e3o exemplos de como reescrever URLs, mas est\u00e3o desativados na configura\u00e7\u00e3o atual.</p>"},{"location":"gateway/#exemplos-de-uso","title":"Exemplos de Uso","text":"<p>Para acessar cada servi\u00e7o, voc\u00ea pode fazer requisi\u00e7\u00f5es HTTP para as seguintes URLs:</p> <ol> <li> <p>Para o servi\u00e7o de gerenciamento de usu\u00e1rios:    <code>GET http://&lt;servidor&gt;/users</code></p> </li> <li> <p>Para o servi\u00e7o de requisi\u00e7\u00f5es de feedback:    <code>GET http://&lt;servidor&gt;/requests</code></p> </li> <li> <p>Para o servi\u00e7o de respostas de feedback:    <code>GET http://&lt;servidor&gt;/responses</code></p> </li> </ol> <p>Substitua <code>&lt;servidor&gt;</code> pelo endere\u00e7o IP ou nome do host onde o Nginx est\u00e1 rodando.</p>"},{"location":"gateway/#glossario","title":"Gloss\u00e1rio","text":"<ul> <li>Nginx: Um servidor web que pode ser usado como servidor reverso, balanceador de carga, proxy de e-mail e cache HTTP.</li> <li>upstream: Bloco de configura\u00e7\u00e3o no Nginx que define um grupo de servidores backend para onde as requisi\u00e7\u00f5es podem ser proxy-passadas.</li> <li>proxy_pass: Diretiva do Nginx que encaminha solicita\u00e7\u00f5es para os servidores backend especificados no bloco <code>upstream</code>.</li> <li>rewrite: Diretiva do Nginx usada para reescrever URLs antes de encaminhar a requisi\u00e7\u00e3o para o backend.</li> <li>Servidor Reverso: Um tipo de servidor que recupera recursos em nome de um cliente de um ou mais servidores backend.</li> </ul>"},{"location":"java_backend/","title":"Projeto Monorepo","text":"<p>Este projeto \u00e9 um monorepo baseado em Maven que cont\u00e9m m\u00faltiplos m\u00f3dulos para um aplicativo Spring Boot. A estrutura do projeto \u00e9 organizada em m\u00f3dulos para microservi\u00e7os e bibliotecas compartilhadas, facilitando a manuten\u00e7\u00e3o e o desenvolvimento escal\u00e1vel.</p>"},{"location":"java_backend/#estrutura-dos-modulos","title":"Estrutura dos M\u00f3dulos","text":"<p>A estrutura do projeto \u00e9 organizada da seguinte forma:</p> <ul> <li>monorepo: M\u00f3dulo ra\u00edz do projeto que define a configura\u00e7\u00e3o global e os m\u00f3dulos principais.</li> <li>microservices: M\u00f3dulo que cont\u00e9m os microservi\u00e7os:</li> <li>usermanagement: Gerenciamento de usu\u00e1rios.</li> <li>feedbackrequest: Solicita\u00e7\u00e3o de feedback.</li> <li>feedbackresponse: Resposta de feedback.</li> <li>libs: M\u00f3dulo que cont\u00e9m bibliotecas compartilhadas:</li> <li>security: Implementa\u00e7\u00f5es relacionadas \u00e0 seguran\u00e7a.</li> </ul>"},{"location":"java_backend/#configuracao-do-projeto-pom","title":"Configura\u00e7\u00e3o do Projeto (POM)","text":""},{"location":"java_backend/#monorepopomxml","title":"monorepo/pom.xml","text":"<p>Este \u00e9 o arquivo <code>pom.xml</code> principal que define o projeto como um m\u00f3dulo pai (parent) de outros m\u00f3dulos.</p>"},{"location":"java_backend/#microservicespomxml","title":"microservices/pom.xml","text":"<p>Define o m\u00f3dulo <code>microservices</code> e suas depend\u00eancias, incluindo Spring Boot, JPA, e outras bibliotecas necess\u00e1rias.</p>"},{"location":"java_backend/#libspomxml","title":"libs/pom.xml","text":"<p>Define o m\u00f3dulo <code>libs</code> que cont\u00e9m m\u00f3dulos de bibliotecas compartilhadas como <code>security</code>.</p>"},{"location":"java_backend/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"java_backend/#criando-um-endpoint-no-spring-boot","title":"Criando um Endpoint no Spring Boot","text":"<p>Para criar um endpoint, voc\u00ea pode adicionar um controlador ao m\u00f3dulo de microservi\u00e7o desejado. Exemplo:</p> <pre><code>package com.ciandt.nextgen25.usermanagement.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class UserController {\n\n    @GetMapping(\"/users\")\n    public String getUsers() {\n        return \"Lista de usu\u00e1rios\";\n    }\n}\n</code></pre>"},{"location":"java_backend/#acessando-o-banco-de-dados","title":"Acessando o Banco de Dados","text":"<p>O projeto est\u00e1 configurado para usar JPA. Para acessar o banco de dados, crie uma entidade e um reposit\u00f3rio. Exemplo:</p> <pre><code>package com.ciandt.nextgen25.usermanagement.model;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\n\n@Entity\npublic class User {\n\n    @Id\n    private Long id;\n    private String name;\n\n    // Getters e Setters\n}\n</code></pre> <pre><code>package com.ciandt.nextgen25.usermanagement.repository;\n\nimport com.ciandt.nextgen25.usermanagement.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n}\n</code></pre>"},{"location":"java_backend/#criando-testes-com-tdd","title":"Criando Testes com TDD","text":"<p>Para criar testes, utilize o framework JUnit. Exemplo de um teste simples:</p> <pre><code>package com.ciandt.nextgen25.usermanagement;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.test.context.support.WithMockUser;\nimport org.springframework.test.web.servlet.MockMvc;\n\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    @WithMockUser(username = \"admin\", roles = {\"ADMIN\"})\n    public void testCreateUser() throws Exception {\n        mockMvc.perform(\n            post(\"/users\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(\"{\\\"id\\\": 1, \\\"name\\\": \\\"John Doe\\\"}\")\n        )\n        .andExpect(status().isCreated())\n        .andExpect(jsonPath(\"$.name\").value(\"John Doe\"));\n    }\n\n    @Test\n    public void testGetUserById() throws Exception {\n        mockMvc.perform(get(\"/users/1\"))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath(\"$.name\").value(\"John Doe\"));\n    }\n}\n</code></pre>"},{"location":"java_backend/#glossario","title":"Gloss\u00e1rio","text":"<ul> <li>Maven: Ferramenta de automa\u00e7\u00e3o de compila\u00e7\u00e3o e gerenciamento de depend\u00eancias para projetos Java.</li> <li>POM (Project Object Model): Arquivo XML que cont\u00e9m informa\u00e7\u00f5es sobre o projeto e configura\u00e7\u00f5es para o Maven.</li> <li>Spring Boot: Framework Java para cria\u00e7\u00e3o de aplicativos independentes em produ\u00e7\u00e3o.</li> <li>Microservi\u00e7os: Arquitetura que estrutura uma aplica\u00e7\u00e3o como um conjunto de servi\u00e7os pequenos e independentes.</li> <li>JPA (Java Persistence API): API para gerenciamento de dados relacionais no Java.</li> <li>JUnit: Framework para cria\u00e7\u00e3o e execu\u00e7\u00e3o de testes automatizados em Java.</li> <li>TDD (Test-Driven Development): Metodologia de desenvolvimento de software em que os testes s\u00e3o escritos antes do c\u00f3digo funcional.</li> </ul>"},{"location":"java_backend/libs/security/","title":"Documenta\u00e7\u00e3o do Sistema de Seguran\u00e7a com JWT","text":"<p>Este projeto implementa um sistema de seguran\u00e7a utilizando JWT (JSON Web Tokens) para autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o em uma aplica\u00e7\u00e3o Spring. Esta documenta\u00e7\u00e3o fornece uma vis\u00e3o geral do comportamento do c\u00f3digo e exemplos de como utiliz\u00e1-lo.</p>"},{"location":"java_backend/libs/security/#estrutura-do-projeto","title":"Estrutura do Projeto","text":""},{"location":"java_backend/libs/security/#configuracoes-de-seguranca","title":"Configura\u00e7\u00f5es de Seguran\u00e7a","text":"<ul> <li> <p>AbstractSecurityConfig: Classe abstrata que define a configura\u00e7\u00e3o base de seguran\u00e7a. Desabilita acessos an\u00f4nimos, CSRF e define a pol\u00edtica de sess\u00e3o como STATELESS. Adiciona um filtro de autentica\u00e7\u00e3o antes do <code>BasicAuthenticationFilter</code>.</p> </li> <li> <p>JwtSecurityConfig: Extende <code>AbstractSecurityConfig</code> e fornece um filtro de autentica\u00e7\u00e3o JWT, <code>UserJWTAuthenticationFilter</code>.</p> </li> <li> <p>UserClaimSecurityConfig: Extende <code>AbstractSecurityConfig</code> e fornece um filtro de autentica\u00e7\u00e3o baseado em claims de usu\u00e1rio, <code>UserClaimsAuthenticationFilter</code>.</p> </li> </ul>"},{"location":"java_backend/libs/security/#entidades-de-usuario","title":"Entidades de Usu\u00e1rio","text":"<ul> <li> <p>LoggedUser: Implementa <code>UserInterface</code> e representa um usu\u00e1rio autenticado com informa\u00e7\u00f5es como ID, nome, email, tipo e PDM. Implementa o m\u00e9todo <code>getAuthorities</code> para fornecer as autoridades do usu\u00e1rio.</p> </li> <li> <p>UserDetailImpl: Implementa <code>UserDetails</code> do Spring Security e utiliza <code>UserInterface</code> para obter detalhes do usu\u00e1rio como username, password e authorities.</p> </li> <li> <p>UserInterface: Interface que define m\u00e9todos para obten\u00e7\u00e3o de informa\u00e7\u00f5es do usu\u00e1rio, como ID, nome, email, tipo, PDM, password e autoridades.</p> </li> </ul>"},{"location":"java_backend/libs/security/#filtros-de-autenticacao","title":"Filtros de Autentica\u00e7\u00e3o","text":"<ul> <li> <p>UserJWTAuthenticationFilter: Filtro que autentica usu\u00e1rios com base em um token JWT presente no cabe\u00e7alho <code>Authorization</code> da requisi\u00e7\u00e3o HTTP. Atualiza o contexto de seguran\u00e7a do Spring com a autentica\u00e7\u00e3o do usu\u00e1rio.</p> </li> <li> <p>UserClaimsAuthenticationFilter: Filtro que autentica usu\u00e1rios com base em claims de usu\u00e1rio presentes no cabe\u00e7alho <code>x-user</code> da requisi\u00e7\u00e3o HTTP.</p> </li> </ul>"},{"location":"java_backend/libs/security/#anotacoes-de-seguranca","title":"Anota\u00e7\u00f5es de Seguran\u00e7a","text":"<ul> <li> <p>EnableJwtSecurity: Anota\u00e7\u00e3o que importa a configura\u00e7\u00e3o de seguran\u00e7a JWT (<code>JwtSecurityConfig</code>) para uma classe.</p> </li> <li> <p>HasType: Anota\u00e7\u00e3o para verificar se o usu\u00e1rio possui uma autoridade espec\u00edfica antes de acessar um m\u00e9todo ou classe.</p> </li> <li> <p>EnableUserClaimsSecurity: Anota\u00e7\u00e3o que importa a configura\u00e7\u00e3o de seguran\u00e7a baseada em claims de usu\u00e1rio (<code>UserClaimSecurityConfig</code>) para uma classe.</p> </li> </ul>"},{"location":"java_backend/libs/security/#servico-de-token-jwt","title":"Servi\u00e7o de Token JWT","text":"<ul> <li>JwtTokenService: Servi\u00e7o respons\u00e1vel por gerar e verificar tokens JWT usando a biblioteca <code>auth0.jwt</code>. Define m\u00e9todos para gerar tokens com informa\u00e7\u00f5es do usu\u00e1rio e para extrair informa\u00e7\u00f5es de usu\u00e1rio a partir de tokens.</li> </ul>"},{"location":"java_backend/libs/security/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"java_backend/libs/security/#habilitar-seguranca-jwt","title":"Habilitar Seguran\u00e7a JWT","text":"<p>Para habilitar a seguran\u00e7a JWT em uma classe de configura\u00e7\u00e3o, use a anota\u00e7\u00e3o <code>@EnableJwtSecurity</code>.</p> <pre><code>@EnableJwtSecurity\npublic class MySecurityConfig {\n    // Sua configura\u00e7\u00e3o adicional aqui\n}\n</code></pre>"},{"location":"java_backend/libs/security/#proteger-metodos-ou-classes-com-autoridade","title":"Proteger M\u00e9todos ou Classes com Autoridade","text":"<p>Para restringir o acesso a m\u00e9todos ou classes conforme a autoridade do usu\u00e1rio, utilize a anota\u00e7\u00e3o <code>@HasType</code>.</p> <pre><code>@HasType(\"ROLE_ADMIN\")\npublic void metodoRestrito() {\n    // Implementa\u00e7\u00e3o do m\u00e9todo\n}\n</code></pre>"},{"location":"java_backend/libs/security/#geracao-de-token-jwt","title":"Gera\u00e7\u00e3o de Token JWT","text":"<p>Utilize o servi\u00e7o <code>JwtTokenService</code> para gerar um token JWT para um usu\u00e1rio.</p> <pre><code>@Autowired\nprivate JwtTokenService jwtTokenService;\n\npublic String gerarTokenParaUsuario(UserInterface usuario) throws Exception {\n    return jwtTokenService.generateToken(usuario);\n}\n</code></pre>"},{"location":"java_backend/libs/security/#autenticacao-com-jwt","title":"Autentica\u00e7\u00e3o com JWT","text":"<p>As requisi\u00e7\u00f5es HTTP devem incluir o token JWT no cabe\u00e7alho <code>Authorization</code> para que o filtro <code>UserJWTAuthenticationFilter</code> possa autenticar o usu\u00e1rio.</p> <pre><code>GET /api/protected-resource HTTP/1.1\nAuthorization: Bearer &lt;token_jwt&gt;\n</code></pre>"},{"location":"java_backend/libs/security/#autenticacao-com-claims-de-usuario","title":"Autentica\u00e7\u00e3o com Claims de Usu\u00e1rio","text":"<p>Para habilitar a seguran\u00e7a com claims de usu\u00e1rio em uma classe de configura\u00e7\u00e3o, use a anota\u00e7\u00e3o <code>@EnableUserClaimsSecurity</code>.</p> <pre><code>@EnableUserClaimsSecurity\npublic class MySecurityConfig {\n    // Sua configura\u00e7\u00e3o adicional aqui\n}\n</code></pre> <p>As requisi\u00e7\u00f5es HTTP devem incluir os claims de usu\u00e1rio no cabe\u00e7alho <code>x-user</code> para que o filtro <code>UserClaimsAuthenticationFilter</code> possa autenticar o usu\u00e1rio.</p> <pre><code>GET /api/protected-resource HTTP/1.1\nx-user: &lt;dados_do_usuario&gt;\n</code></pre>"},{"location":"java_backend/libs/security/#glossario","title":"Gloss\u00e1rio","text":"<ul> <li> <p>JWT (JSON Web Token): Um padr\u00e3o aberto para cria\u00e7\u00e3o de tokens de acesso baseados em JSON que permitem a transmiss\u00e3o de informa\u00e7\u00f5es verific\u00e1veis entre partes.</p> </li> <li> <p>CSRF (Cross-Site Request Forgery): Um tipo de ataque de seguran\u00e7a contra aplica\u00e7\u00f5es web, onde o usu\u00e1rio \u00e9 induzido a executar a\u00e7\u00f5es n\u00e3o desejadas em uma aplica\u00e7\u00e3o na qual est\u00e1 autenticado.</p> </li> <li> <p>Stateless: Uma pol\u00edtica de sess\u00e3o onde o servidor n\u00e3o armazena nenhuma informa\u00e7\u00e3o sobre as sess\u00f5es do usu\u00e1rio. Cada requisi\u00e7\u00e3o \u00e9 independente e carrega suas pr\u00f3prias credenciais.</p> </li> <li> <p><code>OncePerRequestFilter</code>: Classe base do Spring para filtros que garantem que a execu\u00e7\u00e3o ocorra uma \u00fanica vez por requisi\u00e7\u00e3o.</p> </li> <li> <p><code>SecurityContextHolder</code>: Classe do Spring Security que armazena o contexto de seguran\u00e7a, incluindo detalhes de autentica\u00e7\u00e3o.</p> </li> <li> <p>HMAC SHA256: Um tipo de algoritmo de hash criptogr\u00e1fico que combina uma chave secreta com uma fun\u00e7\u00e3o de hash para gerar uma assinatura segura.</p> </li> <li> <p><code>UserDetails</code>: Interface do Spring Security que representa as informa\u00e7\u00f5es principais de um usu\u00e1rio.</p> </li> <li> <p><code>GrantedAuthority</code>: Representa uma autoridade concedida a um usu\u00e1rio, usada para restri\u00e7\u00f5es de acesso.</p> </li> <li> <p><code>@EnableMethodSecurity</code>: Anota\u00e7\u00e3o do Spring Security que habilita a seguran\u00e7a baseada em anota\u00e7\u00f5es nos m\u00e9todos.</p> </li> </ul>"},{"location":"java_backend/microservices/","title":"Detalhamentos das bibliotecas usadas no projeto","text":""},{"location":"java_backend/microservices/#1-spring-boot-starter-data-jpa","title":"1. Spring Boot Starter Data JPA","text":""},{"location":"java_backend/microservices/#teoria","title":"Teoria","text":"<p>O Spring Boot Starter Data JPA \u00e9 uma biblioteca que facilita a implementa\u00e7\u00e3o de persist\u00eancia de dados em aplica\u00e7\u00f5es Java atrav\u00e9s da Java Persistence API (JPA). Ele oferece abstra\u00e7\u00f5es e implementa\u00e7\u00f5es para acessar dados de forma mais simples, utilizando reposit\u00f3rios.</p>"},{"location":"java_backend/microservices/#utilidade","title":"Utilidade","text":"<ul> <li> <p>Abstra\u00e7\u00e3o da Persist\u00eancia: Permite que os desenvolvedores interajam com bancos de dados sem escrever SQL diretamente.</p> </li> <li> <p>Facilidade de Uso: Com reposit\u00f3rios, voc\u00ea pode realizar opera\u00e7\u00f5es CRUD (Create, Read, Update, Delete) com poucas linhas de c\u00f3digo.</p> </li> <li> <p>Integra\u00e7\u00e3o com Hibernate: O Hibernate \u00e9 o provedor JPA padr\u00e3o, que oferece ferramentas e funcionalidades avan\u00e7adas.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso","title":"Exemplo de Uso","text":"<p>1.1. Configura\u00e7\u00e3o no <code>application.properties</code>:</p> <pre><code>spring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\nspring.jpa.hibernate.ddl-auto=update\n</code></pre> <p>1.2. Entidade:</p> <pre><code>import javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private String email;\n\n    // Getters e Setters\n}\n</code></pre> <p>1.3. Reposit\u00f3rio:</p> <pre><code>import org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    User findByEmail(String email);\n}\n</code></pre> <p>1.4. Servi\u00e7o:</p> <pre><code>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UserRepository userRepository;\n\n    public List&lt;User&gt; getAllUsers() {\n        return userRepository.findAll();\n    }\n\n    public User createUser(User user) {\n        return userRepository.save(user);\n    }\n}\n</code></pre> <p>1.5. Controlador:</p> <pre><code>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n\n    @GetMapping\n    public List&lt;User&gt; getUsers() {\n        return userService.getAllUsers();\n    }\n\n    @PostMapping\n    public User createUser(@RequestBody User user) {\n        return userService.createUser(user);\n    }\n}\n</code></pre>"},{"location":"java_backend/microservices/#2-spring-boot-starter-security","title":"2. Spring Boot Starter Security","text":""},{"location":"java_backend/microservices/#teoria_1","title":"Teoria","text":"<p>O Spring Boot Starter Security fornece suporte para autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o em aplica\u00e7\u00f5es. Utiliza o Spring Security, que \u00e9 um framework robusto e amplamente utilizado para proteger aplica\u00e7\u00f5es Java.</p>"},{"location":"java_backend/microservices/#utilidade_1","title":"Utilidade","text":"<ul> <li> <p>Autentica\u00e7\u00e3o: Verifica a identidade do usu\u00e1rio.</p> </li> <li> <p>Autoriza\u00e7\u00e3o: Controla o acesso a recursos com base nas permiss\u00f5es do usu\u00e1rio.</p> </li> <li> <p>Seguran\u00e7a Personaliz\u00e1vel: Permite a configura\u00e7\u00e3o de seguran\u00e7a de acordo com as necessidades da aplica\u00e7\u00e3o.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_1","title":"Exemplo de Uso","text":"<p>2.1. Configura\u00e7\u00e3o de Seguran\u00e7a:</p> <pre><code>import org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n                .antMatchers(\"/public/**\").permitAll() // Permitir acesso p\u00fablico\n                .anyRequest().authenticated() // Requer autentica\u00e7\u00e3o para qualquer outra requisi\u00e7\u00e3o\n                .and()\n            .formLogin(); // Habilitar login baseado em formul\u00e1rio\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n</code></pre>"},{"location":"java_backend/microservices/#3-spring-boot-starter-web","title":"3. Spring Boot Starter Web","text":""},{"location":"java_backend/microservices/#teoria_2","title":"Teoria","text":"<p>O Spring Boot Starter Web \u00e9 uma biblioteca que facilita a constru\u00e7\u00e3o de aplica\u00e7\u00f5es web, incluindo servi\u00e7os RESTful, utilizando o Spring MVC. Ele traz todas as depend\u00eancias necess\u00e1rias para desenvolvimento web.</p>"},{"location":"java_backend/microservices/#utilidade_2","title":"Utilidade","text":"<ul> <li> <p>Facilidade na Cria\u00e7\u00e3o de APIs: Permite a cria\u00e7\u00e3o de endpoints REST de maneira r\u00e1pida.</p> </li> <li> <p>Suporte a Templating: Integra-se com bibliotecas de templating como Thymeleaf.</p> </li> <li> <p>Gerenciamento de Requisi\u00e7\u00f5es e Respostas: Facilita a manipula\u00e7\u00e3o de HTTP.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_2","title":"Exemplo de Uso","text":"<p>3.1. Controlador:</p> <pre><code>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n\n    @GetMapping\n    public List&lt;User&gt; getUsers() {\n        return userService.getAllUsers();\n    }\n\n    @PostMapping\n    public User createUser(@RequestBody User user) {\n        return userService.createUser(user);\n    }\n}\n</code></pre>"},{"location":"java_backend/microservices/#4-spring-boot-devtools","title":"4. Spring Boot DevTools","text":""},{"location":"java_backend/microservices/#teoria_3","title":"Teoria","text":"<p>O Spring Boot DevTools \u00e9 um conjunto de ferramentas que aprimora a experi\u00eancia de desenvolvimento. Ele permite que a aplica\u00e7\u00e3o reinicie automaticamente quando mudan\u00e7as s\u00e3o detectadas.</p>"},{"location":"java_backend/microservices/#utilidade_3","title":"Utilidade","text":"<ul> <li>Recarregamento Autom\u00e1tico: Facilita o desenvolvimento, pois voc\u00ea n\u00e3o precisa reiniciar a aplica\u00e7\u00e3o manualmente.</li> <li>Melhorias na Experi\u00eancia de Desenvolvimento: Habilita configura\u00e7\u00f5es que simplificam o fluxo de trabalho de desenvolvimento.</li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_3","title":"Exemplo de Uso","text":"<p>4.1. Configura\u00e7\u00e3o:</p> <p>Basta adicionar a depend\u00eancia no <code>pom.xml</code> e, em seguida, executar a aplica\u00e7\u00e3o. Ao fazer altera\u00e7\u00f5es no c\u00f3digo, a aplica\u00e7\u00e3o ser\u00e1 reiniciada automaticamente.</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;optional&gt;true&lt;/optional&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"java_backend/microservices/#5-h2-database","title":"5. H2 Database","text":""},{"location":"java_backend/microservices/#teoria_4","title":"Teoria","text":"<p>O H2 \u00e9 um banco de dados relacional leve que pode ser executado em mem\u00f3ria e \u00e9 usado principalmente para desenvolvimento e testes. Ele \u00e9 f\u00e1cil de configurar e n\u00e3o requer instala\u00e7\u00e3o.</p>"},{"location":"java_backend/microservices/#utilidade_4","title":"Utilidade","text":"<ul> <li> <p>Teste R\u00e1pido: Ideal para testes unit\u00e1rios e desenvolvimento r\u00e1pido.</p> </li> <li> <p>Sem Configura\u00e7\u00e3o Complexa: Basta configurar o JDBC para usar.</p> </li> <li> <p>Console Web: Oferece um console web para interagir com o banco de dados.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_4","title":"Exemplo de Uso","text":"<p>5.1. Configura\u00e7\u00e3o no <code>application.properties</code>:</p> <pre><code>spring.h2.console.enabled=true\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\n</code></pre> <p>5.2. Acesso ao Console H2:</p> <p>Acesse o console em <code>http://localhost:8080/h2-console</code> ap\u00f3s iniciar a aplica\u00e7\u00e3o.</p>"},{"location":"java_backend/microservices/#6-postgresql","title":"6. PostgreSQL","text":""},{"location":"java_backend/microservices/#teoria_5","title":"Teoria","text":"<p>PostgreSQL \u00e9 um sistema de gerenciamento de banco de dados relacional objeto (ORDBMS) que \u00e9 amplamente utilizado por suas robustas funcionalidades e conformidade com padr\u00f5es.</p>"},{"location":"java_backend/microservices/#utilidade_5","title":"Utilidade","text":"<ul> <li> <p>Suporte a Transa\u00e7\u00f5es: Gerencia transa\u00e7\u00f5es complexas com seguran\u00e7a.</p> </li> <li> <p>Escalabilidade: Capaz de lidar com grandes volumes de dados.</p> </li> <li> <p>Extensibilidade: Permite a cria\u00e7\u00e3o de tipos de dados personalizados.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_5","title":"Exemplo de Uso","text":"<p>6.1. Configura\u00e7\u00e3o no <code>application.properties</code>:</p> <pre><code>spring.datasource.url=jdbc:postgresql://localhost:5432/mydb\nspring.datasource.username=myuser\nspring.datasource.password=mypassword\nspring.jpa.hibernate.ddl-auto=update\n</code></pre> <p>6.2. Conex\u00e3o ao Banco:</p> <p>Certifique-se de que o servidor PostgreSQL esteja em execu\u00e7\u00e3o e que o banco de dados e as credenciais estejam corretos.</p>"},{"location":"java_backend/microservices/#7-lombok","title":"7. Lombok","text":""},{"location":"java_backend/microservices/#teoria_6","title":"Teoria","text":"<p>Lombok \u00e9 uma biblioteca que ajuda a reduzir a quantidade de c\u00f3digo boilerplate, como getters, setters, construtores e m\u00e9todos <code>toString</code>, atrav\u00e9s de anota\u00e7\u00f5es.</p>"},{"location":"java_backend/microservices/#utilidade_6","title":"Utilidade","text":"<ul> <li> <p>Reduzir C\u00f3digo Boilerplate: Facilita a escrita de classes de modelo.</p> </li> <li> <p>Facilita a Manuten\u00e7\u00e3o: Menos c\u00f3digo resulta em menos erros e facilita a manuten\u00e7\u00e3o.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_6","title":"Exemplo de Uso","text":"<p>7.1. Model com Lombok:</p> <pre><code>import lombok.Data;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\n@Data // Gera automaticamente m\u00e9todos getters e setters\npublic class Product {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private Double price;\n}\n</code></pre>"},{"location":"java_backend/microservices/#8-spring-boot-starter-test","title":"8. Spring Boot Starter Test","text":""},{"location":"java_backend/microservices/#teoria_7","title":"Teoria","text":"<p>O Spring Boot Starter Test fornece todas as depend\u00eancias necess\u00e1rias para realizar testes em aplica\u00e7\u00f5es Spring Boot, incluindo JUnit, Mockito e Spring Test.</p>"},{"location":"java_backend/microservices/#utilidade_7","title":"Utilidade","text":"<ul> <li> <p>Facilidade na Cria\u00e7\u00e3o de Testes: Simplifica a configura\u00e7\u00e3o de testes unit\u00e1rios e de integra\u00e7\u00e3o.</p> </li> <li> <p>Suporte a Testes de Componentes Spring: Permite testar facilmente componentes do Spring.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_7","title":"Exemplo de Uso","text":"<p>8.1. Teste Unit\u00e1rio:</p> <pre><code>import static org.mockito.Mockito.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.test.web.servlet.MockMvc;\n\n@WebMvcTest(UserController.class)\npublic class UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void testGetUsers() throws Exception {\n        mockMvc.perform(get(\"/users\"))\n            .andExpect(status().isOk());\n    }\n}\n</code></pre>"},{"location":"java_backend/microservices/#9-spring-security-test","title":"9. Spring Security Test","text":""},{"location":"java_backend/microservices/#teoria_8","title":"Teoria","text":"<p>O Spring Security Test fornece funcionalidades para testar a seguran\u00e7a de aplica\u00e7\u00f5es Spring, permitindo simular usu\u00e1rios autenticados e verificar o controle de acesso.</p>"},{"location":"java_backend/microservices/#utilidade_8","title":"Utilidade","text":"<ul> <li> <p>Testes de Seguran\u00e7a Simplificados: Facilita a cria\u00e7\u00e3o de testes que verificam a seguran\u00e7a da aplica\u00e7\u00e3o.</p> </li> <li> <p>Simula\u00e7\u00e3o de Usu\u00e1rios: Permite simular usu\u00e1rios com diferentes roles e permiss\u00f5es.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_8","title":"Exemplo de Uso","text":"<p>9.1. Teste de Seguran\u00e7a:</p> <pre><code>import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.security.test.context.support.WithMockUser;\nimport org.springframework.test.web.servlet.MockMvc;\n\n@WebMvcTest(UserController.class)\npublic class UserControllerSecurityTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    @WithMockUser // Simula um usu\u00e1rio autenticado\n    public void testGetUsersWithAuthentication() throws Exception {\n        mockMvc.perform(get(\"/users\"))\n            .andExpect(status().isOk());\n    }\n\n    @Test\n    public void testGetUsersWithoutAuthentication() throws Exception {\n        mockMvc.perform(get(\"/users\"))\n            .andExpect(status().isUnauthorized());\n    }\n}\n</code></pre>"},{"location":"java_backend/microservices/#10-auth0-java-jwt","title":"10. Auth0 Java JWT","text":""},{"location":"java_backend/microservices/#teoria_9","title":"Teoria","text":"<p>O Auth0 Java JWT \u00e9 uma biblioteca que facilita a manipula\u00e7\u00e3o de tokens JWT (JSON Web Tokens) em aplica\u00e7\u00f5es Java. Os JWTs s\u00e3o amplamente utilizados para autentica\u00e7\u00e3o e troca de informa\u00e7\u00f5es seguras entre partes.</p>"},{"location":"java_backend/microservices/#utilidade_9","title":"Utilidade","text":"<ul> <li> <p>Gera\u00e7\u00e3o de Tokens: Permite criar tokens JWT para autenticar usu\u00e1rios.</p> </li> <li> <p>Valida\u00e7\u00e3o de Tokens: Fornece funcionalidades para verificar a autenticidade e integridade dos tokens.</p> </li> <li> <p>Manipula\u00e7\u00e3o de Claims: Facilita a inclus\u00e3o e leitura de claims no token, que s\u00e3o informa\u00e7\u00f5es adicionais.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_9","title":"Exemplo de Uso","text":"<p>10.1. Gera\u00e7\u00e3o e Valida\u00e7\u00e3o de JWT:</p> <pre><code>import com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport com.auth0.jwt.interfaces.JWTVerifier;\n\npublic class JwtUtil {\n    private static final String SECRET = \"mySecretKey\";\n\n    public String generateToken(String username) {\n        return JWT.create()\n                .withSubject(username)\n                .sign(Algorithm.HMAC256(SECRET));\n    }\n\n    public String validateToken(String token) {\n        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET)).build();\n        DecodedJWT jwt = verifier.verify(token);\n        return jwt.getSubject();\n    }\n}\n</code></pre>"},{"location":"java_backend/microservices/#11-jackson-databind","title":"11. Jackson Databind","text":""},{"location":"java_backend/microservices/#teoria_10","title":"Teoria","text":"<p>Jackson Databind \u00e9 uma biblioteca do projeto Jackson que fornece funcionalidades para serializa\u00e7\u00e3o e desserializa\u00e7\u00e3o de objetos Java para JSON e vice-versa. \u00c9 amplamente utilizada em aplica\u00e7\u00f5es que precisam interagir com APIs RESTful.</p>"},{"location":"java_backend/microservices/#utilidade_10","title":"Utilidade","text":"<ul> <li> <p>Serializa\u00e7\u00e3o: Converte objetos Java em strings JSON.</p> </li> <li> <p>Desserializa\u00e7\u00e3o: Converte strings JSON em objetos Java.</p> </li> <li> <p>Suporte a Anota\u00e7\u00f5es: Permite personalizar a serializa\u00e7\u00e3o e desserializa\u00e7\u00e3o com anota\u00e7\u00f5es.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_10","title":"Exemplo de Uso","text":"<p>11.1. Serializa\u00e7\u00e3o e Desserializa\u00e7\u00e3o:</p> <pre><code>import com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class JacksonExample {\n    private static final ObjectMapper objectMapper = new ObjectMapper();\n\n    public String serialize(Object obj) throws Exception {\n        return objectMapper.writeValueAsString(obj);\n    }\n\n    public &lt;T&gt; T deserialize(String json, Class&lt;T&gt; clazz) throws Exception {\n        return objectMapper.readValue(json, clazz);\n    }\n}\n</code></pre>"},{"location":"java_backend/microservices/#12-springdoc-openapi","title":"12. Springdoc OpenAPI","text":""},{"location":"java_backend/microservices/#teoria_11","title":"Teoria","text":"<p>Springdoc OpenAPI \u00e9 uma biblioteca que gera documenta\u00e7\u00e3o autom\u00e1tica para APIs REST baseadas em Spring. Ele utiliza a especifica\u00e7\u00e3o OpenAPI para descrever os endpoints de uma aplica\u00e7\u00e3o, facilitando a integra\u00e7\u00e3o e uso da API.</p>"},{"location":"java_backend/microservices/#utilidade_11","title":"Utilidade","text":"<ul> <li> <p>Documenta\u00e7\u00e3o Autom\u00e1tica: Gera documenta\u00e7\u00e3o em tempo real a partir das anota\u00e7\u00f5es nas classes.</p> </li> <li> <p>Interface Interativa: Proporciona uma interface gr\u00e1fica para testar os endpoints da API.</p> </li> <li> <p>Suporte a Versionamento: Facilita o gerenciamento de vers\u00f5es da API.</p> </li> </ul>"},{"location":"java_backend/microservices/#exemplo-de-uso_11","title":"Exemplo de Uso","text":"<p>12.1. Configura\u00e7\u00e3o do Springdoc:</p> <pre><code>import org.springdoc.core.annotations.SpringDocConfig;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@SpringDocConfig\npublic class OpenApiConfig {\n    @Bean\n    public OpenAPI customOpenAPI() {\n        return new OpenAPI()\n                .info(new Info()\n                        .title(\"API Example\")\n                        .version(\"1.0\")\n                        .description(\"Documenta\u00e7\u00e3o da API de exemplo\"));\n    }\n}\n</code></pre>"},{"location":"java_backend/microservices/feedbackrequest/","title":"Pedido de Feedback","text":"<p>Esse microservi\u00e7o \u00e9 respon\u00e1vel por armazenar os pedidos de feedback e gerenciar o estado do mesmo.</p>"},{"location":"java_backend/microservices/feedbackrequest/#operacoes","title":"Opera\u00e7\u00f5es","text":"<ul> <li>Criar Pedido de Feedback: Recebe o pedido juntamente com as perguntas dinamicas e dados de seu criador</li> <li>Listar Pedidos de Feedback: Lista os pedidos que pertencem ao colaborador logado</li> <li>Listar Pedidos de Feedback a aprovar: Lista os pedidos de feedback que um PDM tem pendente de aprova\u00e7\u00e3o</li> <li>Aprovar Pedido de Feedback: PDM aprovar requisi\u00e7\u00e3o de feedback e enviar para analisadores</li> <li>Editar Feedback: Colaborador editar feedbacks n\u00e3o aprovados</li> </ul>"},{"location":"java_backend/microservices/feedbackrequest/#operacoes-em-background","title":"Opera\u00e7\u00f5es em background","text":"<ul> <li>Envio de email de notifica\u00e7\u00e3o para PDMS: Novo feedback a aprovar</li> <li>Envio de email de notifica\u00e7\u00e3o para Avaliadores: Novo feedback a responder </li> <li>Envio de email de notifica\u00e7\u00e3o para Colaboradores: Feedback Aprovado</li> </ul>"},{"location":"java_backend/microservices/feedbackrequest/#dominio-identificado","title":"Dominio identificado","text":"<ul> <li>Colaborador</li> <li>PDM</li> <li>Pedido de Feedback</li> <li>Pergunta</li> <li>Avaliador</li> </ul>"},{"location":"java_backend/microservices/feedbackrequest/#validacoes","title":"Valida\u00e7\u00f5es","text":"<ul> <li>Pedido de feedback edit\u00e1vel apenas quando em estado de \"rejeitado\"</li> <li>Avaliadores precisam ter emails externos a CI&amp;T</li> <li>Apenas PDMs podem aprovar requisi\u00e7\u00f5es de feedback</li> <li>Colaboradores s\u00f3 podem ver suas pr\u00f3prias requisi\u00e7\u00f5es na listagem</li> <li>PDMs tamb\u00e9m s\u00e3o colaboradores e podem criar pedidos de feedback</li> <li>PDMs n\u00e3o podem aprovar seus pr\u00f3prios pedidos de feedback, apenas seu PDM (PDM do PDM enquanto colaborador)</li> <li>PDMs s\u00f3 podem ver requisi\u00e7\u00f5es a aprovar de seus diretos</li> </ul>"},{"location":"java_backend/microservices/feedbackresponse/","title":"Respostas de Feedback","text":"<p>Esse microservi\u00e7o \u00e9 respons\u00e1vel pelo registro das respostas de feedback feita pelos avaliadores</p>"},{"location":"java_backend/microservices/feedbackresponse/#operacoes","title":"Opera\u00e7\u00f5es","text":"<ul> <li>Validar e conceder acesso ao avaliador: Como o avaliador n\u00e3o \u00e9 um usuario do sistema, precisa apenas validar o email do mesmo</li> <li>Registrar Respostas de feedback: registrar as respostas de um avaliador a determinada requisi\u00e7\u00e3o</li> </ul>"},{"location":"java_backend/microservices/feedbackresponse/#operacoes-em-background","title":"Opera\u00e7\u00f5es em Background","text":"<ul> <li>Enviar email de notifica\u00e7\u00e3o: enviar email para para PDM e Colaborador quando um feedback \u00e9 respondido</li> </ul>"},{"location":"java_backend/microservices/feedbackresponse/#dominio-identificado","title":"Dom\u00ednio identificado","text":"<p>Nesse contexto, n\u00e3o precisamos das entidades de solicita\u00e7\u00e3o de feedback, tampouco da entidade de perguntas, basta salvarmos seus ids nos campos de relacionamento para que possamos em outro contexto fazer a jun\u00e7\u00e3o do dado</p> <ul> <li>Usu\u00e1rio Logado</li> <li>Resposta de Feedback </li> <li>Resposta de pergunta</li> </ul>"},{"location":"java_backend/microservices/feedbackresponse/#validacoes","title":"Valida\u00e7\u00f5es","text":"<ul> <li> <p>Antes de responder a solicita\u00e7\u00e3o, validar a validade da mesma, cuja \u00e9 apenas 3 meses ap\u00f3s a aprova\u00e7\u00e3o do PDM</p> </li> <li> <p>Receber o email do avaliador e manter na sess\u00e3o (atrav\u00e9s de um token?) e verificar se o avaliador identificado est\u00e1 entre os avaliadores escolhidos pelo colaborador </p> </li> </ul>"},{"location":"java_backend/microservices/usermanagement/","title":"Gest\u00e3o de Usu\u00e1rios","text":"<p>Esse microservi\u00e7o \u00e9 respons\u00e1vel pela gest\u00e3o de usu\u00e1rios e tamb\u00e9m pela gera\u00e7\u00e3o de seu token de acesso (JWT)</p>"},{"location":"java_backend/microservices/usermanagement/#operacoes","title":"Opera\u00e7\u00f5es","text":"<ul> <li>Criar Usu\u00e1rio: Cria usu\u00e1rio com seu nome, email, cargo, tipo e pdm</li> <li>Editar Usu\u00e1rio: Edita o dados do usu\u00e1rio</li> <li>Desativar Usu\u00e1rio: Desativa um usu\u00e1rio com soft delete</li> <li>Checa Senha Cadastrada: Checa se usuario j\u00e1 tem sua senha cadastrada</li> <li>Obt\u00e9m Token: Obtem um token de acesso ao sistema mediante o fornecimento de um email e senha v\u00e1lidos</li> </ul>"},{"location":"java_backend/microservices/usermanagement/#operacoes-em-linha-de-comando","title":"Opera\u00e7\u00f5es em linha de comando","text":"<ul> <li>Criar usu\u00e1rio administrador: Cria\u00e7\u00e3o de um usuario do tipo admin, fornecer nome, email, senha e cargo. O tipo ser\u00e1 preenchido autom\u00e1ticamente e o pdm ser\u00e1 sempre nulo </li> </ul>"},{"location":"java_backend/microservices/usermanagement/#dominio-identificado","title":"Dominio identificado","text":"<ul> <li>Usu\u00e1rio</li> <li>Usu\u00e1rio Logado</li> </ul>"},{"location":"java_backend/microservices/usermanagement/#validacoes","title":"Valida\u00e7\u00f5es","text":"<ul> <li>Apenas usu\u00e1rios do tipo ADMIN podem cadastrar, editar, desativar um usu\u00e1rio</li> <li>Usu\u00e1rio admin n\u00e3o tem acesso a senha do colaborador, a mesma ser\u00e1 criada pelo pr\u00f3prio colaborador</li> <li>O token JWT deve ter a validade de apenas 1 dia</li> </ul>"},{"location":"java_backend/microservices/usermanagement/#pre-definicoes","title":"Pr\u00e9-defini\u00e7\u00f5es","text":"<ul> <li>Usar a lib security para validar e gerar os tokens e usu\u00e1rios</li> </ul>"},{"location":"node_backend/api_gateway/","title":"Api Gateway implementado com Node e Express","text":"<p>Este projeto implementa um servidor proxy utilizando Express e <code>http-proxy-middleware</code> para encaminhar requisi\u00e7\u00f5es para os servi\u00e7os do backend. Al\u00e9m disso, ele utiliza JWTs (JSON Web Tokens) para autenticar e autorizar requisi\u00e7\u00f5es.</p>"},{"location":"node_backend/api_gateway/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<ul> <li><code>app.ts</code>: Arquivo principal que configura o servidor Express, middleware de autentica\u00e7\u00e3o JWT e a l\u00f3gica de proxy.</li> <li><code>index.ts</code>: Ponto de entrada da aplica\u00e7\u00e3o que inicia o servidor.</li> <li><code>app.spec.ts</code>: Arquivo de testes utilizando <code>supertest</code> e <code>jest</code> para verificar o comportamento do proxy e autentica\u00e7\u00e3o.</li> </ul>"},{"location":"node_backend/api_gateway/#funcionalidades","title":"Funcionalidades","text":"<ol> <li> <p>Autentica\u00e7\u00e3o JWT: O middleware verifica se um JWT v\u00e1lido \u00e9 fornecido no header <code>Authorization</code>. Se o token for inv\u00e1lido ou ausente, a requisi\u00e7\u00e3o \u00e9 bloqueada.</p> </li> <li> <p>Proxy Middleware: As requisi\u00e7\u00f5es para o caminho <code>/users</code> s\u00e3o encaminhadas para o servi\u00e7o de gerenciamento de usu\u00e1rios. Durante o proxy, o header <code>x-user</code> \u00e9 adicionado, contendo informa\u00e7\u00f5es extra\u00eddas do JWT.</p> </li> <li> <p>Testes Automatizados: O projeto inclui testes para verificar o comportamento de autentica\u00e7\u00e3o e proxy.</p> </li> </ol>"},{"location":"node_backend/api_gateway/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"node_backend/api_gateway/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"<ul> <li><code>SECRET_KEY</code>: Chave secreta para assinar e verificar JWTs. Deve ser definida no arquivo <code>.env</code>.</li> <li><code>USER_MANAGEMENT_API</code>: URL do servi\u00e7o de gerenciamento de usu\u00e1rios.</li> <li><code>PORT</code>: Porta em que o servidor Express ir\u00e1 rodar.</li> </ul>"},{"location":"node_backend/api_gateway/#iniciando-o-servidor","title":"Iniciando o Servidor","text":"<ol> <li>Instale as depend\u00eancias com <code>npm install</code>.</li> <li>Execute o servidor com <code>npm start</code>.</li> </ol>"},{"location":"node_backend/api_gateway/#testando","title":"Testando","text":"<p>Os testes s\u00e3o realizados utilizando <code>jest</code> e <code>supertest</code>. Para rodar os testes, utilize:</p> <pre><code>npm test\n</code></pre>"},{"location":"node_backend/api_gateway/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"node_backend/api_gateway/#requisicao-com-jwt-valido","title":"Requisi\u00e7\u00e3o com JWT V\u00e1lido","text":"<pre><code>curl -H \"Authorization: Bearer &lt;token_jwt_valido&gt;\" http://localhost:&lt;PORT&gt;/users\n</code></pre>"},{"location":"node_backend/api_gateway/#requisicao-sem-jwt","title":"Requisi\u00e7\u00e3o sem JWT","text":"<pre><code>curl http://localhost:&lt;PORT&gt;/users\n</code></pre> <p>Nota: A requisi\u00e7\u00e3o sem um JWT v\u00e1lido retornar\u00e1 um erro <code>403</code> ou <code>401</code>.</p>"},{"location":"node_backend/api_gateway/#adicionando-novos-endpoints","title":"Adicionando Novos Endpoints","text":"<p>Para adicionar novos endpoints, siga estas etapas:</p> <ol> <li> <p>Defina o middleware: Utilize o middleware JWT existente para proteger novas rotas, ou crie um novo caso necess\u00e1rio.</p> </li> <li> <p>Configure o Proxy: Use o <code>createProxyMiddleware</code> para definir novas regras de proxy. Exemplo:</p> <p><code>typescript app.use('/novo-endpoint', createProxyMiddleware({     target: 'http://novo-servico:8080',     changeOrigin: true,     on: proxyEvents,     logger: console }));</code></p> </li> <li> <p>Teste o Endpoint: Crie testes utilizando <code>supertest</code> no arquivo <code>app.spec.ts</code> para verificar o comportamento.</p> </li> </ol>"},{"location":"node_backend/api_gateway/#exemplo-de-teste-com-tdd","title":"Exemplo de Teste com TDD","text":"<p>Para criar um teste baseado em TDD, siga este exemplo:</p> <pre><code>it('deve retornar 404 para rota inexistente', async () =&gt; {\n    const response = await request(app).get('/rota-inexistente');\n    expect(response.status).toBe(404);\n});\n</code></pre>"},{"location":"node_backend/api_gateway/#glossario","title":"Gloss\u00e1rio","text":"<ul> <li>JWT (JSON Web Token): Um padr\u00e3o de token aberto que permite a transmiss\u00e3o segura de informa\u00e7\u00f5es entre partes como um objeto JSON.</li> <li>Middleware: Fun\u00e7\u00f5es que t\u00eam acesso ao objeto de requisi\u00e7\u00e3o (req), ao objeto de resposta (res) e \u00e0 pr\u00f3xima fun\u00e7\u00e3o middleware no ciclo de solicita\u00e7\u00e3o-resposta.</li> <li>Proxy: Um intermedi\u00e1rio para requisi\u00e7\u00f5es de cliente que busca recursos de outros servidores.</li> <li>Express: Um framework para Node.js que fornece um conjunto robusto de recursos para aplicativos web e m\u00f3veis.</li> <li><code>http-proxy-middleware</code>: Um middleware para Node.js que age como um proxy reverso, roteando requisi\u00e7\u00f5es para diferentes servidores.</li> <li><code>supertest</code>: Uma biblioteca para testar aplicativos HTTP usando Node.js.</li> <li><code>dotenv</code>: Um m\u00f3dulo que carrega vari\u00e1veis de ambiente de um arquivo <code>.env</code> para <code>process.env</code>.</li> </ul>"},{"location":"python_backend/","title":"Python Backend Com FastAPI e Peewee","text":""},{"location":"python_backend/#teoria","title":"Teoria","text":"<p>O projeto Python Backend \u00e9 uma aplica\u00e7\u00e3o web constru\u00edda com FastAPI, um framework moderno e de alto desempenho para construir APIs com Python 3. Ele utiliza Peewee como ORM (Object-Relational Mapping) para interagir com um banco de dados PostgreSQL, e dotenv para gerenciar vari\u00e1veis de ambiente.</p>"},{"location":"python_backend/#utilidade","title":"Utilidade","text":"<ul> <li> <p>FastAPI: Framework para constru\u00e7\u00e3o de APIs RESTful de forma r\u00e1pida e eficiente, com suporte a valida\u00e7\u00e3o de dados e documenta\u00e7\u00e3o autom\u00e1tica.</p> </li> <li> <p>Peewee: ORM leve e simples que facilita a intera\u00e7\u00e3o com bancos de dados, permitindo manipula\u00e7\u00e3o de dados atrav\u00e9s de modelos.</p> </li> <li> <p>psycopg2-binary: Driver para conectar aplica\u00e7\u00f5es Python ao PostgreSQL, permitindo executar consultas e manipular dados no banco.</p> </li> <li> <p>python-dotenv: Carrega vari\u00e1veis de ambiente a partir de um arquivo <code>.env</code>, facilitando a configura\u00e7\u00e3o de dados sens\u00edveis como credenciais.</p> </li> </ul>"},{"location":"python_backend/#exemplo-de-uso","title":"Exemplo de Uso","text":"<p>1.1. Estrutura do Projeto:</p> <pre><code>/python-backend\n\u2502\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 repositories.py\n\u2502   \u251c\u2500\u2500 services.py\n\u2502   \u2514\u2500\u2500 .env\n\u2502\n\u251c\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 test_app.py\n\u2502\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 pyproject.toml\n</code></pre>"},{"location":"python_backend/#2-fastapi","title":"2. FastAPI","text":""},{"location":"python_backend/#teoria_1","title":"Teoria","text":"<p>FastAPI \u00e9 um framework para a constru\u00e7\u00e3o de APIs com Python, projetado para ser r\u00e1pido e f\u00e1cil de usar. Ele utiliza a tipagem do Python para fornecer valida\u00e7\u00e3o autom\u00e1tica de dados e documenta\u00e7\u00e3o interativa.</p>"},{"location":"python_backend/#utilidade_1","title":"Utilidade","text":"<ul> <li> <p>Desempenho Alto: Constru\u00eddo sobre Starlette e Pydantic, o FastAPI \u00e9 capaz de lidar com v\u00e1rias requisi\u00e7\u00f5es simultaneamente, tornando-o ideal para aplica\u00e7\u00f5es de alto desempenho.</p> </li> <li> <p>Documenta\u00e7\u00e3o Autom\u00e1tica: Gera automaticamente uma documenta\u00e7\u00e3o interativa da API em Swagger e ReDoc.</p> </li> <li> <p>Valida\u00e7\u00e3o de Dados: Utiliza tipos de dados do Python para validar automaticamente as entradas.</p> </li> </ul>"},{"location":"python_backend/#exemplo-de-uso_1","title":"Exemplo de Uso","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n</code></pre>"},{"location":"python_backend/#3-peewee","title":"3. Peewee","text":""},{"location":"python_backend/#teoria_2","title":"Teoria","text":"<p>Peewee \u00e9 um ORM (Object-Relational Mapping) leve e simples para Python. Ele fornece uma interface intuitiva para interagir com bancos de dados, permitindo que desenvolvedores manipulem dados como objetos Python.</p>"},{"location":"python_backend/#utilidade_2","title":"Utilidade","text":"<ul> <li> <p>Facilidade de Uso: A sintaxe \u00e9 simples e intuitiva, permitindo opera\u00e7\u00f5es de banco de dados com menos c\u00f3digo.</p> </li> <li> <p>Suporte a M\u00faltiplos Bancos de Dados: Funciona com SQLite, PostgreSQL e MySQL, entre outros.</p> </li> <li> <p>Modelos de Dados: Permite a defini\u00e7\u00e3o de modelos de dados de forma declarativa, facilitando a manipula\u00e7\u00e3o de registros.</p> </li> </ul>"},{"location":"python_backend/#exemplo-de-uso_2","title":"Exemplo de Uso","text":"<pre><code>from peewee import Model, CharField, SqliteDatabase\n\ndb = SqliteDatabase('my_database.db')\n\nclass User(Model):\n    username = CharField()\n    email = CharField()\n\n    class Meta:\n        database = db\n\ndb.connect()\ndb.create_tables([User])\n</code></pre>"},{"location":"python_backend/#4-psycopg2-binary","title":"4. psycopg2-binary","text":""},{"location":"python_backend/#teoria_3","title":"Teoria","text":"<p>psycopg2-binary \u00e9 um adaptador PostgreSQL para Python. Ele permite que aplica\u00e7\u00f5es Python se conectem a um banco de dados PostgreSQL e executem opera\u00e7\u00f5es SQL.</p>"},{"location":"python_backend/#utilidade_3","title":"Utilidade","text":"<ul> <li> <p>Conex\u00e3o com PostgreSQL: Facilita a conex\u00e3o e execu\u00e7\u00e3o de comandos SQL em bancos de dados PostgreSQL.</p> </li> <li> <p>Suporte a Transa\u00e7\u00f5es: Permite gerenciar transa\u00e7\u00f5es de forma eficiente, garantindo a integridade dos dados.</p> </li> <li> <p>Desempenho: \u00c9 otimizado para desempenho e pode lidar com opera\u00e7\u00f5es em massa de forma eficiente.</p> </li> </ul>"},{"location":"python_backend/#exemplo-de-uso_3","title":"Exemplo de Uso","text":"<pre><code>import psycopg2\n\nconn = psycopg2.connect(\"dbname=mydatabase user=myuser password=mypassword\")\ncur = conn.cursor()\ncur.execute(\"SELECT * FROM my_table;\")\nrows = cur.fetchall()\ncur.close()\nconn.close()\n</code></pre>"},{"location":"python_backend/#5-python-dotenv","title":"5. python-dotenv","text":""},{"location":"python_backend/#teoria_4","title":"Teoria","text":"<p>python-dotenv \u00e9 uma biblioteca que carrega vari\u00e1veis de ambiente a partir de um arquivo <code>.env</code>. \u00c9 \u00fatil para gerenciar configura\u00e7\u00f5es sens\u00edveis, como credenciais de banco de dados, sem exp\u00f4-las no c\u00f3digo.</p>"},{"location":"python_backend/#utilidade_4","title":"Utilidade","text":"<ul> <li> <p>Gerenciamento de Configura\u00e7\u00f5es: Permite separar configura\u00e7\u00f5es sens\u00edveis do c\u00f3digo-fonte, facilitando a manuten\u00e7\u00e3o.</p> </li> <li> <p>Facilidade de Uso: Carrega as vari\u00e1veis de ambiente automaticamente, tornando-as acess\u00edveis via <code>os.environ</code>.</p> </li> <li> <p>Compatibilidade: Funciona bem com qualquer aplica\u00e7\u00e3o Python que precise de vari\u00e1veis de ambiente.</p> </li> </ul>"},{"location":"python_backend/#exemplo-de-uso_4","title":"Exemplo de Uso","text":"<pre><code>from dotenv import load_dotenv\nimport os\n\nload_dotenv()\ndatabase_url = os.getenv(\"DATABASE_URL\")\n</code></pre>"},{"location":"python_backend/#6-testes-com-pytest","title":"6. Testes com pytest","text":""},{"location":"python_backend/#teoria_5","title":"Teoria","text":"<p>pytest \u00e9 um framework de testes para Python que facilita a escrita de testes simples e escal\u00e1veis. Ele suporta testes de unidade, funcionais e integra\u00e7\u00e3o.</p>"},{"location":"python_backend/#utilidade_5","title":"Utilidade","text":"<ul> <li> <p>Simplicidade: Sintaxe simples que permite escrever testes de forma r\u00e1pida e intuitiva.</p> </li> <li> <p>Plugins: Possui uma vasta gama de plugins que estendem suas funcionalidades.</p> </li> <li> <p>Testes Ass\u00edncronos: Suporta testes ass\u00edncronos, permitindo testar c\u00f3digo que utiliza asyncio.</p> </li> </ul>"},{"location":"python_backend/#exemplo-de-uso_5","title":"Exemplo de Uso","text":"<pre><code>import pytest\n\ndef test_example():\n    assert 1 + 1 == 2\n</code></pre>"},{"location":"python_backend/#como-aplicar-os-conceitos-de-arquitetura-com-essa-stack","title":"Como aplicar os conceitos de arquitetura com essa stack?","text":""},{"location":"python_backend/#1-domain-driven-design-ddd","title":"1. Domain-Driven Design (DDD)","text":""},{"location":"python_backend/#teoria_6","title":"Teoria","text":"<p>O DDD \u00e9 uma abordagem de design de software que foca na colabora\u00e7\u00e3o entre especialistas de dom\u00ednio e desenvolvedores, visando criar um modelo que represente com precis\u00e3o as complexidades do neg\u00f3cio.</p>"},{"location":"python_backend/#como-a-stack-ajuda","title":"Como a Stack Ajuda","text":"<ul> <li>Modelagem de Dom\u00ednio com Peewee: O Peewee permite definir modelos de dados que refletem diretamente os conceitos do dom\u00ednio. Cada tabela do banco de dados pode ser representada como uma classe de modelo, facilitando a manipula\u00e7\u00e3o e a l\u00f3gica de neg\u00f3cios.</li> </ul> <p>Exemplo de Modelagem:</p> <pre><code>from peewee import Model, CharField, TextField, ForeignKeyField, SqliteDatabase\n\ndb = SqliteDatabase('feedback.db')\n\nclass Feedback(Model):\n    content = TextField()\n\n    class Meta:\n        database = db\n\nclass Question(Model):\n    text = CharField()\n    feedback = ForeignKeyField(Feedback, backref='questions')\n\n    class Meta:\n        database = db\n</code></pre> <ul> <li>Separa\u00e7\u00e3o de Preocupa\u00e7\u00f5es: A estrutura do projeto (com pastas como <code>repositories</code>, <code>services</code>, etc.) ajuda a organizar a l\u00f3gica de neg\u00f3cios separadamente dos detalhes de implementa\u00e7\u00e3o. Isso \u00e9 fundamental no DDD.</li> </ul> <p>Exemplo de Reposit\u00f3rio:</p> <pre><code>from .models import Feedback\n\ndef create_feedback(content: str) -&gt; Feedback:\n    return Feedback.create(content=content)\n\ndef get_feedback(feedback_id: int) -&gt; Feedback:\n    return Feedback.get_by_id(feedback_id)\n</code></pre>"},{"location":"python_backend/#2-test-driven-development-tdd","title":"2. Test-Driven Development (TDD)","text":""},{"location":"python_backend/#teoria_7","title":"Teoria","text":"<p>O TDD \u00e9 uma pr\u00e1tica de desenvolvimento onde os testes s\u00e3o escritos antes do c\u00f3digo de produ\u00e7\u00e3o, garantindo que o c\u00f3digo atenda aos requisitos definidos desde o in\u00edcio.</p>"},{"location":"python_backend/#como-a-stack-ajuda_1","title":"Como a Stack Ajuda","text":"<ul> <li> <p>Uso do pytest: O pytest \u00e9 uma ferramenta poderosa para escrever testes. Sua simplicidade e flexibilidade permitem que desenvolvedores escrevam testes de unidade e integra\u00e7\u00e3o rapidamente, incentivando a pr\u00e1tica de TDD.</p> </li> <li> <p>Uso do TestClient: O <code>TestClient</code> do FastAPI permite simular requisi\u00e7\u00f5es HTTP durante os testes, facilitando a verifica\u00e7\u00e3o do comportamento da API. Isso ajuda a garantir que a l\u00f3gica de neg\u00f3cios funcione conforme esperado.</p> </li> </ul> <p>Exemplo de Teste com TestClient:</p> <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_create_feedback():\n    response = client.post(\"/feedback/\", json={\"content\": \"Test feedback\"})\n    assert response.status_code == 200\n    assert response.json()[\"content\"] == \"Test feedback\"\n</code></pre> <ul> <li>Ciclo Red-Green-Refactor: Com pytest e TestClient, voc\u00ea pode facilmente seguir o ciclo TDD (escrever um teste que falha, implementar o c\u00f3digo para passar o teste e refatorar). Isso ajuda a garantir que o c\u00f3digo esteja sempre coberto por testes.</li> </ul> <p>Exemplo de Ciclo TDD:</p> <ol> <li>Escrever um teste que falha:</li> </ol> <pre><code>def test_get_feedback_not_found():\n    response = client.get(\"/feedback/999\")  # ID que n\u00e3o existe\n    assert response.status_code == 404\n</code></pre> <ol> <li>Implementar o c\u00f3digo para passar o teste:</li> </ol> <pre><code>@app.get(\"/feedback/{feedback_id}\")\ndef get_feedback(feedback_id: int):\n    try:\n        return service_get_feedback(feedback_id)\n    except Feedback.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Feedback not found\")\n</code></pre> <ol> <li>Refatorar o c\u00f3digo se necess\u00e1rio.</li> </ol>"},{"location":"python_backend/#3-solid","title":"3. SOLID","text":""},{"location":"python_backend/#teoria_8","title":"Teoria","text":"<p>Os princ\u00edpios SOLID s\u00e3o diretrizes para o design de software que visam tornar o c\u00f3digo mais compreens\u00edvel, flex\u00edvel e manuten\u00edvel.</p>"},{"location":"python_backend/#como-a-stack-ajuda_2","title":"Como a Stack Ajuda","text":"<ul> <li>Single Responsibility Principle (SRP): A estrutura do projeto, com diferentes pastas para <code>models</code>, <code>repositories</code> e <code>services</code>, promove a separa\u00e7\u00e3o de responsabilidades.</li> </ul> <p>Exemplo de SRP:</p> <pre><code># models.py\nclass Feedback(Model):\n    content = TextField()\n\n# repositories.py\ndef create_feedback(content: str) -&gt; Feedback:\n    return Feedback.create(content=content)\n\n# services.py\ndef service_create_feedback(content: str) -&gt; Feedback:\n    return create_feedback(content)\n</code></pre> <ul> <li>Open/Closed Principle (OCP): As classes de modelo e os servi\u00e7os podem ser facilmente estendidos sem modificar o c\u00f3digo existente.</li> </ul> <p>Exemplo de OCP:</p> <pre><code># Adicionando um novo m\u00e9todo no reposit\u00f3rio sem modificar o existente\ndef get_all_feedback() -&gt; List[Feedback]:\n    return list(Feedback.select())\n</code></pre> <ul> <li>Liskov Substitution Principle (LSP): Ao usar interfaces ou classes base quando necess\u00e1rio, voc\u00ea pode garantir que subclasses possam ser usadas como substitutas de suas classes base.</li> </ul> <p>Exemplo de LSP:</p> <pre><code>class BaseRepository:\n    def create(self, data):\n        pass\n\nclass FeedbackRepository(BaseRepository):\n    def create(self, content: str) -&gt; Feedback:\n        return Feedback.create(content=content)\n</code></pre> <ul> <li>Interface Segregation Principle (ISP): A estrutura modular do projeto permite que voc\u00ea crie interfaces pequenas e espec\u00edficas.</li> </ul> <p>Exemplo de ISP:</p> <pre><code>class FeedbackServiceInterface:\n    def create_feedback(self, content: str) -&gt; Feedback:\n        pass\n\nclass FeedbackService(FeedbackServiceInterface):\n    def create_feedback(self, content: str) -&gt; Feedback:\n        return create_feedback(content)\n</code></pre> <ul> <li>Dependency Inversion Principle (DIP): Manter a l\u00f3gica de neg\u00f3cios separada da implementa\u00e7\u00e3o concreta, permitindo f\u00e1cil troca de implementa\u00e7\u00f5es.</li> </ul> <p>Exemplo de DIP:</p> <pre><code>class FeedbackService:\n    def __init__(self, repository: FeedbackRepository):\n        self.repository = repository\n\n    def create_feedback(self, content: str) -&gt; Feedback:\n        return self.repository.create(content)\n</code></pre>"},{"location":"python_backend/feedbackresponseview/","title":"Visualiza\u00e7\u00e3o de Respostas de Feedback","text":"<p>Esse microservi\u00e7o \u00e9 respons\u00e1vel pela exibi\u00e7\u00e3o das respostas de feedback tanto para o colaborador de forma anonima, quanto para o PDM de forma n\u00e3o anonima</p>"},{"location":"python_backend/feedbackresponseview/#operacoes","title":"Opera\u00e7\u00f5es","text":"<ul> <li>Listar Respostas feedback colaborador: listar as repostas de feedback no contexto de um colaborador (Um PDM pode ser um colaborador tamb\u00e9m nesse contexto)</li> <li>Visualizar Resposta de Feedback: Visualizar uma resposta de feedback</li> <li>Solicitar analise de uma IA sobre os feedbacks recebidos: enviar os feedbacks recebidos para a api do flow analisar</li> </ul>"},{"location":"python_backend/feedbackresponseview/#dominio-identificado","title":"Dom\u00ednio identificado","text":"<p>Trata-se inteiramente de um subdom\u00ednio aonde todas as entidades s\u00e3o vers\u00f5es do dado voltado apenas para o contexto de visualiza\u00e7\u00e3o</p> <ul> <li>Usu\u00e1rio Logado</li> <li>Pedido de Feedback </li> <li>Pergunta</li> <li>Resposta de Feedback</li> <li>Resposta de pergunta</li> <li>Pergunta Respondida</li> </ul>"},{"location":"python_backend/feedbackresponseview/#validacoes","title":"Valida\u00e7\u00f5es","text":"<ul> <li> <p>Colaboradores podem ver somente as respostas recebidas para si mesmos (PDMs tamb\u00e9m s\u00e3o colaboradores nesse contexto)</p> </li> <li> <p>Colaboradores veem as respostas de foma anonima, tanto na listagem quanto na visualiza\u00e7\u00e3o completa</p> </li> <li> <p>PDMs veem as respostas com a identifica\u00e7\u00e3o, por\u00e9m apenas as de seus diretos, respostas de feedbacks voltadas para ele mesmo continuam anonimas</p> </li> </ul>"}]}